<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lio&#39;s Blog</title>
  <subtitle>No pains no gains!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-15T03:21:39.030Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lio Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring笔记（三）—— IOC 容器之 BeanFactory 和 ApplicationContext</title>
    <link href="http://yoursite.com/2016/11/13/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20IOC%20%E5%AE%B9%E5%99%A8%E4%B9%8B%20BeanFactory%20%E5%92%8C%20ApplicationContext/"/>
    <id>http://yoursite.com/2016/11/13/Spring笔记（三）—— IOC 容器之 BeanFactory 和 ApplicationContext/</id>
    <published>2016-11-13T12:05:25.000Z</published>
    <updated>2016-11-15T03:21:39.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>BeanFactory 是 Spring 框架最核心的接口，它提高了高级 IOC 的配置机制。BeanFactory 使管理不同类型的 Java 对象成为可能，ApplicationContext 建立在 BeanFactory 的基础之上，提供了更多面向应用的功能，提供了国际化支持和框架事件体系，更易于创建实际应用。BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身，ApplicationContext 面向使用 Spring 框架的开发者。<br><a id="more"></a>  </p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>BeanFactory 提供了 Spring IOC 的基础功能，但它只能在第三方框架中直接使用。和 BeanFactory 相关的接口，如 BeanFactoryAware，InitializingBean，DisposableBean，仍然存在于 Spring 中用于与 Spring 集成的大量第三方框架向后兼容的作用。BeanFactory 通常使用在运行于资源有限（内存消耗严重）的嵌入式应用中。   </p>
<ul>
<li><p>使用 BeanFactory 实现注册一个后处理器（PostProcessor）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</div><div class="line"><span class="comment">// populate the factory with bean definitions</span></div><div class="line"><span class="comment">// now register any needed BeanPostProcessor instances</span></div><div class="line">MyBeanPostProcessor postProcessor = <span class="keyword">new</span> MyBeanPostProcessor();</div><div class="line">factory.addBeanPostProcessor(postProcessor);</div><div class="line"><span class="comment">// now start using the factory</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用 BeanFactory 实现注册一个 BeanFactoryPostProcessor：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</div><div class="line">XmlBeanDefinitionReader reader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</div><div class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> FileSystemResource(<span class="string">"beans.xml"</span>));</div><div class="line"><span class="comment">// bring in some property values from a Properties file</span></div><div class="line">PropertyPlaceholderConfigurer cfg = <span class="keyword">new</span> PropertyPlaceholderConfigurer();</div><div class="line">cfg.setLocation(<span class="keyword">new</span> FileSystemResource(<span class="string">"jdbc.properties"</span>));</div><div class="line"><span class="comment">// now actually do the replacement</span></div><div class="line">cfg.postProcessBeanFactory(factory);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext 继承自 BeanFactory，提供了更多面向实际应用的功能。在 BeanFactory 中，很多功能需要以编程的方式实现，而在 ApplicationContext 中则可以通过配置的方式实现。</p>
<p>下图为 ApplicationContext 的继承体系图：<br><img src="/posts_img/beanfactory.png" alt="beanfactory"></p>
<p>ApplicationContext 的主要实现类是 ClassPathXmlApplicationContext，FileSystemXmlApplicationContext 和 AnnotationConfigApplicationContext，第一个默认从类路径加载配置文件，第二个默认从文件系统中装载配置文件，第三个可直接传入注解类，通过 register(Class…) 注册类或 scan(String…) 扫描路径 classpath 逐个注册类。   </p>
<p>如上图所示，ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口，在此之上还通过其他的接口扩展了 BeanFactory 的功能。这类接口包括：</p>
<ul>
<li>ApplicationEventPublisher：让容器拥有发布 ApplicationContext 事件的功能，包括容器启动时间、关闭事件等。实现了 ApplicationListener 事件监听接口的 Bean 可以接收到容器事件，并对事件进行响应处理。在 ApplicationContext 抽象实现类 AbstractApplicationContext 中，可以发现存在一个 ApplicationEventMulticaster，它负责保存所有监听器，以便在容器产生 ApplicationContext 事件时通知这些事件监听者。</li>
<li>MessageSource：为应用提供 i18n 国际化消息访问的功能。</li>
<li>ResourcePatternResolver：所有 ApplicationContext 实现类都实现了通过 Ant 风格的资源文件路径装载 Spring 的配置文件。</li>
<li>Lifecycle：该接口于 Spring2.0 加入，提供了 start() 和 stop() 两个方法，主要用于控制异步处理过程。具体使用时，该接口同时被 ApplicationContext 实现及具体 Bean 实现，ApplicationContext 会将 start/stop 的信息传递给容器中所有实现了该接口的 Bean，以达到管理和控制 JMX、任务调度等目的。</li>
</ul>
<p>ConfigurableApplicationContext 继承自 ApplicationContext，增加了两个主要的方法：refresh() 和 close()，让 ApplicationContext 具有启动、刷新和关闭上下文的能力。在 ApplicationContext 关闭时，调用 refresh 可启动 ApplicationContext；在启动状态下调用，则清除缓存并重新装载配置信息。调用 close 关闭 ApplicationContext。</p>
<h3 id="ApplicationContext-的初始化："><a href="#ApplicationContext-的初始化：" class="headerlink" title="ApplicationContext 的初始化："></a>ApplicationContext 的初始化：</h3><p>ApplicationContext 在实例化后和 BeanFactory 一样调用 getBean(beanName) 返回 Bean；在初始化时，BeanFactory 初始化容器时并未实例化 Bean 直至第一次访问 Bean，ApplicationContext 在初始化上下文时实例化所有单实例的 Bean。和基于 XML 文件配置方式的相比，类注解的配置方式可以很容易地让开发者控制 Bean 的初始化过程。</p>
<ul>
<li>配置文件在类路径下，优先使用 ClassPathXmlApplicationContext，“com/example/context/beans.xml” 等同于 “classpath:com/example/context/beans.xml”：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/example/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[]&#123; <span class="string">"com/beans1.xml"</span>, <span class="string">"com/beans2.xml"</span> &#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><p>配置文件在文件系统路径下，优先使用 FileSystemXmlApplicationContext，“com/example/context/beans.xml” 等同于 “file:com/example/context/beans.xml”:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"com/example/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>需要解析的是注解类，使用 AnnotationConfigApplicationContext：<br>Bean 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;  </div><div class="line">  <span class="keyword">private</span> String brand;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxSpeed;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxSpeed</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> maxSpeed;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSpeed</span><span class="params">(<span class="keyword">int</span> maxSpeed)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.maxSpeed = maxSpeed;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>带注解的 POJO 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beans</span> </span>&#123;</div><div class="line">	<span class="meta">@Bean</span>(name = <span class="string">"car"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Car <span class="title">buildCar</span><span class="params">()</span> </span>&#123;</div><div class="line">		Car car = <span class="keyword">new</span> Car();</div><div class="line">		car.setBrand(<span class="string">"奔驰"</span>);</div><div class="line">		car.setMaxSpeed(<span class="number">300</span>);</div><div class="line">		<span class="keyword">return</span> car;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过带 @Configuration 的 POJO 类启动容器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationApplicantionContext</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Beans.class);</div><div class="line">		Car car = context.getBean(<span class="string">"car"</span>, Car.class);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h3><p>WebApplicationContext 为 Web 应用而准备，它允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作。Spring 提供了工具类 WebApplicationContextUtils，通过 getWebApplicationContext(ServletContext sc) 获取 WebApplicationContext 实例。   </p>
<p>ConfigurableWebApplicationContext 继承自 WebApplicationContext，它允许通过配置的方式实例化 WebApplicationContext，它有两个重要的方法：</p>
<ul>
<li>setServletContext(ServletContext servletContext)：为 Spring 设置 WebApplicationContext。</li>
<li>setConfigLocations(String[] configLocations)：设置 Spring 配置文件地址，相对于 Web 根目录，如 /WEB-INF/lake-dao.xml，/WEB-INF/lake-service.xml 等。但用户也可使用带资源类型前缀的地址，如 classpath:com/example/context/beans.xml 等。</li>
</ul>
<h4 id="WebApplicationContext-初始化"><a href="#WebApplicationContext-初始化" class="headerlink" title="WebApplicationContext 初始化"></a>WebApplicationContext 初始化</h4><p>WebApplicationContext 需要 ServletContext 实例，它必须在拥有 Web 容器的情况下才能完成启动工作，和通常的 Web 开发类似，在 web.xml 中配置自启动的 Servlet 或容器监听器（ServletContextListener），即可完成启动 Spring WebApplicationContext 的工作。<br>Spring 提供了用于启动 WebApplicationContext 的 Servlet 和 Web 容器监听器：</p>
<ul>
<li>org.springframework.web.context.ContextLoaderServlet</li>
<li>org.springframework.web.context.ContextLoaderListener   </li>
</ul>
<p>两者都实现了启动 WebApplicationContext 实例的逻辑，只要根据 Web 容器的具体情况选择其一，并在 web.xml 中完成配置即可。</p>
<p>ContextLoaderListener 启动 WebApplicationContext:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指定配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 设置Web容器监听器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在不支持容器监听器的低版本 Web 容器中，使用 ContextLoaderServlet：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 声明自启动的Servlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springContextLoaderServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.context.ContextLoaderServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 启动顺序 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="标准和自定义事件"><a href="#标准和自定义事件" class="headerlink" title="标准和自定义事件"></a>标准和自定义事件</h3><p>ApplicationContext 通过 ApplicationEvent 和 ApplicationListener 接口提供事件处理，当某个 bean 实现了 ApplicationListener 接口时，当 ApplicationEvent 发布给 ApplicationContext 时，该 bean 会被告知。  </p>
<h4 id="标准事件"><a href="#标准事件" class="headerlink" title="标准事件"></a>标准事件</h4><ul>
<li>ContextRefreshedEvent：当 ApplicationContext 被初始化或刷新时发布事件。这里的初始化是指所有的 beans 被加载，后处理器 beans 被检测并激活，单例被预实例化，ApplicationContext 对象已准备好并可用。当上下文关闭时，refresh 可以被多次触发，这样的 ApplicationContext 支持热刷新。XmlWebApplicationContext 支持热刷新，而 GenericApplicationContext 不支持。</li>
<li>ContextStartedEvent：ApplicationContext 被启动时发布事件，使用 ConfigurableApplicationContext 接口的 start() 方法。这里的启动意味着 beans 接收一个显式的启动信号，该信号用于在显式的停止之后重新启动 beans，也可以用于启动没有被配置成自动启动的组件。</li>
<li>ContextStoppedEvent：ApplicationContext 被停止时发布事件，使用 ConfigurableApplicationContext 接口的 stop() 方法。</li>
<li>RequestHandledEvent：告知所有 beans 一个 HTTP 请求已被处理的特定的 web 事件，当请求完成时事件将会被发布，该事件只能通过 Spring 的 DispatcherServlet 应用于 Web 应用中。</li>
</ul>
<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>自定义事件需要继承 Spring 的 ApplicationEvent 基类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String address;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String test;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BlackListEvent</span><span class="params">(Object source, String address, String test)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">    <span class="keyword">this</span>.address = address;</div><div class="line">    <span class="keyword">this</span>.test = test;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// accessor and other methods...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用 ApplicationEventPublisher 的 publishEvent() 方法发布自定义的 ApplicationEvent，该类需要实现 ApplicationEventPublisherAware 接口并作为 bean 来注册。在配置期间，Spring 容器会检测到实现了 ApplicationEventPublisherAware 接口的 EmailService 并自动的调用 setApplicationEventPublisher() 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;String&gt; blackList;</div><div class="line">  <span class="keyword">private</span> ApplicationEventPublisher publisher;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlackList</span><span class="params">(List&lt;String&gt; blackList)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.blackList = blackList;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.publisher = publisher;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String address, String text)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (blackList.contains(address)) &#123;</div><div class="line">      BlackListEvent event = <span class="keyword">new</span> BlackListEvent(<span class="keyword">this</span>, address, text);</div><div class="line">      publisher.publishEvent(event);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// send email...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个实现 ApplicationListener 接口的类，并作为 bean 来注册，以此接受自定义的 ApplicationEvent。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">BlackListEvent</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">private</span> String notificationAddress;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.notificationAddress = notificationAddress;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的代码用于配置和注册上述的类：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emailService"</span> <span class="attr">class</span>=<span class="string">"example.EmailService"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blackList"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>known.spammer@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>known.hacker@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>john.doe@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"blackListNotifier"</span> <span class="attr">class</span>=<span class="string">"example.BlackListNotifier"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"notificationAddress"</span> <span class="attr">value</span>=<span class="string">"blacklist@example.org"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当 emailService 的 sendEmail() 方法被调用时，如果有任何邮件需要被加入黑名单，那么自定事件 BlackListEvent 会被发布。blackListNotifier bean 被注册作为 ApplicationListener 并接收 BlackListEvent。</p>
<h4 id="基于注解的事件监听器"><a href="#基于注解的事件监听器" class="headerlink" title="基于注解的事件监听器"></a>基于注解的事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String notificationAddress;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.notificationAddress = notificationAddress;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@EventListener</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="异步监听器"><a href="#异步监听器" class="headerlink" title="异步监听器"></a>异步监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">  <span class="comment">// BlackListEvent is processed in a separate thread</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="顺序监听器"><a href="#顺序监听器" class="headerlink" title="顺序监听器"></a>顺序监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">42</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">  <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;BeanFactory 是 Spring 框架最核心的接口，它提高了高级 IOC 的配置机制。BeanFactory 使管理不同类型的 Java 对象成为可能，ApplicationContext 建立在 BeanFactory 的基础之上，提供了更多面向应用的功能，提供了国际化支持和框架事件体系，更易于创建实际应用。BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身，ApplicationContext 面向使用 Spring 框架的开发者。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（二）—— 基本概念的理解</title>
    <link href="http://yoursite.com/2016/11/12/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/11/12/Spring笔记（二）—— 基本概念的理解/</id>
    <published>2016-11-12T04:57:13.000Z</published>
    <updated>2016-11-12T11:39:19.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h2><p>控制反转（Inversion of Control），即依赖注入（Dependency Injection），它们两个是一个东西的两种不同的说法。依赖注入是一个程序设计模式和架构模型，是控制反转的特殊实现，它指一个对象应用另外一个对象来提供一个特殊的能力。IOC 是 Spring 的核心，理解它的时候可以分为控制和反转两步来理解。<br><a id="more"></a><br>举个例子：你现在接到一份工作，但是你没空，你把工作交给你的好友来完成，你对工作如何完成已不关心，控制权移交到你的好友手中，他可以决定如何完成工作，你只需要等待结果即可。<br>如上所述，控制即对工作的控制权，反转可理解为原先你所掌握的工作的控制权移交到好友身上。在 Spring 中理解为某一接口具体实现类的控制权从调用类中移除，转而由第三方控制（类似对成员变量的赋值的控制权从代码移交到 xml 配置文件中）。依赖注入理解为让调用者对某一接口实现类的依赖关系由第三方（容器或协助类）注入，以移除调用类对某一接口实现类的依赖。</p>
<h2 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h2><p>面相切面编程（AOP）是对面相对象编程（OOP）的补充，OOP 主要的模块单元是 class (类)，而 AOP 是 aspect（切面），切面使得诸如事务管理等跨越多个类型和对象的关注点模块化。AOP 通过横向抽取机制，为无法通过纵向继承体系进行抽象的类的重复性代码提供了解决方案。</p>
<h3 id="连接点（Join-point）"><a href="#连接点（Join-point）" class="headerlink" title="连接点（Join point）"></a>连接点（Join point）</h3><p>在程序执行过程中具有边界性质的特定点，比如某个类初始化前后、类的某个方法调用前后或者处理异常的时候。在 Spring AOP 中，一个连接点总是代表一个方法的执行。</p>
<h3 id="增强（Advice）"><a href="#增强（Advice）" class="headerlink" title="增强（Advice）"></a>增强（Advice）</h3><p>在切面的某个特定的连接点上执行的动作。增强有各种类型，其中包括 around、before 和 after 等。Spring 以拦截器作增强模型，并维护一个以连接点为中心的拦截器链。</p>
<h3 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h3><p>用来匹配连接点的断言。增强关联一个切点表达式，并在匹配这个切入点的连接点上运行。AOP 通过切点定位特定的连接点：Spring 默认使用切点语法 AspectJ。通过数据库查询的概念来理解切点和连接点：连接点相当于数据库中的记录，而切点相当于查询条件，一个切点可以匹配多个连接点。</p>
<h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><p>切面由切点和增强组成，包括横切逻辑和连接点的定义。在 Spring AOP 中，切面可以使用通用类（schema-based 基于模式的风格）或者在普通类中以 @Aspect 注解（@AspectJ 注解样式）来实现。</p>
<h3 id="引介（Introduction）"><a href="#引介（Introduction）" class="headerlink" title="引介（Introduction）"></a>引介（Introduction）</h3><p>引介是一种特殊的增强，它为类添加一些属性和方法。一个业务类原先没有实现某个接口，通过 AOP 的引介功能，可以动态地为该业务添加接口的实现逻辑，让业务类成为该接口的实现类。例如：使用一个引介来使 bean 实现 IsModified 接口，以便简化缓存机制。</p>
<h3 id="目标对象（Target-object）"><a href="#目标对象（Target-object）" class="headerlink" title="目标对象（Target object）"></a>目标对象（Target object）</h3><p>被一个或多个切面所增强的对象。因为 Spring AOP 是使用运行时代理来实现的，所以这个对象总是一个代理对象。</p>
<h3 id="代理（Proxy）"><a href="#代理（Proxy）" class="headerlink" title="代理（Proxy）"></a>代理（Proxy）</h3><p>一个类被 AOP 织入增强后，就生成一个结果类，它是融合了原类和增强逻辑的代理类。根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能是原类的子类，所以我们可以采用调用原类相同的方式调用代理类。在 Spring 中，AOP 代理可以是 JDK 动态代理或者 CGLIB 代理。</p>
<h3 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h3><p> 织入是将增强添加到目标类具体连接点上的过程。AOP 有三种织入方式：</p>
<ul>
<li>编译期织入，要求特殊的 Java 编译器</li>
<li>类装载期织入，要求使用特殊的类装载器</li>
<li>动态代理织入，在运行期为目标类添加增强生成子类的方式    </li>
</ul>
<p>Spring 采用动态代理织入（即在运行时完成织入），而 AspectJ 采用编译期和类装载期织入。</p>
<h2 id="Spring-框架组件列表"><a href="#Spring-框架组件列表" class="headerlink" title="Spring 框架组件列表"></a>Spring 框架组件列表</h2><table>
<thead>
<tr>
<th>GroupId</th>
<th>ArtifactId</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework</td>
<td>spring-aop</td>
<td>支持基于代理的 AOP</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-aspects</td>
<td>基于 AspectJ 的切面</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-beans</td>
<td>包含 Groovy 的 Beans 支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-context</td>
<td>应用程序上下文运行时，包括调度和远程抽象</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-context-support</td>
<td>支持将常见的第三方库集成到 Spring 应用程序上下文的类中</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-core</td>
<td>Spring 核心，为其它模块所用</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-expression</td>
<td>Spring 表达式（SpEL）</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument</td>
<td>JVM 引导用的代理工具</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument-tomcat</td>
<td>Tomcat 的代理工具</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jdbc</td>
<td>JDBC 支持包，包括 DataSource 设置和 JDBC 访问支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jms</td>
<td>JMS 支持包，包括用于发送和接收 JMS 消息的帮助类</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-messaging</td>
<td>支持消息架构和协议</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-orm</td>
<td>对象/关系映射，包含对 JPA 和 Hibernate 支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-oxm</td>
<td>对象/XML映射</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-test</td>
<td>支持单元测试和集成测试的 Spring 组件</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-tx</td>
<td>事务基础设施，包括 DAO 支持和 JCA 集成</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-web</td>
<td>Web 支持包，包括客户端和 Web 远程处理</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-webmvc</td>
<td>REST Web 服务和 Web 应用程序实现的 model-view-controller</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-webmvc-portlet</td>
<td>MVC 实现在 Portlet 环境中的使用</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-websocket</td>
<td>WebSocket 和 SockJS 实现，包含 STOMP 支持</td>
</tr>
</tbody>
</table>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://github.com/waylau/spring-framework-4-reference/" target="_blank" rel="external">中文翻译《Spring Framework 4.x参考文档》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;控制反转（IOC）&quot;&gt;&lt;a href=&quot;#控制反转（IOC）&quot; class=&quot;headerlink&quot; title=&quot;控制反转（IOC）&quot;&gt;&lt;/a&gt;控制反转（IOC）&lt;/h2&gt;&lt;p&gt;控制反转（Inversion of Control），即依赖注入（Dependency Injection），它们两个是一个东西的两种不同的说法。依赖注入是一个程序设计模式和架构模型，是控制反转的特殊实现，它指一个对象应用另外一个对象来提供一个特殊的能力。IOC 是 Spring 的核心，理解它的时候可以分为控制和反转两步来理解。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（一）—— 版本新特性</title>
    <link href="http://yoursite.com/2016/11/12/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2016/11/12/Spring笔记（一）—— 版本新特性/</id>
    <published>2016-11-12T03:01:02.000Z</published>
    <updated>2016-11-12T04:10:31.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-spring-2-0-和-2-5-的新特性"><a href="#1-spring-2-0-和-2-5-的新特性" class="headerlink" title="1. spring 2.0 和 2.5 的新特性"></a>1. spring 2.0 和 2.5 的新特性</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>JDK 版本要在 1.4.2 以上，Java 5 和 Java 6 都支持。<br>Spring 框架继续保持对 Java EE 1.3 及以后版本的兼容，完全支持 Java EE 5。<br>对服务器（应用服务器和Web服务器）的支持：<br><a id="more"></a></p>
<ul>
<li>WebLogic：8.1、9.0、9.2、10</li>
<li>WebSphere：5.1、6.0、6.1</li>
<li>OC4J(Oracle)：10.1.3、11</li>
<li>JBoss：3.2、4.0、4.2</li>
<li>Tomcat：4.1、5.0、5.5、6.0</li>
<li>Jetty：4.2、5.1、6.1</li>
<li>Resin：2.1、3.0、3.1</li>
<li>GlassFish：v1、v2</li>
</ul>
<h3 id="1-2-控制反转（IOC）容器"><a href="#1-2-控制反转（IOC）容器" class="headerlink" title="1.2 控制反转（IOC）容器"></a>1.2 控制反转（IOC）容器</h3><h4 id="1-2-1-新的-bean-作用域"><a href="#1-2-1-新的-bean-作用域" class="headerlink" title="1.2.1 新的 bean 作用域"></a>1.2.1 新的 bean 作用域</h4><p>Spring2.0：IoC 容器中只支持 singleton 和 prototype 两个不同的 bean 作用域。<br>Spring2.5：还支持 request、session、global session 三个在 web 环境下使用的 bean 作用域，且提供了hooks，可以让用户创建自己的作用域。</p>
<h4 id="1-2-2-更简单的-XML-配置"><a href="#1-2-2-更简单的-XML-配置" class="headerlink" title="1.2.2 更简单的 XML 配置"></a>1.2.2 更简单的 XML 配置</h4><p>Spring2.5 对 Spring2.0 的 DTD 进行了更新，spring-beans-2.0.dtd 可在发布包下的 dist/resources 下找到。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"</span></div><div class="line">          "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;</div></pre></td></tr></table></figure></p>
<h4 id="1-2-3-可扩展的-XML-编写"><a href="#1-2-3-可扩展的-XML-编写" class="headerlink" title="1.2.3 可扩展的 XML 编写"></a>1.2.3 可扩展的 XML 编写</h4><p>作为一个应用程序开发人员或第三方框架或产品的供应商，开发自定义标签，供其他开发人员把这些标签嵌入到自己的Spring配置文件里。</p>
<h4 id="1-2-4-Annotation（注解）驱动配置"><a href="#1-2-4-Annotation（注解）驱动配置" class="headerlink" title="1.2.4 Annotation（注解）驱动配置"></a>1.2.4 Annotation（注解）驱动配置</h4><p>Spring 2.0 引入了一些用于配置的 annotation, 包括 <code>@Transactional, @Required, @PersistenceContext /@PersistenceUnit</code>。<br>Spring 2.5 引入了用于配置的完整的 Annotation 集合: <code>@Autowired</code>，以及对 JSR-250 注解 <code>@Resource, @PostConstruct, @PreDestroy</code> 的支持。</p>
<h4 id="1-2-5-在-classpath-中自动搜索组件"><a href="#1-2-5-在-classpath-中自动搜索组件" class="headerlink" title="1.2.5 在 classpath 中自动搜索组件"></a>1.2.5 在 classpath 中自动搜索组件</h4><p>组件类会注解为 stereotype: <code>@Component, @Repository, @Service, @Controller</code>，取决于程序的上下文配置，这些组件会被自动搜索到，并且转变为 Spring bean 定义，而不需要为每个类都进行明确的配置。</p>
<h3 id="1-3-面向切面编程（AOP）"><a href="#1-3-面向切面编程（AOP）" class="headerlink" title="1.3 面向切面编程（AOP）"></a>1.3 面向切面编程（AOP）</h3><h4 id="1-3-1-更加简单的-AOP-XML-配置"><a href="#1-3-1-更加简单的-AOP-XML-配置" class="headerlink" title="1.3.1 更加简单的 AOP XML 配置"></a>1.3.1 更加简单的 AOP XML 配置</h4><h4 id="1-3-2-对-AspectJ-切面的支持"><a href="#1-3-2-对-AspectJ-切面的支持" class="headerlink" title="1.3.2 对 @AspectJ 切面的支持"></a>1.3.2 对 @AspectJ 切面的支持</h4><h4 id="1-3-3-对-bean-命名-pointcut-的支持"><a href="#1-3-3-对-bean-命名-pointcut-的支持" class="headerlink" title="1.3.3 对 bean 命名 pointcut 的支持"></a>1.3.3 对 bean 命名 pointcut 的支持</h4><h4 id="1-3-4-对-AspectJ-装载时织入的支持"><a href="#1-3-4-对-AspectJ-装载时织入的支持" class="headerlink" title="1.3.4 对 AspectJ 装载时织入的支持"></a>1.3.4 对 AspectJ 装载时织入的支持</h4><h3 id="1-4-中间层"><a href="#1-4-中间层" class="headerlink" title="1.4 中间层"></a>1.4 中间层</h3><h4 id="1-4-1-在XML里更为简单的声明性事务配置"><a href="#1-4-1-在XML里更为简单的声明性事务配置" class="headerlink" title="1.4.1 在XML里更为简单的声明性事务配置"></a>1.4.1 在XML里更为简单的声明性事务配置</h4><p>Spring 2.5 支持方便的注解驱动的事务管理，通过 context:load-time-weaver 和 tx:annotation-driven mode=”aspectj” 的联合使用进行事务管理。</p>
<h4 id="1-4-2-对-Websphere-事务管理的完整支持"><a href="#1-4-2-对-Websphere-事务管理的完整支持" class="headerlink" title="1.4.2 对 Websphere 事务管理的完整支持"></a>1.4.2 对 Websphere 事务管理的完整支持</h4><p>要自动探测底层的 JTA 事务平台，可以使用 Spring 2.5 的新 tx:jta-transaction-manager 配置元素。它会自动探测 BEA WebLogic 和 IBM WebSphere，注册正确的 PlatformTransactionManager。</p>
<h4 id="1-4-3-JPA"><a href="#1-4-3-JPA" class="headerlink" title="1.4.3 JPA"></a>1.4.3 JPA</h4><p>Spring 2.5 对 OpenJPA 的支持升级到了 OpenJPA 1.0，支持 savepoint 这样的高级特性。</p>
<h4 id="1-4-4-异步的JMS"><a href="#1-4-4-异步的JMS" class="headerlink" title="1.4.4 异步的JMS"></a>1.4.4 异步的JMS</h4><p>在 Spring 2.0 之前，Spring 的 JMS 的作用局限于发送消息和同步接收消息。<br>Spring 2.0 提供对异步消息接收的完整支持。<br>在 Spring 2.5 中， JCA 风格的异步消息监听器设置也通过 GenericMessageEndpointManager 工具得到了支持。</p>
<h4 id="1-4-5-JDBC"><a href="#1-4-5-JDBC" class="headerlink" title="1.4.5 JDBC"></a>1.4.5 JDBC</h4><p>引入了新类，Spring 2.5 扩充了 SimpleJdbcTemplate 的功能，引入了 SimpleJdbcCall<br>和 SimpleJdbcInsert 操作对象。</p>
<h3 id="1-5-Web-层"><a href="#1-5-Web-层" class="headerlink" title="1.5 Web 层"></a>1.5 Web 层</h3><h4 id="1-5-1-Spring-MVC-合理的默认值"><a href="#1-5-1-Spring-MVC-合理的默认值" class="headerlink" title="1.5.1 Spring MVC 合理的默认值"></a>1.5.1 Spring MVC 合理的默认值</h4><h4 id="1-5-2-Portlet-框架"><a href="#1-5-2-Portlet-框架" class="headerlink" title="1.5.2 Portlet 框架"></a>1.5.2 Portlet 框架</h4><h4 id="1-5-3-基于-Annotation-的控制器"><a href="#1-5-3-基于-Annotation-的控制器" class="headerlink" title="1.5.3 基于 Annotation 的控制器"></a>1.5.3 基于 Annotation 的控制器</h4><h4 id="1-5-4-Spring-MVC-的表单标签库"><a href="#1-5-4-Spring-MVC-的表单标签库" class="headerlink" title="1.5.4 Spring MVC 的表单标签库"></a>1.5.4 Spring MVC 的表单标签库</h4><h4 id="1-5-5-对-Tiles-2，JSF-1-2，JAX-WS-支持"><a href="#1-5-5-对-Tiles-2，JSF-1-2，JAX-WS-支持" class="headerlink" title="1.5.5 对 Tiles 2，JSF 1.2，JAX-WS 支持"></a>1.5.5 对 Tiles 2，JSF 1.2，JAX-WS 支持</h4><h2 id="2-spring-3-x-的新特性"><a href="#2-spring-3-x-的新特性" class="headerlink" title="2. spring 3.x 的新特性"></a>2. spring 3.x 的新特性</h2><h3 id="2-1-spring-3-0"><a href="#2-1-spring-3-0" class="headerlink" title="2.1 spring 3.0"></a>2.1 spring 3.0</h3><h4 id="2-1-1-Spring3-0-以后分成多个-jar-包"><a href="#2-1-1-Spring3-0-以后分成多个-jar-包" class="headerlink" title="2.1.1 Spring3.0 以后分成多个 jar 包"></a>2.1.1 Spring3.0 以后分成多个 jar 包</h4><ul>
<li><code>org.springframework.aop</code>， 包含在应用中使用Spring的AOP特性时所需的类。</li>
<li><code>org.springframework.asm</code>，Spring独立的asm程序，Spring2.5.6的时候需要  asm.jar 包，3.0开始提供自己独立的asm.jar</li>
<li><code>org.springframework.aspects</code>，提供对AspectJ的支持，以方便的将面向切面的功能集成进IDE中，比如Eclipse AJDT.</li>
<li><code>org.springframework.beans</code>，所有应用都要用到，它包含访问配置文件，创建和管理Bean以及进行反转共控制和依赖注入操作时所需的类</li>
<li><code>org.springframework.context</code>，为 Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext 特性时所需的全部类，JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如 Velocity、 FreeMarker、 JasperReports 集成的类， 以及校验 Validation 方面的相关类。</li>
<li><code>org.springframework.context.support</code>，包含支持缓存Cache（ehcache）JCA、JMX、邮件服务（Java Mail、Mail）COS、任务计划Scheduling（Timer、Quartz）方面的类。</li>
<li><code>org.springframework.core</code>，包含 Spring 框架基本的核心工具类，Spring 其它组件要都要使用到这个包里的 类，是其它组件的基本核心。</li>
<li><code>org.springframework.expression</code>，包含Spring 表达式语言相关的类，应用使用到SpEL时需要添加这个jar包。</li>
<li><code>org.springframework.instrument.tomcat</code>，Spring3.0对Tomcat的连接池的集成。</li>
<li><code>org.springframework.instrument</code>，Spring3.0 对服务器的代理接口。</li>
<li><code>org.springframework.jdbc</code>，包含对 Spring 对 JDBC 数据访问进行封装的所有类。</li>
<li><code>org.springframework.jms</code>，提供了对JMS1.0.2/1.1 的支持类。</li>
<li><code>org.springframework.orm</code>，包含Spring对DAO特性集进行了扩展，使其支持iBATIS、JDO、OJB、TopLink，因+ 为Hibernate已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含 spring-dao.jar包。</li>
<li><code>org.springframework.oxm</code>，Spring 对 Object/XMl 的映射支持,可以让Java与XML之间来回切换。</li>
<li><code>org.springframework.test</code>，对Junit等测试框架的简单封装。</li>
<li><code>org.springframework.transaction</code>，为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。</li>
<li><code>org.springframework.web</code>，包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。</li>
<li><code>org.springframework.web.portlet</code>，对SpringMVC的增强，包含SpringMVC相关的类</li>
<li><code>org.springframework.web.servlet</code>，对J2EE6.0的Servlet3.0的支持。</li>
<li><code>org.springframework.web.struts</code>，对Struts框架支持，可以更方便更容易的集成Struts框架。</li>
</ul>
<h4 id="2-1-2-新增特性"><a href="#2-1-2-新增特性" class="headerlink" title="2.1.2 新增特性"></a>2.1.2 新增特性</h4><ul>
<li>Spring 表达式语言</li>
<li>增强的 IOC 和基于 java 的 Bean 元数据</li>
<li>通用类型转换系统和字段格式</li>
<li>来自于 Srping Web Services 项目的对象和 XML 之间的映射</li>
<li>增强的 REST 支持</li>
<li>@MVC additions （Spring的 MVC 注解增强）</li>
<li>声明式模型验证</li>
<li>提前对 JEE6 的支持</li>
<li>嵌入式数据库的支持</li>
</ul>
<h4 id="2-1-3-基于-Java-5-的核心API的更新"><a href="#2-1-3-基于-Java-5-的核心API的更新" class="headerlink" title="2.1.3 基于 Java 5 的核心API的更新"></a>2.1.3 基于 Java 5 的核心API的更新</h4><ul>
<li>BeanFactory接口尽可能的返回明确的实例：<ul>
<li>T getBean(Class<t> requiredType)</t></li>
<li>getBean(String name, Class<t> requiredType)</t></li>
<li>Map<string, t=""> getBeansOfType(Class<t> type)</t></string,></li>
</ul>
</li>
<li>Spring 的 TaskExecutor 继承 java.util.concurrent.Executor 接口<ul>
<li>扩展的子接口 AsyncTaskExecutor 支持标准的具有返回结果 Futures 的 Callables</li>
</ul>
</li>
<li>基于 Java5 的 API 和 SPI 转换器<ul>
<li>无状态的 ConversionService 和 Converters</li>
<li>取代标准的 JDK PropertyEditors</li>
</ul>
</li>
<li>类型化的 ApplicationListener<e></e></li>
</ul>
<h4 id="2-1-4-Spring-表达式语言（简称SpEL）"><a href="#2-1-4-Spring-表达式语言（简称SpEL）" class="headerlink" title="2.1.4 Spring 表达式语言（简称SpEL）"></a>2.1.4 Spring 表达式语言（简称SpEL）</h4><p>SpEL 使得 java 具有动态语言的风格，可以在运行时获取表达式的值。依赖注入时可以使用 SpEL 表达式语言, 不再只是原来简单的属性文件变量(xml)。<br>示例：</p>
<ul>
<li><p>xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"mycompany.RewardsTestDatabase"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseName"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"#&#123;systemProperties.databaseName&#125;"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyGenerator"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"#&#123;strategyBean.databaseKeyGenerator&#125;"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>java 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewardsTestDatabase</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties.databaseName&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatabaseName</span><span class="params">(String dbName)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;strategyBean.databaseKeyGenerator&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyGenerator</span><span class="params">(KeyGenerator kg)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-1-5-增强的-IOC-和基于-java-的-bean-配置"><a href="#2-1-5-增强的-IOC-和基于-java-的-bean-配置" class="headerlink" title="2.1.5 增强的 IOC 和基于 java 的 bean 配置"></a>2.1.5 增强的 IOC 和基于 java 的 bean 配置</h4><p>更多的注解的支持：<code>@Configuration，@Bean，@DependsOn， @Primary，@Lazy，@Import，@ImportResource，@Value</code><br>示例：</p>
<ul>
<li><p>xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.config"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"jdbcProperties"</span></span></div><div class="line">      <span class="attr">location</span>=<span class="string">"classpath:org/example/config/jdbc.properties"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>也可以使用如下代码来代替 xml 的配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);  </div><div class="line">FooService fooService = ctx.getBean(FooService.class);</div></pre></td></tr></table></figure>
</li>
<li><p>java 代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.example.config;</div><div class="line">...</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.url&#125;"</span>) String jdbcUrl;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.username&#125;"</span>) String username;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.password&#125;"</span>) String password;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooService <span class="title">fooService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FooServiceImpl(fooRepository());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooRepository <span class="title">fooRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HibernateFooRepository(sessionFactory());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SessionFactory <span class="title">sessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// wire up a session factory</span></div><div class="line">        AnnotationSessionFactoryBean asFactoryBean = <span class="keyword">new</span> AnnotationSessionFactoryBean();</div><div class="line">        asFactoryBean.setDataSource(dataSource());</div><div class="line">        <span class="comment">// additional config</span></div><div class="line">        <span class="keyword">return</span> asFactoryBean.getObject();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DriverManagerDataSource(jdbcUrl, username, password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-1-6-通用类型转换系统和字段格式化系统"><a href="#2-1-6-通用类型转换系统和字段格式化系统" class="headerlink" title="2.1.6 通用类型转换系统和字段格式化系统"></a>2.1.6 通用类型转换系统和字段格式化系统</h4><p>Spring3.0 加入了一个通用的类型转换系统，它被 SpEL 用作类型转换，并且可能被一个 Spring 容器使用，用于当绑定 bean 的属性值时进行类型转换。此外还增加了一个字段格式化系统，它提供了更简单且强大的功能以替代在客户端环境下的 Javabean 的 PropertyEidtors。  </p>
<h4 id="2-1-7-声明式模型验证"><a href="#2-1-7-声明式模型验证" class="headerlink" title="2.1.7 声明式模型验证"></a>2.1.7 声明式模型验证</h4><p>支持 JSR303，使用 Hibernate Validator 作为默认实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="meta">@NotNull</span>  </div><div class="line">    <span class="meta">@Max</span>(<span class="number">64</span>)  </div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line"></div><div class="line">    <span class="meta">@Min</span>(<span class="number">0</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-spring-3-1"><a href="#2-2-spring-3-1" class="headerlink" title="2.2 spring 3.1"></a>2.2 spring 3.1</h3><h4 id="2-2-1-新增特性"><a href="#2-2-1-新增特性" class="headerlink" title="2.2.1 新增特性"></a>2.2.1 新增特性</h4><ul>
<li>Cache 抽象</li>
<li>Bean 定义配置文件</li>
<li>Environment 抽象</li>
<li>PropertySource 抽象</li>
<li>注解代替 xml 配置</li>
<li>对 Hibernate 4.x 的支持</li>
<li>TestContext 框架对 @Configuration 和 Bean 定义配置文件 的支持</li>
<li>更为简洁的构造函数注入 c: namespace</li>
<li>非标准 setter 类的注入</li>
<li>Servlet 3 code-based configuration of Servlet Container 的支持</li>
<li>Servlet 3 MultipartResolver 的支持</li>
<li>改善了 O/R 映射支持，允许无persistence.xml的JPA包扫描</li>
<li>可以在 controller 中，使用 annotation 临时指定特殊的 Mapping 或者 ExceptionHandler，而且整个体系更加灵活和可扩展。</li>
</ul>
<h3 id="2-3-spring-3-2"><a href="#2-3-spring-3-2" class="headerlink" title="2.3 spring 3.2"></a>2.3 spring 3.2</h3><h4 id="2-3-1-新增特性"><a href="#2-3-1-新增特性" class="headerlink" title="2.3.1 新增特性"></a>2.3.1 新增特性</h4><ul>
<li>支持基于Servlet 3的异步请求处理</li>
<li>Spring MVC Test框架</li>
<li>内容协商（Content Negotiation）改进。ContentNeogtiationStrategy 现在可以根据传入请求确定请求的媒体类型。可用的实现是基于文件扩展名、查询参数、“Accept”头或者一个固定的内容类型。</li>
<li>@ControllerAdvice</li>
<li>矩阵变量（Matrix Variables），增加了 @MatrixVariable 用于从请求URI中提取矩阵变量。</li>
<li>增加了一个抽象基础类用于支持基于代码的Servlet 3+容器初始化。</li>
<li>ResponseEntityExceptionHandler，用于处理异常消息的转换，和 DefaultHandlerExceptionResolver 的区别在于，这个类返回 ModelAndView。</li>
<li>RestTemplate 和 @RequestBody 的参数支持泛型。</li>
<li>支持Jackson JSON 2</li>
<li>支持Tiles 3</li>
<li>改进 @RequestBody。@RequestBody 和 @RequestPart 的参数现在可以跟随Error参数，使它可以在 @RequestMapping 方法中处理验证的错误，@RequestBody 现在有一个 required 属性。</li>
<li>HTTP PATCH 方法。HTTP PATCH方法现在可用于@RequestMapping</li>
<li>拦截器（Interceptor）支持 URL patterns</li>
<li>在注入点（Injection Point）和Bean方法定义中使用元注解</li>
<li>初步支持JCache 0.5</li>
<li>@DateTimeFormat不再依赖Joda Time</li>
<li>全局日期时间格式化</li>
<li>新的测试特性</li>
<li>并发性的微调</li>
<li>基于Gradle的构建系统，并迁移到GitHub</li>
<li>支持Java SE 7和OpenJDK 7</li>
</ul>
<h2 id="3-spring-4-x-的新特性"><a href="#3-spring-4-x-的新特性" class="headerlink" title="3. spring 4.x 的新特性"></a>3. spring 4.x 的新特性</h2><h3 id="3-1-spring-4-0"><a href="#3-1-spring-4-0" class="headerlink" title="3.1 spring 4.0"></a>3.1 spring 4.0</h3><h4 id="3-1-1-新增特性"><a href="#3-1-1-新增特性" class="headerlink" title="3.1.1 新增特性"></a>3.1.1 新增特性</h4><ul>
<li>删除了被丢弃的包和方法</li>
<li>Java 8 的支持，最低需要 Java 6</li>
<li>使用 Java EE 6 或以上的版本来作为基线，同时包含了相关的 JPA2.0 和 Servlet3.0 的规范</li>
<li>使用 Groovy 的 DSL（DomainSpecific Languages）来定义 Bean</li>
<li>核心容器的改进<ul>
<li>Spring 注入 Bean 的时候把泛型类型当成一种形式的限定符。使用 Spring DataRepository 可以方便的插入特定的实现：@Autowired Repository<customer> customerRepository。</customer></li>
<li>使用 Spring 的元注解支持，可以开发自定义注解来公开源注解的特定属性。</li>
<li>当自动装配到 lists 和 arrays 时，Beans 可以被排序，支持 @Order 注解和 Ordered 接口两种方式。 @Lazy 注解可以用在注入点以及 @Bean 定义上。</li>
<li>引入 @Description 注解,开发人员可以使用基于Java 方式的配置。</li>
<li>根据条件筛选 Beans 的广义模型通过 @Conditional 注解加入。这和@Profile支持的类似，但是允许以编程式开发用户定义的策略。</li>
<li>基于 CGLIB 的代理类不在需要默认的构造方法。</li>
<li>框架支持管理时区。</li>
</ul>
</li>
<li>常规 Web 改进<ul>
<li>在 Spring MVC 应用中使用新的 @RestController 注解时，不再需要给 @RequestMapping 的方法添加 @ResponseBody 注解。</li>
<li>AsyncRestTemplate 类已被添加进来，当开发 REST 客户端时，允许非阻塞异步支持。</li>
<li>当开发 Spring MVC 应用时，Spring 现在提供了全面的时区支持</li>
</ul>
</li>
<li>WebSocket, SockJS 和 STOMP 消息</li>
<li>测试改进，引入了几个用于单元测试和集成测试的新功能<ul>
<li>几乎 spring-test 模块中所有的注解（例如：@ContextConfiguration、@WebAppConfiguration、@ContextHierarchy、@ActiveProfiles 等等)可以用作元注解来创建自定义的 composed annotations 并且可以减少测试套件的配置。</li>
<li>现在可以以编程方式解决 Bean 定义配置文件的激活。只需要实现一个自定义的 ActiveProfilesResolver，并且通过 @ActiveProfiles的resolver 属性注册。</li>
<li>新的 SocketUtils 类被引入到了 spring-core 模块。</li>
</ul>
</li>
</ul>
<h3 id="3-2-spring-4-1"><a href="#3-2-spring-4-1" class="headerlink" title="3.2 spring 4.1"></a>3.2 spring 4.1</h3><h4 id="3-2-1-新增特性"><a href="#3-2-1-新增特性" class="headerlink" title="3.2.1 新增特性"></a>3.2.1 新增特性</h4><ul>
<li>核心部分基本上无变化，提供了 DirectFieldAccessor 用于直接字段访问、yaml 配置、SpEL 的字节码编译化、BackOff 退避算法的基本实现、Base64Utils、SmartInitializingSingleton等；</li>
<li>在任务调度和事件机制上加入了异常处理部分；</li>
<li>cache 部分加入 jcache 的集成、类级别的 @CacheConfig 的支持、CacheResolver；</li>
<li>mvc 部分提供了一些视图解析器的 mvc 标签实现简化配置、提供了 GroovyWebApplicationContext 用于 Groovy web 集成、提供了 Gson、protobuf 的 HttpMessageConverter、静态资源处理方面添加了 resolver和 transformer、提供了对 groovy-templates 模板的支持、JSONP 的支持、对 Jackson 的 @JsonView 的支持等；</li>
<li>提供了页面自动化测试框架 Spring MVC Test HtmlUnit；</li>
<li>test 部分提供了更便利的 @sql 标签来执行测试脚本的初始化、MockRestServiceServer 对 AyncRestTemplate 支持、MockMvcConfigurer 来全局配置 MockMvc；</li>
<li>提供了对 Java 8 Optional 的支持（ObjectToOptionalConverter 实现；可以在MVC中如 @RequestParam 等注解的绑定）、从Spring 4.1起 Ehcache 支持需要 EhCache 2.5 或更高版本、兼容 Quartz 2.1.4、支持 javax.annotation.Priority（等价于@Order）、JMS API的增强、SpringJUnit4ClassRunner 需要 JUnit 4.9或更高版本支持。</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://jinnianshilongnian.iteye.com/blog/2102278" target="_blank" rel="external">开涛的博客–Spring 4.1 新特性——综述</a><br><a href="http://blog.csdn.net/z1049186181/article/details/51446643" target="_blank" rel="external">BigZ的专栏–Spring 4.0 新功能和增强</a><br><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">中文翻译 Spring Framework 4.x参考文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-spring-2-0-和-2-5-的新特性&quot;&gt;&lt;a href=&quot;#1-spring-2-0-和-2-5-的新特性&quot; class=&quot;headerlink&quot; title=&quot;1. spring 2.0 和 2.5 的新特性&quot;&gt;&lt;/a&gt;1. spring 2.0 和 2.5 的新特性&lt;/h2&gt;&lt;h3 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1 简介&quot;&gt;&lt;/a&gt;1.1 简介&lt;/h3&gt;&lt;p&gt;JDK 版本要在 1.4.2 以上，Java 5 和 Java 6 都支持。&lt;br&gt;Spring 框架继续保持对 Java EE 1.3 及以后版本的兼容，完全支持 Java EE 5。&lt;br&gt;对服务器（应用服务器和Web服务器）的支持：&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Github 与 Hexo 搭建博客步骤（使用 Next 主题）</title>
    <link href="http://yoursite.com/2016/11/11/Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2016/11/11/Github与hexo搭建博客步骤/</id>
    <published>2016-11-11T03:01:02.000Z</published>
    <updated>2016-11-12T04:06:22.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装前的准备"><a href="#1-安装前的准备" class="headerlink" title="1. 安装前的准备"></a>1. 安装前的准备</h2><p>Hexo 是一个快速简单并且强大的博客框架，使用者可以使用 markdown 语法编写文章，然后通过 hexo 生成带有主题的静态文件，并上传到 github，生成的 html 文件可以在浏览器上访问。本安装教程是在 ubuntu 平台上进行的，其他平台请另寻他处。<br>安装前 Hexo 前需要先安装 Node.js 和 Git，在后面会描述其安装过程。<br><a id="more"></a></p>
<h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><p>使用如下命令安装 Git，在这之后可以先了解 git 简单命令的使用，推荐：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a>。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git-core</div></pre></td></tr></table></figure>
<h2 id="3-安装-Node-js"><a href="#3-安装-Node-js" class="headerlink" title="3. 安装 Node.js"></a>3. 安装 Node.js</h2><p>我们可以使用 nvm 来安装 Node.js ，方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>
<p>安装完 nvm 之后重启窗口安装 Node.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure></p>
<p>如果不想使用命令安装可以直接下载 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 的安装包安装。<br>下载完 linux 下的压缩包后，将其复制到 /usr/local 目录下，并使用 tar -xvJf + 文件名，对压缩包进行解压，更改解压后的文件夹的权限为755。<br>修改环境变量，使用 vim 修改 /etc/profile，在文件末尾添加两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># node.js</div><div class="line">export NODE=/usr/local/node-v6.9.1-linux-x64</div><div class="line">export PATH=$&#123;NODE&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>之后执行命令 source /etc/profile，使用 node -v 命令查看版本号。</p>
<h2 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4. 安装 Hexo"></a>4. 安装 Hexo</h2><p>使用 npm 安装 hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install npm</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install nodejs-legacy</div><div class="line">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>经过一段时间的等待，会在终端显示如下树状结果，hexo 安装完毕。</p>
<p><img src="/posts_img/after_install_hexo.png" alt="after_install_hexo"></p>
<p>当 hexo 安装完毕，使用如下命令初始化 hexo 目录并安装依赖，生成的目录在当前所在的目录之下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt; # 初始化 hexo 并创建目录</div><div class="line">$ cd &lt;folder&gt; # 切换到目录之下</div><div class="line">$ npm install # 安装依赖包</div></pre></td></tr></table></figure></p>
<p>hexo 常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo g #完整命令为hexo generate，用于生成静态文件</div><div class="line">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览</div><div class="line">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</div><div class="line">$ hexo n #完整命令为hexo new，用于新建一篇文章</div></pre></td></tr></table></figure></p>
<p>在本地开启博客，用浏览器访问 <a href="http://localhost:4000/：" target="_blank" rel="external">http://localhost:4000/：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<h2 id="5-注册-Github-并创建-repository"><a href="#5-注册-Github-并创建-repository" class="headerlink" title="5. 注册 Github 并创建 repository"></a>5. 注册 Github 并创建 repository</h2><p>到 <a href="https://github.com/" target="_blank" rel="external">Github</a> 官网注册 Github 账号，登录进入个人主页选择 Repositories，再点击旁边的 NEW 按钮创建新的 repository，名字的格式必须为 name.github.io，例如：windows7lake.github.io。    </p>
<p><img src="/posts_img/create_repository.png" alt="create_repository"></p>
<h2 id="6-hexo-的配置"><a href="#6-hexo-的配置" class="headerlink" title="6. hexo 的配置"></a>6. hexo 的配置</h2><p>整个博客的配置文件，位于 <code>hexo\_config.yml</code>，通过它，我们可以对整个博客进行配置。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Lio's Blog	# 网站即博客的标题</div><div class="line">subtitle: No pains no gains! 	 	# 博客的副标题</div><div class="line">description: No pains no gains, Believes oneself, Nothing impossible!		# 博客的描述</div><div class="line">author: Lio Lin		# 作者</div><div class="line">language: zh-CN		# 语言</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL	设置自己的域名</div><div class="line">## If your site is put in a subdirectory,</div><div class="line">## set url as 'http://yoursite.com/child' and root as '/child/'</div><div class="line">url: http://yoursite.com</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md 	# 新创建的文章的默认文件名</div><div class="line">default_layout: post		</div><div class="line">titlecase: false 		# 将标题转换为标题大小写</div><div class="line">external_link: true 		# 在新的标签中打开外部连接</div><div class="line">filename_case: 0		# 0 为默认; 1 为小写; 2 为大写</div><div class="line">render_drafts: false		# 是否显示草稿</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false		# 是否创建相对于根文件夹的链接</div><div class="line">future: true</div><div class="line">highlight:			# 代码块设置</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format	时间格式</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10		# 每页显示的文章数，0 表示不分页</div><div class="line">pagination_dir: page	# 分页目录</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape	# 主题名</div><div class="line"></div><div class="line"># Deployment	部署到 github 的配置</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/windows7lake/windows7lake.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>使用如下命令克隆 Next 主题到我们的本地博客之下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>主题的配置文件，位于 <code>hexo\theme\主题名\_config.yml</code>，对主题的设置。<br>这里对主题的配置可以参考 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a> 官网。</p>
<h2 id="7-将本地-Hexo-发布到-Github"><a href="#7-将本地-Hexo-发布到-Github" class="headerlink" title="7. 将本地 Hexo 发布到 Github"></a>7. 将本地 Hexo 发布到 Github</h2><p>在本地创建 ssh key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<p>后面的 <code>your_email@youremail.com</code> 改为自己的邮箱，之后会要求确认路径和输入密码，一路回车就行。成功的话会在 <code>~/</code> 下生成 <code>.ssh</code> 文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的 key。   </p>
<p>回到 github，进入 Settings，选择 SSH and GPG Keys -&gt; New SSH Key，title 随便填，粘贴 key。为了验证是否成功，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果是第一次的会提示是否 continue，输入 yes 就会看到：<code>You’ve successfully authenticated， but GitHub does not provide shell access</code> ，这就表示已成功连上 github。   </p>
<p>接下来我们要做的就是把本地仓库传到 github 上去，在此之前还需要设置 username 和 email，因为 github 每次 commit 都会记录他们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your name&quot;  </div><div class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<p>发布本地博客内容到 Github，需切换到博客目录下，执行如下两条命令，执行如下的第二个命令，可能会要你输入用户名和密码，皆为注册 Github 时的数据，输入密码是不显示任何东西的，输入完毕回车即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>如果输入 <code>hexo d</code> 后遇到 <code>ERROR Deployer not found: Git</code>，则使用命令 <code>npm install hexo-deployer-git –save</code> 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装前的准备&quot;&gt;&lt;a href=&quot;#1-安装前的准备&quot; class=&quot;headerlink&quot; title=&quot;1. 安装前的准备&quot;&gt;&lt;/a&gt;1. 安装前的准备&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速简单并且强大的博客框架，使用者可以使用 markdown 语法编写文章，然后通过 hexo 生成带有主题的静态文件，并上传到 github，生成的 html 文件可以在浏览器上访问。本安装教程是在 ubuntu 平台上进行的，其他平台请另寻他处。&lt;br&gt;安装前 Hexo 前需要先安装 Node.js 和 Git，在后面会描述其安装过程。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/11/hello-world/"/>
    <id>http://yoursite.com/2016/11/11/hello-world/</id>
    <published>2016-11-11T03:01:02.000Z</published>
    <updated>2016-11-12T04:11:03.051Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
