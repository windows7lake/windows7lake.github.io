<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lio&#39;s Blog</title>
  <subtitle>No pains no gains!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-07T14:21:02.802Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lio Lin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring笔记（十八）—— Eclipse 使用 Maven 构建 Web 项目</title>
    <link href="http://yoursite.com/2016/12/03/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%20Eclipse%20%E4%BD%BF%E7%94%A8%20Maven%20%E6%9E%84%E5%BB%BA%20Web%20%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2016/12/03/Spring笔记（十八）—— Eclipse 使用 Maven 构建 Web 项目/</id>
    <published>2016-12-03T13:13:49.000Z</published>
    <updated>2016-12-07T14:21:02.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Maven-插件"><a href="#安装-Maven-插件" class="headerlink" title="安装 Maven 插件"></a>安装 Maven 插件</h2><p>使用 Maven 构建项目，当然需要先安装 Maven 插件。如果下载的是新版的 eclipse，一般都已经包含了 maven 插件，但如果没有 maven 插件，则需要手动安装。打开 Help –&gt; Install New Software，然后输入 HTTP 地址来安装（<a href="http://download.eclipse.org" target="_blank" rel="external">http://download.eclipse.org</a> ），下载相应的版本。<br><a id="more"></a><br><img src="/posts_img/maven/maven1.png" alt="maven1"><br>打开 Window –&gt; Preferences，检查 maven 插件是否安装成功：<br><img src="/posts_img/maven/maven2.png" alt="maven2">    </p>
<h2 id="建立-Maven-项目"><a href="#建立-Maven-项目" class="headerlink" title="建立 Maven 项目"></a>建立 Maven 项目</h2><h3 id="建立-Maven-Project"><a href="#建立-Maven-Project" class="headerlink" title="建立 Maven Project"></a>建立 Maven Project</h3><p>选择 File -&gt; New -&gt; Other 进入 New 窗口，选择 Maven -&gt; Maven Project，点击 Next。<br><img src="/posts_img/maven/maven3.png" alt="maven3">   </p>
<h3 id="选择项目路径"><a href="#选择项目路径" class="headerlink" title="选择项目路径"></a>选择项目路径</h3><p>这里可以选择自己所想要存储的项目路径，也可以选择默认的工作空间。<br><img src="/posts_img/maven/maven4.png" alt="maven4"></p>
<h3 id="选择项目类型"><a href="#选择项目类型" class="headerlink" title="选择项目类型"></a>选择项目类型</h3><p>在 Artifact Id 处选择 maven-archetype-webapp。<br><img src="/posts_img/maven/maven5.png" alt="maven5"></p>
<h3 id="指定项目参数"><a href="#指定项目参数" class="headerlink" title="指定项目参数"></a>指定项目参数</h3><p>输入 Group Id 和 Artifact Id 以及 Package，点击 Finish 完成 Maven 项目搭建。<br>Group Id 通常写主项目名称，Artifact Id 为子项目名称，如 Spring 中，Group Id：org.springframework，Artifact Id：spring-core，Package 为项目中的包，可以使用默认的，也可以自己新建包。<br><img src="/posts_img/maven/maven6.png" alt="maven6"></p>
<h3 id="建立完成"><a href="#建立完成" class="headerlink" title="建立完成"></a>建立完成</h3><p>在项目完成之前，这里会先从远程客户端下载所需要的包内容，所以会有进度条显示正在下载。如果没有翻墙，下载速度会非常慢，但是不着急的话可以让它慢慢下载，也可以下载别人打包好的 <code>maven</code> 包，放置在默认的家目录下的 <code>.m2</code> 文件下。<br><img src="/posts_img/maven/maven7.png" alt="maven7"><br>下载完 maven 所需的包之后，可以看到如下信息：<br><img src="/posts_img/maven/maven8.png" alt="maven8"><br>Maven 建立的项目完成后，其文件结果如下所示：<br><img src="/posts_img/maven/maven9.png" alt="maven9"></p>
<h2 id="添加-Tomcat-库"><a href="#添加-Tomcat-库" class="headerlink" title="添加 Tomcat 库"></a>添加 Tomcat 库</h2><h3 id="添加-Tomcat-服务器"><a href="#添加-Tomcat-服务器" class="headerlink" title="添加 Tomcat 服务器"></a>添加 Tomcat 服务器</h3><p>在建立完项目后，项目会报错 <code>The superclass &quot;javax.servlet.http.HttpServlet&quot; was not found on the Java Build Path</code>，这是没有导入 Tomcat 库的原因。<br><img src="/posts_img/maven/maven10.png" alt="maven10"><br>切换到 Servers 下添加 Tomcat 服务器，打开 Window -&gt; Show View -&gt; Servers，点击 <code>No servers are avaliable ...</code>。<br><img src="/posts_img/maven/maven11.png" alt="maven11"><br>在 New Server 窗口下选择 Apache -&gt; Tomcat v8.0 Server，这里选择自己的 tomcat 版本，点击 Next。<br><img src="/posts_img/maven/maven12.png" alt="maven12"><br>点击 Browse 选择 tomcat 所在的根目录，并选择自己所使用的 JRE 环境，点击 Finish 完成，这是会生成一个 Servers 文件夹。<br><img src="/posts_img/maven/maven13.png" alt="maven13">  </p>
<h3 id="添加-Tomcat-Libraries"><a href="#添加-Tomcat-Libraries" class="headerlink" title="添加 Tomcat Libraries"></a>添加 Tomcat Libraries</h3><p>右键项目选择 Build Path -&gt; Configure Build Path，跳转到 Properties for maven 页面，选择 Libraries，点击 Add Library。<br><img src="/posts_img/maven/maven14.png" alt="maven14"><br>在 Add Library 页面选择 Server Runtime，点击 Next，选择刚才添加的服务器，点击 Finish。<br><img src="/posts_img/maven/maven15.png" alt="maven15"><br><img src="/posts_img/maven/maven16.png" alt="maven16"><br>上面的步骤之后，还可以点击 JRE System Library 选择自己想要的 jdk 版本，这里选择 1.8 版本。      </p>
<h2 id="配置-Maven-项目"><a href="#配置-Maven-项目" class="headerlink" title="配置 Maven 项目"></a>配置 Maven 项目</h2><h3 id="Source-文件夹"><a href="#Source-文件夹" class="headerlink" title="Source 文件夹"></a>Source 文件夹</h3><p>在 Java Resources 需要 src/main/java，src/main/resources，src/test/java，src/test/resources，如果没有的则右击根目录 New -&gt; Source Folder 建立所需的文件夹。<br><img src="/posts_img/maven/maven17.png" alt="maven17"></p>
<h3 id="更改-class-路径"><a href="#更改-class-路径" class="headerlink" title="更改 class 路径"></a>更改 class 路径</h3><p>右键项目选择 Properties -&gt; Java Build Path -&gt; Source，为每个文件夹选择对应的输出文件夹。<br>双击每个文件夹的 Output folder，选择路径：</p>
<ul>
<li>src/main/java，src/main/resources，选择 target/classes</li>
<li>src/test/java，src/test/resources，选择 target/test-classes   </li>
</ul>
<p>选上 Allow output folders for source folders。<br><img src="/posts_img/maven/maven18.png" alt="maven18"><br><img src="/posts_img/maven/maven19.png" alt="maven19"><br><img src="/posts_img/maven/maven20.png" alt="maven20">      </p>
<h2 id="转换为-Dynamic-Web-项目"><a href="#转换为-Dynamic-Web-项目" class="headerlink" title="转换为 Dynamic Web 项目"></a>转换为 Dynamic Web 项目</h2><h3 id="修改设置配置-Dynamic-Web"><a href="#修改设置配置-Dynamic-Web" class="headerlink" title="修改设置配置 Dynamic Web"></a>修改设置配置 Dynamic Web</h3><p>打开 Window -&gt; Show View -&gt; Navigator，在根目录下选择 <code>.setting</code> 文件夹，修改以下文件内容。<br>修改 <code>org.eclipse.jdt.core.prefs</code> 文件，将版本号改为所选的 JRE 版本，这里为 1.8：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">eclipse.preferences.version=1</div><div class="line">org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled</div><div class="line">org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8</div><div class="line">org.eclipse.jdt.core.compiler.compliance=1.8</div><div class="line">org.eclipse.jdt.core.compiler.problem.assertIdentifier=error</div><div class="line">org.eclipse.jdt.core.compiler.problem.enumIdentifier=error</div><div class="line">org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning</div><div class="line">org.eclipse.jdt.core.compiler.source=1.8</div></pre></td></tr></table></figure></p>
<p>将 <code>org.eclipse.wst.common.component</code> 文件在的 project-version 也改为 1.8.0：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project-modules</span> <span class="attr">id</span>=<span class="string">"moduleCoreId"</span> <span class="attr">project-version</span>=<span class="string">"1.8.0"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">wb-module</span> <span class="attr">deploy-name</span>=<span class="string">"maven"</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/"</span> <span class="attr">source-path</span>=<span class="string">"/target/m2e-wtp/web-resources"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/"</span> <span class="attr">source-path</span>=<span class="string">"/src/main/webapp"</span></span></div><div class="line">    			<span class="attr">tag</span>=<span class="string">"defaultRootSource"</span> /&gt;</div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/WEB-INF/classes"</span> <span class="attr">source-path</span>=<span class="string">"/src/main/java"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/WEB-INF/classes"</span> <span class="attr">source-path</span>=<span class="string">"/src/main/resources"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/WEB-INF/classes"</span> <span class="attr">source-path</span>=<span class="string">"/src/test/java"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">wb-resource</span> <span class="attr">deploy-path</span>=<span class="string">"/WEB-INF/classes"</span> <span class="attr">source-path</span>=<span class="string">"/src/test/resources"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"context-root"</span> <span class="attr">value</span>=<span class="string">"maven"</span> /&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"java-output-path"</span> <span class="attr">value</span>=<span class="string">"/maven/target/classes"</span> /&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">wb-module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project-modules</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改 <code>org.eclipse.wst.common.project.facet.core.xml</code> 文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> /&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"java"</span> <span class="attr">version</span>=<span class="string">"1.5"</span> /&gt;</span><span class="comment">&lt;!-- JDK 的版本 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.web"</span> <span class="attr">version</span>=<span class="string">"2.3"</span> /&gt;</span><span class="comment">&lt;!-- Dynamic Web Moduel 的版本 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> <span class="attr">version</span>=<span class="string">"1.0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> /&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"java"</span> <span class="attr">version</span>=<span class="string">"1.8"</span> /&gt;</span><span class="comment">&lt;!-- JDK 的版本 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.web"</span> <span class="attr">version</span>=<span class="string">"3.1"</span> /&gt;</span><span class="comment">&lt;!-- Dynamic Web Moduel 的版本 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> <span class="attr">version</span>=<span class="string">"1.0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="查看配置结果"><a href="#查看配置结果" class="headerlink" title="查看配置结果"></a>查看配置结果</h3><p>回到 Project Explorer，右键选择 Properties -&gt; Project Facets，可查看使用的 Dynamic Web Module 和 Java 的版本。<br><img src="/posts_img/maven/maven21.png" alt="maven21">    </p>
<h2 id="设置部署程序集"><a href="#设置部署程序集" class="headerlink" title="设置部署程序集"></a>设置部署程序集</h2><p>在 Properties 窗口会关闭，选择 Deployment Assembly，点击进去后，如图：<br><img src="/posts_img/maven/maven22.png" alt="maven22"><br>此处列表是，部署项目时，文件发布的路径，由于正式部署时不需要测试的文件内容，所以删除 test 两项。<br><img src="/posts_img/maven/maven23.png" alt="maven23">  </p>
<h2 id="向-Maven-项目中添加-jar-包"><a href="#向-Maven-项目中添加-jar-包" class="headerlink" title="向 Maven 项目中添加 jar 包"></a>向 Maven 项目中添加 jar 包</h2><h3 id="pom-xml-的配置"><a href="#pom-xml-的配置" class="headerlink" title="pom.xml 的配置"></a>pom.xml 的配置</h3><p>Maven 可以管理项目依赖的 jar 包，通过 groupId， artifactId 以及 version 可以唯一确定一个 jar 包。这样可以防止老式 Web 项目中 WEB-INF/lib 下 jar 包不一致的问题，并且 Maven 还会自动下载添加进来的 jar 包所依赖的 jar 包。在 pom.xml 中添加所需要的 jar 包如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">  	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">  	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lake<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DebitSystem<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">name</span>&gt;</span>DebitSystem Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"></div><div class="line">  	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    		<span class="comment">&lt;!-- hibernate版本号 --&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.1.3.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">  	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    		<span class="comment">&lt;!-- hibernate --&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    		<span class="comment">&lt;!-- mysql驱动包 --&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    		<span class="comment">&lt;!-- junit测试包 --&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  		  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>DebitSystem<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="设置-jar-包的-scope"><a href="#设置-jar-包的-scope" class="headerlink" title="设置 jar 包的 scope"></a>设置 jar 包的 scope</h3><p>scope 有以下几种取值：     </p>
<ul>
<li>compile，缺省值，适用于所有阶段，会随着项目一起发布。</li>
<li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如 servlet.jar。</li>
<li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。</li>
<li>test，只在测试时使用，用于编译和运行测试代码，不会随项目发布。</li>
<li>system，类似 provided，需要显式提供包含依赖的jar，Maven 不会在 Repository 中查找它。</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://limingnihao.iteye.com/blog/830409" target="_blank" rel="external">使用Eclipse构建Maven的SpringMVC项目</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-Maven-插件&quot;&gt;&lt;a href=&quot;#安装-Maven-插件&quot; class=&quot;headerlink&quot; title=&quot;安装 Maven 插件&quot;&gt;&lt;/a&gt;安装 Maven 插件&lt;/h2&gt;&lt;p&gt;使用 Maven 构建项目，当然需要先安装 Maven 插件。如果下载的是新版的 eclipse，一般都已经包含了 maven 插件，但如果没有 maven 插件，则需要手动安装。打开 Help –&amp;gt; Install New Software，然后输入 HTTP 地址来安装（&lt;a href=&quot;http://download.eclipse.org&quot;&gt;http://download.eclipse.org&lt;/a&gt; ），下载相应的版本。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十五）—— Spring JDBC 访问数据库之 SimpleJdbc</title>
    <link href="http://yoursite.com/2016/11/27/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%20Spring%20JDBC%20%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%20SimpleJdbc/"/>
    <id>http://yoursite.com/2016/11/27/Spring笔记（十五）—— Spring JDBC 访问数据库之 SimpleJdbc/</id>
    <published>2016-11-27T12:12:29.000Z</published>
    <updated>2016-11-30T16:54:18.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用-SimpleJdbcInsert-插入数据"><a href="#使用-SimpleJdbcInsert-插入数据" class="headerlink" title="使用 SimpleJdbcInsert 插入数据"></a>使用 SimpleJdbcInsert 插入数据</h2><p>从具有最少配置选项的 SimpleJdbcInsert 类开始，在数据访问层的初始化方法中实例化 SimpleJdbcInsert。对于下面的示例，初始化方法是 setDataSource 方法，不需要继承 SimpleJdbcInsert 类，只需创建一个新实例并使用 withTableName 方法设置表名。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource).withTableName(<span class="string">"t_actor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">3</span>);</div><div class="line">        parameters.put(<span class="string">"id"</span>, actor.getId());</div><div class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</div><div class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</div><div class="line">        insertActor.execute(parameters);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里使用的 execute 方法将一个简单的 java.utils.Map 作为其唯一的参数，需要注意的是，用于 Map 的键必须匹配数据库中定义的表的列名，因为我们需要读取元数据以构造实际的 insert 语句。</p>
<h2 id="使用-SimpleJdbcInsert-检索自动生成的键"><a href="#使用-SimpleJdbcInsert-检索自动生成的键" class="headerlink" title="使用 SimpleJdbcInsert 检索自动生成的键"></a>使用 SimpleJdbcInsert 检索自动生成的键</h2><p>此示例使用与前面相同的插入，但不是传递 id，而是检索自动生成的键并将其设置在新的 Actor 对象上。创建 SimpleJdbcInsert 时，除了指定表名称之外，还可以使用 usingGeneratedKeyColumns 方法指定生成的键列的名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</div><div class="line">                    .withTableName(<span class="string">"t_actor"</span>)</div><div class="line">                    .usingGeneratedKeyColumns(<span class="string">"id"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</div><div class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</div><div class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</div><div class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</div><div class="line">        actor.setId(newId.longValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用上述方法执行插入操作时，不用将 ID 添加到 Map 中，而是调用 executeAndReturnKey 方法，这将返回一个 java.lang.Number 对象，我们可以使用它创建在域类中使用的数值类型的实例。如果有多个自动生成的列，或者生成的值是非数字的，那么可以使用从 executeAndReturnKeyHolder 方法返回的 KeyHolder。</p>
<h2 id="为-SimpleJdbcInsert-指定列"><a href="#为-SimpleJdbcInsert-指定列" class="headerlink" title="为 SimpleJdbcInsert 指定列"></a>为 SimpleJdbcInsert 指定列</h2><p>使用 usingColumns 方法指定列：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</div><div class="line">                    .withTableName(<span class="string">"t_actor"</span>)</div><div class="line">                    .usingColumns(<span class="string">"first_name"</span>, <span class="string">"last_name"</span>)</div><div class="line">                    .usingGeneratedKeyColumns(<span class="string">"id"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</div><div class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</div><div class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</div><div class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</div><div class="line">        actor.setId(newId.longValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用-SqlParameterSource-提供参数值"><a href="#使用-SqlParameterSource-提供参数值" class="headerlink" title="使用 SqlParameterSource 提供参数值"></a>使用 SqlParameterSource 提供参数值</h2><p>使用 Map 提供参数值不是最方便使用的类，Spring 提供了两个 SqlParameterSource 接口的实现。第一个是 BeanPropertySqlParameterSource，它将使用相应的 getter 方法提取 JavaBean 中的参数值。下面是例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</div><div class="line">                    .withTableName(<span class="string">"t_actor"</span>)</div><div class="line">                    .usingGeneratedKeyColumns(<span class="string">"id"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</div><div class="line">        SqlParameterSource parameters = <span class="keyword">new</span> BeanPropertySqlParameterSource(actor);</div><div class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</div><div class="line">        actor.setId(newId.longValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一个是 MapSqlParameterSource（类似于Map），但提供了一个更方便的可以链接的 addValue 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</div><div class="line">                    .withTableName(<span class="string">"t_actor"</span>)</div><div class="line">                    .usingGeneratedKeyColumns(<span class="string">"id"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</div><div class="line">        SqlParameterSource parameters = <span class="keyword">new</span> MapSqlParameterSource()</div><div class="line">                    .addValue(<span class="string">"first_name"</span>, actor.getFirstName())</div><div class="line">                    .addValue(<span class="string">"last_name"</span>, actor.getLastName());</div><div class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</div><div class="line">        actor.setId(newId.longValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用-SimpleJdbcCall-调用存储过程"><a href="#使用-SimpleJdbcCall-调用存储过程" class="headerlink" title="使用 SimpleJdbcCall 调用存储过程"></a>使用 SimpleJdbcCall 调用存储过程</h2><p>SimpleJdbcCall 类利用数据库中的元数据来查找输入和输出参数的名称，因此可以不必显式地声明它们。如果希望执行此操作，或者如果参数（如 ARRAY 或 STRUCT）没有自动映射到 Java 类，那么可以声明参数。第一个例子显示了一个简单的过程，它只从 MySQL 数据库返回 VARCHAR 和 DATE 格式的标量值。示例过程读取指定的 actor 条目，并以 out 参数的形式返回 first_name，last_name 和 birth_date 列。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> read_actor (</div><div class="line">    <span class="keyword">IN</span> in_id <span class="built_in">INTEGER</span>,</div><div class="line">    <span class="keyword">OUT</span> out_first_name <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</div><div class="line">    <span class="keyword">OUT</span> out_last_name <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</div><div class="line">    <span class="keyword">OUT</span> out_birth_date <span class="built_in">DATE</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">SELECT</span> first_name, last_name, birth_date</div><div class="line">    <span class="keyword">INTO</span> out_first_name, out_last_name, out_birth_date</div><div class="line">    <span class="keyword">FROM</span> t_actor <span class="keyword">where</span> <span class="keyword">id</span> = in_id;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<p>in_id 参数包含需要查找的 actor 的 id，out 参数返回表中读取的数据。     </p>
<p>下面是使用上述存储过程的 SimpleJdbcCall 配置的示例，除了 DataSource 之外，唯一的配置选项是存储过程的名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcCall procReadActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        <span class="keyword">this</span>.procReadActor = <span class="keyword">new</span> SimpleJdbcCall(dataSource)</div><div class="line">                    .withProcedureName(<span class="string">"read_actor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">readActor</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        SqlParameterSource in = <span class="keyword">new</span> MapSqlParameterSource()</div><div class="line">                    .addValue(<span class="string">"in_id"</span>, id);</div><div class="line">        Map out = procReadActor.execute(in);</div><div class="line">        Actor actor = <span class="keyword">new</span> Actor();</div><div class="line">        actor.setId(id);</div><div class="line">        actor.setFirstName((String) out.get(<span class="string">"out_first_name"</span>));</div><div class="line">        actor.setLastName((String) out.get(<span class="string">"out_last_name"</span>));</div><div class="line">        actor.setBirthDate((Date) out.get(<span class="string">"out_birth_date"</span>));</div><div class="line">        <span class="keyword">return</span> actor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>execute 方法接受 IN 参数，并返回一个 Map，该 Map 包含由存储过程中指定的名称键入的任何输出参数。在这种情况下，它们是 out_first_name，out_last_name 和 out_birth_date。</p>
<p>存储在结果映射中的 out 参数的名称与数据库中的 out 参数名称相同，其可以在数据库之间变化。为了使代码更便于移植，应该做一个不区分大小写的查找，或者指示 Spring 使用 LinkedCaseInsensitiveMap。后者需要创建自己的 JdbcTemplate 并将 setResultsMapCaseInsensitive 属性设置为 true，然后将此定制的 JdbcTemplate 实例传递到 SimpleJdbcCall 的构造函数中。以下是此配置的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcCall procReadActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        jdbcTemplate.setResultsMapCaseInsensitive(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">this</span>.procReadActor = <span class="keyword">new</span> SimpleJdbcCall(jdbcTemplate)</div><div class="line">                    .withProcedureName(<span class="string">"read_actor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="显式声明要用于-SimpleJdbcCall-的参数"><a href="#显式声明要用于-SimpleJdbcCall-的参数" class="headerlink" title="显式声明要用于 SimpleJdbcCall 的参数"></a>显式声明要用于 SimpleJdbcCall 的参数</h2><p>使用方法声明参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcCall procReadActor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        jdbcTemplate.setResultsMapCaseInsensitive(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">this</span>.procReadActor = <span class="keyword">new</span> SimpleJdbcCall(jdbcTemplate)</div><div class="line">                    .withProcedureName(<span class="string">"read_actor"</span>)</div><div class="line">                    .withoutProcedureColumnMetaDataAccess()</div><div class="line">                    .useInParameterNames(<span class="string">"in_id"</span>)</div><div class="line">                    .declareParameters(</div><div class="line">                              <span class="keyword">new</span> SqlParameter(<span class="string">"in_id"</span>, Types.NUMERIC),</div><div class="line">                              <span class="keyword">new</span> SqlOutParameter(<span class="string">"out_first_name"</span>, Types.VARCHAR),</div><div class="line">                              <span class="keyword">new</span> SqlOutParameter(<span class="string">"out_last_name"</span>, Types.VARCHAR),</div><div class="line">                              <span class="keyword">new</span> SqlOutParameter(<span class="string">"out_birth_date"</span>, Types.DATE)</div><div class="line">                    );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用-SimpleJdbcCall-调用存储过程函数"><a href="#使用-SimpleJdbcCall-调用存储过程函数" class="headerlink" title="使用 SimpleJdbcCall 调用存储过程函数"></a>使用 SimpleJdbcCall 调用存储过程函数</h2><p>调用存储函数的方式与调用存储过程几乎相同，除了需要提供的是函数名而不是过程名。使用 withFunctionName 方法传入要调用函数，并生成函数调用的相应字符串。executeFunction 用于执行函数，并返回函数返回值作为指定类型的对象，这意味着不必从结果映射中检索返回值。以下示例基于一个名为 get_actor_name 的存储函数，它返回一个 actor 的全名。如下是这个函数的 MySQL 源码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_actor_name (in_id <span class="built_in">INTEGER</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">DECLARE</span> out_name <span class="built_in">VARCHAR</span>(<span class="number">200</span>);</div><div class="line">    <span class="keyword">SELECT</span> <span class="keyword">concat</span>(first_name, <span class="string">' '</span>, last_name)</div><div class="line">        <span class="keyword">INTO</span> out_name</div><div class="line">        <span class="keyword">FROM</span> t_actor <span class="keyword">where</span> <span class="keyword">id</span> = in_id;</div><div class="line">    RETURN out_name;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line">    <span class="keyword">private</span> SimpleJdbcCall funcGetActorName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">        jdbcTemplate.setResultsMapCaseInsensitive(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">this</span>.funcGetActorName = <span class="keyword">new</span> SimpleJdbcCall(jdbcTemplate)</div><div class="line">                    .withFunctionName(<span class="string">"get_actor_name"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getActorName</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        SqlParameterSource in = <span class="keyword">new</span> MapSqlParameterSource()</div><div class="line">                    .addValue(<span class="string">"in_id"</span>, id);</div><div class="line">        String name = funcGetActorName.executeFunction(String.class, in);</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用-SimpleJdbcInsert-插入数据&quot;&gt;&lt;a href=&quot;#使用-SimpleJdbcInsert-插入数据&quot; class=&quot;headerlink&quot; title=&quot;使用 SimpleJdbcInsert 插入数据&quot;&gt;&lt;/a&gt;使用 SimpleJdbcInsert 插入数据&lt;/h2&gt;&lt;p&gt;从具有最少配置选项的 SimpleJdbcInsert 类开始，在数据访问层的初始化方法中实例化 SimpleJdbcInsert。对于下面的示例，初始化方法是 setDataSource 方法，不需要继承 SimpleJdbcInsert 类，只需创建一个新实例并使用 withTableName 方法设置表名。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十四）—— Spring JDBC 访问数据库之控制数据库连接</title>
    <link href="http://yoursite.com/2016/11/26/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%20Spring%20JDBC%20%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%8E%A7%E5%88%B6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2016/11/26/Spring笔记（十四）—— Spring JDBC 访问数据库之控制数据库连接/</id>
    <published>2016-11-26T11:57:49.000Z</published>
    <updated>2016-11-30T14:28:36.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><p>Spring 通过 DataSource 获取数据库连接，DataSource 是 JDBC 规范的一部分，是一个通用连接工厂。它允许容器或框架从应用程序代码中隐藏连接池和事务管理问题。当使用 Spring 的 JDBC 层时，从 JNDI 获取数据源，或者使用第三方提供的连接池实现配置自己的数据源，最受欢迎的实现是 Apache Jakarta Commons DBCP 和 C3P0。<br><a id="more"></a><br>通过获得与 DriverManagerDataSource 的连接来获取 JDBC 连接，指定 JDBC 驱动程序的完全限定类名，以便 DriverManager 可以加载驱动程序类，接着提供在 JDBC 驱动程序的 URL，然后提供用户名和密码以连接到数据库。</p>
<p>如下为在 Java 代码中配置 DriverManagerDataSource 的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</div><div class="line">dataSource.setDriverClassName(<span class="string">"org.hsqldb.jdbcDriver"</span>);</div><div class="line">dataSource.setUrl(<span class="string">"jdbc:hsqldb:hsql://localhost:"</span>);</div><div class="line">dataSource.setUsername(<span class="string">"sa"</span>);</div><div class="line">dataSource.setPassword(<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p>相关连的 XML 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>DBCP 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>C3P0 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="DataSourceUtils"><a href="#DataSourceUtils" class="headerlink" title="DataSourceUtils"></a>DataSourceUtils</h2><p>DataSourceUtils 类是一个便捷且强大的帮助类，它提供了从 JNDI 获取连接的静态方法，并在必要时关闭连接，它支持线程绑定连接，例如：DataSourceTransactionManager。</p>
<h2 id="SmartDataSource"><a href="#SmartDataSource" class="headerlink" title="SmartDataSource"></a>SmartDataSource</h2><p>SmartDataSource 接口应由可以提供与关系数据库连接的类实现，它扩展了 DataSource 接口，允许使用它来查询在给定操作之后是否应该关闭连接。</p>
<h2 id="AbstractDataSource"><a href="#AbstractDataSource" class="headerlink" title="AbstractDataSource"></a>AbstractDataSource</h2><p>AbstractDataSource 是 Spring DataSource 实现的一个抽象基类，如果需要自定义 DataSource 实现，即可继承 AbstractDataSource 类。</p>
<h2 id="SingleConnectionDataSource"><a href="#SingleConnectionDataSource" class="headerlink" title="SingleConnectionDataSource"></a>SingleConnectionDataSource</h2><p>SingleConnectionDataSource 类是 SmartDataSource（封装了每次使用后未关闭的单个连接） 接口的实现。它能够与简单的 JNDI 环境结合，轻松地在应用程序服务器之外测试代码，与 DriverManagerDataSource 相反，它一直重复使用同一个连接，避免过多创建物理连接。</p>
<h2 id="DriverManagerDataSource"><a href="#DriverManagerDataSource" class="headerlink" title="DriverManagerDataSource"></a>DriverManagerDataSource</h2><p>DriverManagerDataSource 类是标准 DataSource 接口的实现，它通过 bean 属性配置简单的 JDBC 驱动程序，并且每次都返回一个新的连接。   </p>
<h2 id="TransactionAwareDataSourceProxy"><a href="#TransactionAwareDataSourceProxy" class="headerlink" title="TransactionAwareDataSourceProxy"></a>TransactionAwareDataSourceProxy</h2><p>TransactionAwareDataSourceProxy 是目标 DataSource 的代理，它包装目标 DataSource 以增强对 Spring 管理事务的认识。在这方面，它类似于由 Java EE 服务器提供的事务 JNDI DataSource。</p>
<h2 id="DataSourceTransactionManager"><a href="#DataSourceTransactionManager" class="headerlink" title="DataSourceTransactionManager"></a>DataSourceTransactionManager</h2><p>DataSourceTransactionManager 类是单个 JDBC 数据源的 PlatformTransactionManager 实现。它将 JDBC 连接从指定的数据源绑定到当前正在执行的线程，从而潜在地允许每个数据源一个线程连接。需要应用程序代码来通过 DataSourceUtils.getConnection（DataSource） 而不是 Java EE 的标准 DataSource.getConnection 来检索 JDBC 连接。它抛出 unchecked 的 org.springframework.dao 异常，而不是 checked SQLExceptions。<br>DataSourceTransactionManager 类支持自定义隔离级别，并且用于作为 JDBC 语句查询超时应用的超时。为了支持后者，应用程序代码必须对每个创建的语句使用 JdbcTemplate 或调用 DataSourceUtils.applyTransactionTimeout（..） 方法。</p>
<h2 id="NativeJdbcExtractor"><a href="#NativeJdbcExtractor" class="headerlink" title="NativeJdbcExtractor"></a>NativeJdbcExtractor</h2><p>使用 NativeJdbcExtractor 配置自己的 JdbcTemplate 或 OracleLobHandler 访问与标准 JDBC API 不同的供应商特定的 JDBC 方法。</p>
<h2 id="初始化-DataSource"><a href="#初始化-DataSource" class="headerlink" title="初始化 DataSource"></a>初始化 DataSource</h2><p>使用 Spring XML 初始化数据库，提供一个指向 DataSource bean 的引用，在 spring-jdbc 命名空间中使用 initialize-database 标签：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jdbc:initialize-database</span> <span class="attr">data-source</span>=<span class="string">"dataSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:com/foo/sql/db-schema.sql"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"classpath:com/foo/sql/db-test-data.sql"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jdbc:initialize-database</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然而，为了获得对现有数据的创建和删除的更多控制，XML 命名空间提供了一些附加选项。第一个是用于开启和关闭初始化的标志，这可以根据环境进行设置（例如，从系统属性或环境 bean 中提取布尔值），例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jdbc:initialize-database</span> <span class="attr">data-source</span>=<span class="string">"dataSource"</span> <span class="attr">enabled</span>=<span class="string">"#&#123;systemProperties.INITIALIZE_DATABASE&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"..."</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jdbc:initialize-database</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二个选项是更能容忍故障，可以控制初始化程序的能力来忽略执行 SQL 脚本产生的某一错误，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jdbc:initialize-database</span> <span class="attr">data-source</span>=<span class="string">"dataSource"</span> <span class="attr">ignore-failures</span>=<span class="string">"DROPS"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">"..."</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">jdbc:initialize-database</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DataSource&quot;&gt;&lt;a href=&quot;#DataSource&quot; class=&quot;headerlink&quot; title=&quot;DataSource&quot;&gt;&lt;/a&gt;DataSource&lt;/h2&gt;&lt;p&gt;Spring 通过 DataSource 获取数据库连接，DataSource 是 JDBC 规范的一部分，是一个通用连接工厂。它允许容器或框架从应用程序代码中隐藏连接池和事务管理问题。当使用 Spring 的 JDBC 层时，从 JNDI 获取数据源，或者使用第三方提供的连接池实现配置自己的数据源，最受欢迎的实现是 Apache Jakarta Commons DBCP 和 C3P0。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十三）—— Spring JDBC 访问数据库之 JdbcTemplate 及错误处理</title>
    <link href="http://yoursite.com/2016/11/25/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20Spring%20JDBC%20%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%20JdbcTemplate%20%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/25/Spring笔记（十三）—— Spring JDBC 访问数据库之 JdbcTemplate 及错误处理/</id>
    <published>2016-11-25T11:44:23.000Z</published>
    <updated>2016-11-30T14:28:29.291Z</updated>
    
    <content type="html"><![CDATA[<p>Spring JDBC 是 Spring 所提供的持久层技术，它主要目的是降低使用 JDBC API 的门槛，以一种更直接、更简洁的方式使用 JDBC API。在 Spring JDBC 里，只需要完成定义连接数据库的参数、指定 SQL 语句、声明参数及参数值这些必要的事，而将资源获取、Statement 创建、资源释放以及异常处理等繁杂而乏味的工作交给 Spring JDBC。<br><a id="more"></a></p>
<h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>JdbcTemplate 是 JDBC 核心包中的主要类，它可以处理资源的创建和释放，帮助我们避免忘记关闭连接等类似错误。JdbcTemplate 类执行 SQL 查询，更新语句和存储过程调用，对 ResultSet 执行迭代和提取返回的参数值。它还能捕获 JDBC 异常，并将它们转换为 <code>org.springframework.dao</code> 包中定义的通用的、更丰富的异常层次结构。</p>
<h3 id="Querying-SELECT"><a href="#Querying-SELECT" class="headerlink" title="Querying (SELECT)"></a>Querying (SELECT)</h3><p>下面是一个获取关系中行数的简单查询：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> rowCount = <span class="keyword">this</span>.jdbcTemplate.queryForObject(<span class="string">"select count(*) from t_actor"</span>, Integer.class);</div></pre></td></tr></table></figure></p>
<p>使用绑定变量的简单查询：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> countOfActorsNamedJoe = <span class="keyword">this</span>.jdbcTemplate.queryForObject(</div><div class="line">            <span class="string">"select count(*) from t_actor where first_name = ?"</span>, Integer.class, <span class="string">"Joe"</span>);</div></pre></td></tr></table></figure></p>
<p>查询得到一个 String 变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String lastName = <span class="keyword">this</span>.jdbcTemplate.queryForObject(<span class="string">"select last_name from t_actor where id = ?"</span>,</div><div class="line">            <span class="keyword">new</span> Object[]&#123;<span class="number">1212L</span>&#125;, String.class);</div></pre></td></tr></table></figure></p>
<p>查询和填充单个域对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Actor actor = <span class="keyword">this</span>.jdbcTemplate.queryForObject(</div><div class="line">        <span class="string">"select first_name, last_name from t_actor where id = ?"</span>,</div><div class="line">        <span class="keyword">new</span> Object[]&#123;<span class="number">1212L</span>&#125;,</div><div class="line">        <span class="keyword">new</span> RowMapper&lt;Actor&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                Actor actor = <span class="keyword">new</span> Actor();</div><div class="line">                actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</div><div class="line">                actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</div><div class="line">                <span class="keyword">return</span> actor;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>查询和填充多个域对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Actor&gt; actors = <span class="keyword">this</span>.jdbcTemplate.query(</div><div class="line">        <span class="string">"select first_name, last_name from t_actor"</span>,</div><div class="line">        <span class="keyword">new</span> RowMapper&lt;Actor&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                Actor actor = <span class="keyword">new</span> Actor();</div><div class="line">                actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</div><div class="line">                actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</div><div class="line">                <span class="keyword">return</span> actor;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Updating-INSERT-UPDATE-DELETE"><a href="#Updating-INSERT-UPDATE-DELETE" class="headerlink" title="Updating (INSERT/UPDATE/DELETE)"></a>Updating (INSERT/UPDATE/DELETE)</h3><p>使用 <code>update(..)</code> 方法执行插入、更新和删除操作，参数值通常由 var 参数或对象数组提供。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jdbcTemplate.update(</div><div class="line">        <span class="string">"insert into t_actor (first_name, last_name) values (?, ?)"</span>,</div><div class="line">        <span class="string">"Leonor"</span>, <span class="string">"Watling"</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jdbcTemplate.update(</div><div class="line">        <span class="string">"update t_actor set last_name = ? where id = ?"</span>,</div><div class="line">        <span class="string">"Banjo"</span>, <span class="number">5276L</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jdbcTemplate.update(</div><div class="line">        <span class="string">"delete from actor where id = ?"</span>,</div><div class="line">        Long.valueOf(actorId));</div></pre></td></tr></table></figure>
<h3 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h3><p>我们可以使用 <code>execute（..）</code> 方法执行任意的 SQL 语句，因此该方法通常用于 DDL（数据库定义语言）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.jdbcTemplate.execute(<span class="string">"create table mytable (id integer, name varchar(100))"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>JdbcTemplate 类的实例为线程安全的，这意味着我们可以配置 JdbcTemplate 的单实例，并将此共享引用安全地注入到多个 DAO。使用 JdbcTemplate 类（以及相关的 NamedParameterJdbcTemplate 类）的一个常见做法是在 Spring 配置文件中配置一个 DataSource，然后将共享的 DataSource bean 依赖注入到 DAO 类中; JdbcTemplate 在 DataSource 的 setter 方法中创建。      </p>
<p>DAO 部分如下示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcCorporateEventDao</span> <span class="keyword">implements</span> <span class="title">CorporateEventDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// JDBC-backed implementations of the methods on the CorporateEventDao follow...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相关的 XML 配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"corporateEventDao"</span> <span class="attr">class</span>=<span class="string">"com.example.JdbcCorporateEventDao"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上述的配置方法也可以使用显示配置的方法替代，显式配置的替代方法是对依赖注入使用组件扫描和注释支持 在这种情况下，使用 @Repository 注释类（这使它成为组件扫描的候选类），并使用 @Autowired 注释 DataSource 的 setter 方法。      </p>
<p>DAO 部分如下示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcCorporateEventDao</span> <span class="keyword">implements</span> <span class="title">CorporateEventDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// JDBC-backed implementations of the methods on the CorporateEventDao follow...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相关的 XML 配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Scans within the base package of the application for</span></div><div class="line">          @Component classes to configure as beans --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.springframework.docs.test"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="NamedParameterJdbcTemplate"><a href="#NamedParameterJdbcTemplate" class="headerlink" title="NamedParameterJdbcTemplate"></a>NamedParameterJdbcTemplate</h2><p>NamedParameterJdbcTemplate 类增加了使用命名参数对 JDBC 语句进行编程的支持，而不是仅使用占位符（’？’）参数来对 JDBC 语句进行编程。NamedParameterJdbcTemplate 类封装了一个 JdbcTemplate，并委托给包装的 JdbcTemplate 来完成它的大部分工作。<br>MapSqlParameterSource 实现类内部通过一个 Map 存储参数，可以通过 addValue(String paramName, Object value) 或 addValue(Map values) 添加参数，并通过参数名和 SQL 语句的命名参数匹配的方式绑定参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some JDBC-backed DAO class...</span></div><div class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOfActorsByFirstName</span><span class="params">(String firstName)</span> </span>&#123;</div><div class="line">    String sql = <span class="string">"select count(*) from T_ACTOR where first_name = :first_name"</span>;</div><div class="line">    SqlParameterSource namedParameters = <span class="keyword">new</span> MapSqlParameterSource(<span class="string">"first_name"</span>, firstName);</div><div class="line">    <span class="comment">// 还可以使用基于 Map 的格式，MapSqlParameterSource 只是对 Map 的简单实现</span></div><div class="line">    <span class="comment">// Map&lt;String, String&gt; namedParameters = Collections.singletonMap("first_name", firstName);</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一个 SqlParameterSource 实现类是 BeanPropertySqlParameterSource，这个类将一个 JavaBean 对象封装成一个参数源，以便通过 JavaBean 属性名和 SQL 语句中命名参数匹配的方式绑定参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// setters omitted...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some JDBC-backed DAO class...</span></div><div class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOfActors</span><span class="params">(Actor exampleActor)</span> </span>&#123;</div><div class="line">    <span class="comment">// notice how the named parameters match the properties of the above 'Actor' class</span></div><div class="line">    String sql = <span class="string">"select count(*) from T_ACTOR where first_name = :firstName and last_name = :lastName"</span>;</div><div class="line">    SqlParameterSource namedParameters = <span class="keyword">new</span> BeanPropertySqlParameterSource(exampleActor);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SQLExceptionTranslator"><a href="#SQLExceptionTranslator" class="headerlink" title="SQLExceptionTranslator"></a>SQLExceptionTranslator</h2><p>SQLExceptionTranslator 是一个接口类，可以在 SQLExceptions 和 Spring 的 <code>org.springframework.dao.DataAccessException</code> 之间进行转换。SQLErrorCodeSQLExceptionTranslator 是 SQLExceptionTranslator 的默认实现，此实现使用特定的供应商代码，它比 SQLState 实现更精确，此类由 SQLErrorCodesFactory 创建和填充，SQLErrorCodesFactory 是创建 SQLErrorCodes 的工厂类，且是基于名为 sql-error-codes.xml 的配置文件的内容创建的。      </p>
<p>自定义 SQLErrorCodeSQLExceptionTranslator 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSQLErrorCodesTranslator</span> <span class="keyword">extends</span> <span class="title">SQLErrorCodeSQLExceptionTranslator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> DataAccessException <span class="title">customTranslate</span><span class="params">(String task, String sql, SQLException sqlex)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sqlex.getErrorCode() == -<span class="number">12345</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DeadlockLoserDataAccessException(task, sqlex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在此示例中，特定错误代码 -12345 被转换，其他错误由默认转换器实现进行转换。要使用此自定义转换器，需要通过方法 setExceptionTranslator 将其传递给 JdbcTemplate，并将此 JdbcTemplate 用于需要此转换器的所有数据访问处理中。下面是如何使用自定义转换器的示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">    <span class="comment">// create a JdbcTemplate and set data source</span></div><div class="line">    <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</div><div class="line">    <span class="keyword">this</span>.jdbcTemplate.setDataSource(dataSource);</div><div class="line"></div><div class="line">    <span class="comment">// create a custom translator and set the DataSource for the default translation lookup</span></div><div class="line">    CustomSQLErrorCodesTranslator tr = <span class="keyword">new</span> CustomSQLErrorCodesTranslator();</div><div class="line">    tr.setDataSource(dataSource);</div><div class="line">    <span class="keyword">this</span>.jdbcTemplate.setExceptionTranslator(tr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateShippingCharge</span><span class="params">(<span class="keyword">long</span> orderId, <span class="keyword">long</span> pct)</span> </span>&#123;</div><div class="line">    <span class="comment">// use the prepared JdbcTemplate for this update</span></div><div class="line">    <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"update orders set shipping_charge = shipping_charge * ? / 100"</span></div><div class="line">                + <span class="string">" where id = ?"</span>, pct, orderId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecuteAnUpdate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"update mytable set name = ? where id = ?"</span>, name, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回自增键"><a href="#返回自增键" class="headerlink" title="返回自增键"></a>返回自增键</h2><p><code>update()</code> 方法支持检索由数据库生成的主键，该方法将 PreparedStatementCreator 作为其第一个参数，是指定所需的 insert 语句的方式；另一个参数是　KeyHolder，它包含更新成功返回时生成的密钥。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String INSERT_SQL = <span class="string">"insert into my_test (name) values(?)"</span>;</div><div class="line"><span class="keyword">final</span> String name = <span class="string">"Rob"</span>;</div><div class="line"></div><div class="line">KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</div><div class="line">jdbcTemplate.update(</div><div class="line">    <span class="keyword">new</span> PreparedStatementCreator() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">            PreparedStatement ps = connection.prepareStatement(INSERT_SQL, <span class="keyword">new</span> String[] &#123;<span class="string">"id"</span>&#125;);</div><div class="line">            ps.setString(<span class="number">1</span>, name);</div><div class="line">            <span class="keyword">return</span> ps;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    keyHolder);</div><div class="line"></div><div class="line"><span class="comment">// keyHolder.getKey() now contains the generated key</span></div></pre></td></tr></table></figure></p>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>如果需要一次性插入或更新多条记录，可以简单地通过多次调用 update() 方法完成任务，也可以使用 JDBCTemplate 批量数据更改的方法。一般后者的性能更好，因为更新的数据将被批量发送到数据库中，它减少了对数据库访问的次数。</p>
<h3 id="使用-JdbcTemplate-进行批量操作"><a href="#使用-JdbcTemplate-进行批量操作" class="headerlink" title="使用 JdbcTemplate 进行批量操作"></a>使用 JdbcTemplate 进行批量操作</h3><p>使用 JdbcTemplate 批量操作需要实现指定接口 BatchPreparedStatementSetter 的两个方法，并将其实现作为 batchUpdate 方法的第二个参数，此方法的调用次数为 getBatchSize 方法中返回的次数。使用 getBatchSize 方法返回当前批处理的大小；使用 setValues 方法设置预准备语句的参数值。以下示例根据列表中的条目更新 actor 表，整个列表在本示例中用作批处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List&lt;Actor&gt; actors) &#123;</div><div class="line">        <span class="keyword">int</span>[] updateCounts = jdbcTemplate.batchUpdate(</div><div class="line">            <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</div><div class="line">            <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                    ps.setString(<span class="number">1</span>, actors.get(i).getFirstName());</div><div class="line">                    ps.setString(<span class="number">2</span>, actors.get(i).getLastName());</div><div class="line">                    ps.setLong(<span class="number">3</span>, actors.get(i).getId().longValue());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> actors.size();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        <span class="keyword">return</span> updateCounts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用-List-进行批量操作"><a href="#使用-List-进行批量操作" class="headerlink" title="使用 List 进行批量操作"></a>使用 List 进行批量操作</h3><p>JdbcTemplate 和 NamedParameterJdbcTemplate 都提供了批量更新的替代方法，不是实现特殊的批处理接口，而是将调用中的所有参数值作为 List 提供。namedParameterJdbcTemplate 提供了一个 SqlParameterSource 数组，批处理的每个成员都是一个条目，使用 SqlParameterSource.createBatch 方法可以创建此数组，其传入的参数为包含参数值的 JavaBeans 数组或 Maps 数组。    </p>
<p>使用 NamedParameterJdbcTemplate 的批量更新：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> NamedParameterTemplate namedParameterJdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List&lt;Actor&gt; actors) &#123;</div><div class="line">        SqlParameterSource[] batch = SqlParameterSourceUtils.createBatch(actors.toArray());</div><div class="line">        <span class="keyword">int</span>[] updateCounts = namedParameterJdbcTemplate.batchUpdate(</div><div class="line">                  <span class="string">"update t_actor set first_name = :firstName, last_name = :lastName where id = :id"</span>,</div><div class="line">                  batch);</div><div class="line">        <span class="keyword">return</span> updateCounts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用 JdbcTemplate 和占位符 “？” 的批量更新：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List&lt;Actor&gt; actors) &#123;</div><div class="line">        List&lt;Object[]&gt; batch = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</div><div class="line">        <span class="keyword">for</span> (Actor actor : actors) &#123;</div><div class="line">            Object[] values = <span class="keyword">new</span> Object[] &#123;</div><div class="line">                      actor.getFirstName(),</div><div class="line">                      actor.getLastName(),</div><div class="line">                      actor.getId() &#125;;</div><div class="line">            batch.add(values);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>[] updateCounts = jdbcTemplate.batchUpdate(</div><div class="line">                    <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</div><div class="line">                    batch);</div><div class="line">        <span class="keyword">return</span> updateCounts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="多批次的批量操作"><a href="#多批次的批量操作" class="headerlink" title="多批次的批量操作"></a>多批次的批量操作</h3><p>batchUpdate 方法的参数除了 SQL 语句之外，还有一个包含参数的对象集合和每个批次所需更新的数量，以及 ParameterizedPreparedStatementSetter（用于设置预准备语句的参数值）。框架在所提供的值上循环，并将更新调用分成指定大小的批处理。     </p>
<p>如下是每批为 100 的批处理示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] batchUpdate(<span class="keyword">final</span> Collection&lt;Actor&gt; actors) &#123;</div><div class="line">        <span class="keyword">int</span>[][] updateCounts = jdbcTemplate.batchUpdate(</div><div class="line">                <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</div><div class="line">                actors,</div><div class="line">                <span class="number">100</span>,</div><div class="line">                <span class="keyword">new</span> ParameterizedPreparedStatementSetter&lt;Actor&gt;() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, Actor argument)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                        ps.setString(<span class="number">1</span>, argument.getFirstName());</div><div class="line">                        ps.setString(<span class="number">2</span>, argument.getLastName());</div><div class="line">                        ps.setLong(<span class="number">3</span>, argument.getId().longValue());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        <span class="keyword">return</span> updateCounts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ... additional methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此调用的批处理更新方法返回一个 int 二维数组，第一维数组的长度表示执行的批处理数，第二维数组的长度表示该批处理中的更新数。每个批次中的更新数量应该为所有批次提供的批量大小，但最后一个批次可能会减少，具体取决于提供的更新对象总数。每个更新语句的更新计数由 JDBC 驱动程序报告，如果计数不可用，则 JDBC 驱动程序返回 -2。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring JDBC 是 Spring 所提供的持久层技术，它主要目的是降低使用 JDBC API 的门槛，以一种更直接、更简洁的方式使用 JDBC API。在 Spring JDBC 里，只需要完成定义连接数据库的参数、指定 SQL 语句、声明参数及参数值这些必要的事，而将资源获取、Statement 创建、资源释放以及异常处理等繁杂而乏味的工作交给 Spring JDBC。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十二）—— 事务管理之不同方式的使用</title>
    <link href="http://yoursite.com/2016/11/23/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B9%8B%E4%B8%8D%E5%90%8C%E6%96%B9%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/11/23/Spring笔记（十二）—— 事务管理之不同方式的使用/</id>
    <published>2016-11-23T11:25:54.000Z</published>
    <updated>2016-11-23T17:36:35.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程式的事务管理"><a href="#编程式的事务管理" class="headerlink" title="编程式的事务管理"></a>编程式的事务管理</h2><p>Spring 提供了两个模板类 TransactionTemplate 和 PlatformTransactionManager 来支持编程式事务管理，与其他的持久化模板一样，都是线程安全的。一般使用前者，后者类似与 JTA UserTransaction API。<br><a id="more"></a></p>
<h3 id="使用-TransactionTemplate"><a href="#使用-TransactionTemplate" class="headerlink" title="使用 TransactionTemplate"></a>使用 TransactionTemplate</h3><p>编写一个 TransactionCallback 实现类（通常为匿名内部类），该实现包含需要在事务上下文中执行的代码。然后，将自定义 TransactionCallback 的实例传递给 TransactionTemplate 的 execute() 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="comment">// single TransactionTemplate shared amongst all methods in this instance</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</div><div class="line"></div><div class="line">    <span class="comment">// use constructor-injection to supply the PlatformTransactionManager</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleService</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</div><div class="line">        Assert.notNull(transactionManager, <span class="string">"The 'transactionManager' argument must not be null."</span>);</div><div class="line">        <span class="keyword">this</span>.transactionTemplate = <span class="keyword">new</span> TransactionTemplate(transactionManager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">someServiceMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback() &#123;</div><div class="line">            <span class="comment">// the code in this method executes in a transactional context</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</div><div class="line">                updateOperation1();</div><div class="line">                <span class="keyword">return</span> resultOfUpdateOperation2();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果执行事务回调的时候没有返回值，则使用 TransactionCallbackWithoutResult 代替 TransactionCallback，且可以调用 TransactionStatus 对象的 setRollbackOnly() 方法回滚事务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            updateOperation1();</div><div class="line">            updateOperation2();</div><div class="line">        &#125; <span class="keyword">catch</span> (SomeBusinessExeption ex) &#123;</div><div class="line">            status.setRollbackOnly();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>TransactionTemplate 的事务设置可以通过编程方式或配置文件指定，如传播方式，隔离级别，超时等，TransactionTemplate 实例默认情况下具有默认事务设置。      </p>
<ul>
<li><p>编程方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleService</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</div><div class="line">        Assert.notNull(transactionManager, <span class="string">"The 'transactionManager' argument must not be null."</span>);</div><div class="line">        <span class="keyword">this</span>.transactionTemplate = <span class="keyword">new</span> TransactionTemplate(transactionManager);</div><div class="line">        <span class="comment">// the transaction settings can be set here explicitly if so desired</span></div><div class="line">        <span class="keyword">this</span>.transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</div><div class="line">        <span class="keyword">this</span>.transactionTemplate.setTimeout(<span class="number">30</span>); <span class="comment">// 30 seconds</span></div><div class="line">        <span class="comment">// and so forth...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件方式：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sharedTransactionTemplate"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"isolationLevelName"</span> <span class="attr">value</span>=<span class="string">"ISOLATION_READ_UNCOMMITTED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>"</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用-PlatformTransactionManager"><a href="#使用-PlatformTransactionManager" class="headerlink" title="使用 PlatformTransactionManager"></a>使用 PlatformTransactionManager</h3><p>使用 PlatformTransactionManager 直接管理事务，使用 TransactionDefinition 和 TransactionStatus 对象启动，回滚和提交事务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">DefaultTransactionDefinition def = <span class="keyword">new</span> DefaultTransactionDefinition();</div><div class="line"><span class="comment">// explicitly setting the transaction name is something that can only be done programmatically</span></div><div class="line">def.setName(<span class="string">"SomeTxName"</span>);</div><div class="line">def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</div><div class="line"></div><div class="line">TransactionStatus status = txManager.getTransaction(def);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// execute your business logic here</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (MyException ex) &#123;</div><div class="line">    txManager.rollback(status);</div><div class="line">    <span class="keyword">throw</span> ex;</div><div class="line">&#125;</div><div class="line">txManager.commit(status);</div></pre></td></tr></table></figure></p>
<h2 id="使用-XML-配置声明式事务管理"><a href="#使用-XML-配置声明式事务管理" class="headerlink" title="使用 XML 配置声明式事务管理"></a>使用 XML 配置声明式事务管理</h2><p>使用声明式事务管理的方式，对代码的侵入性最小，可以让事务管理代码完全从业务代码中移除，非常符合非侵入式轻量级容器的概念。Spring 的声明式事务管理是通过 Spring AOP 实现的，通过事务的声明性信息，Spring 负责将事务管理增强逻辑动态织入到业务方法相应的连接中。这些逻辑包括获取线程绑定资源、开始事务、提交/回滚事务、进行异常转换和处理等工作。<br>Spring 提供了和 EJB CMT 相似的声明式事务管理，这不但体现在两者的最终执行效果上，还体现在两个声明事务的语法上，即便如此，两者仍存在明显的不同：</p>
<table>
<thead>
<tr>
<th>比较项</th>
<th>EJB CMT</th>
<th>Spring</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否绑定 JTA</td>
<td>绑定在 JTA 上，即便是单数据源，所以 EJB 不能脱离容器运行</td>
<td>可以在任何环境下使用，包括直接在 Spring 中声明的数据源或应用服务器 JNDI 中的 JTA 数据源</td>
</tr>
<tr>
<td>持久化技术支持</td>
<td>采用非开发放的 EJB 自制持久化技术</td>
<td>通过少量配置即可和 JDBC、JDO、Hibernate 等持久化技术一起工作</td>
</tr>
<tr>
<td>目标类要求</td>
<td>必须是实现特定接口的特殊类</td>
<td>可以是任何 POJO，不过在内部必须使用资源获取工具类操作数据连接或会话，如果 DAO 使用模板类进行构建，这种要求将自动得到满足</td>
</tr>
<tr>
<td>回滚规则</td>
<td>没有</td>
<td>提供声明式的回滚规则</td>
</tr>
<tr>
<td>开放性控制</td>
<td>使用 EJB CMT，除了使用 setRollbackOnly()，没有办法影响容器的事务管理</td>
<td>Spring 允许用户通过 AOP 定制事务行为。如：用户可以在事务回滚中插入定制的行为，也可以增加任意的增强，就和任何 AOP 的增强一样</td>
</tr>
<tr>
<td>分布式事务</td>
<td>支持分布式事务，一般应用并不需要使用这样的功能</td>
<td>Spring 不直接支持高端应用服务器所提供的跨越远程调用的事务上下文传播。此时可以通过 Spring 的 Java EE 服务集成来提供。此外，如果在 Spring 中集成 JOTM 后，Spring 也可以提供 JTA 事务的功能</td>
</tr>
</tbody>
</table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>FooService 是业务层的接口(需要实施事务增强的服务接口)，通过 Spring 的声明事务可以让这个接口的方法拥有是适合的事务功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 需要实施事务增强的服务接口</span></div><div class="line"><span class="keyword">package</span> x.y.service;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FooService</span> </span>&#123;</div><div class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName)</span></span>;</div><div class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 上述接口实现</span></div><div class="line"><span class="keyword">package</span> x.y.service;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFooService</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">(String fooName)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设 FooService 接口的前两个方法 getFoo(String) 和 getFoo(String，String) 必须在具有只读语义的事务上下文中执行，而其他方法 insertFoo(Foo) 和 updateFoo(Foo) 必须在具有读写语义的事务上下文中执行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 文件'context.xml' --&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/tx</div><div class="line">        http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置事务用的 Service 对象 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 事务增强 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 事务属性定义 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 所有以'get'开头的方法都是只读的 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用强大的切点表达式语言定义目标方法 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 通过 aop 定义事务增强切面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"fooServiceOperation"</span> <span class="attr">expression</span>=<span class="string">"execution(* x.y.service.FooService.*(..))"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用事务增强 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"fooServiceOperation"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- don't forget the DataSource --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@rj-t42:1521:elvis"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"scott"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"tiger"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>根据上述配置，我们需要一个 Service 对象，fooService bean，事务。要应用的事务语义封装在 <tx:advice> 定义中，<code>&lt;tx:advice /&gt;</code> 中表示所有以’get’开头的方法都是只读的，所有其他方法都将使用默认事务语义。<code>&lt;tx:advice /&gt;</code> 标签的 transaction-manager 属性为事务管理器 PlatformTransactionManager bean 的名称（在本例中为 txManager bean），如果事务管理器命名为 transactionManager，则可以不指定 transaction-manager 属性。<br><code>&lt;aop:config /&gt;</code> 确保 由 txAdvice bean 定义的事务增强 能在程序中的适当位置执行。首先定义一个切点，该切点匹配 FooService 接口（fooServiceOperation）中定义的所有方法。然后使用 advisor 将切点与 txAdvice 关联，在执行 fooServiceOperation 时，将运行由 txAdvice 定义的增强。<br>上述配置将用于围绕从 fooService bean 定义创建的对象创建事务代理。使用事务增强配置代理，以便在代理上调用适当的方法时，根据与该方法关联的事务配置，将事务启动，挂起，标记为只读。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Boot</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"context.xml"</span>, Boot.class);</div><div class="line">        FooService fooService = (FooService) ctx.getBean(<span class="string">"fooService"</span>);</div><div class="line">        fooService.insertFoo (<span class="keyword">new</span> Foo());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></tx:advice></p>
<h3 id="回滚-XML-配置声明式事务"><a href="#回滚-XML-配置声明式事务" class="headerlink" title="回滚 XML 配置声明式事务"></a>回滚 XML 配置声明式事务</h3><p>在 Spring 框架中，事务回滚的推荐方法为：从当前在事务上下文中执行的代码中抛出异常。Spring 框架的事务基础结构代码将捕获任何未处理的异常，并确定是否将事务标记为回滚。在其默认配置中，Spring框架的事务基础结构代码只在发生 RuntimeException 和 unchecked 异常的情况下标记用于回滚的事务（即当抛出的异常是 RuntimeException 的实例或子类时）；从事务方法抛出的 checked 异常不会导致在默认配置中回滚。<br>我们可以自己配置通过哪些异常类型标记事务以进行回滚（包括检查异常），以下为 XML 配置的代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">rollback-for</span>=<span class="string">"NoProductInStockException"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>也可以指定不进行事务回滚的异常，这样当应用程序抛出该异常时，不进行事务回滚：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"updateStock"</span> <span class="attr">no-rollback-for</span>=<span class="string">"InstrumentNotFoundException"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如下 XML 配置表示除了 InstrumentNotFoundException 之外，其余的异常都进行回滚：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">rollback-for</span>=<span class="string">"Throwable"</span> <span class="attr">no-rollback-for</span>=<span class="string">"InstrumentNotFoundException"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="tx-advice-标签的属性"><a href="#tx-advice-标签的属性" class="headerlink" title="tx:advice 标签的属性"></a>tx:advice 标签的属性</h3><p>事务的设置可以使用 <code>&lt;tx:advice/&gt;</code> 标签指定，其默认的 <code>&lt;tx:advice/&gt;</code> 设置为：</p>
<ul>
<li>传播行为：REQUIRED；</li>
<li>隔离级别：DEFAULT；</li>
<li>读写事务属性：读/写事务；</li>
<li>超时时间：默认为基础事务系统的默认超时，如果不支持超时，则为无；</li>
<li>回滚设置：任意 RuntimeException 会触发回滚，而 checked Exception 不会。</li>
</ul>
<p><code>&lt;tx:method/&gt;</code> 的设置：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>是否必须</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>是</td>
<td>与事务关联的方法名，可使用通配符<code>*</code></td>
<td>如 <code>get</code>、<code>handle</code>等</td>
</tr>
<tr>
<td>propagation</td>
<td>否</td>
<td>REQUIRED</td>
<td>事务传播行为，可选值：REQUIRED、SUPPORTS、MANDATORY、REQUIRES_NEW、NOT_SUPPORTED、NEVER、NESTED</td>
</tr>
<tr>
<td>isolation</td>
<td>否</td>
<td>DEFAULT</td>
<td>事务隔离级别，可选值：DEFAULT、READ_UNCOMMITTED、READ_COMMITTED、REPEATABLE_READ、SERIALIZABLE</td>
</tr>
<tr>
<td>timeout</td>
<td>否</td>
<td>-1</td>
<td>事务超时的时间（以秒为单位），如果设置为 -1，事务超时的时间由底层的事务系统决定</td>
</tr>
<tr>
<td>read-only</td>
<td>否</td>
<td>false</td>
<td>事务是否只读</td>
</tr>
<tr>
<td>rollback-for</td>
<td>否</td>
<td>所有 RuntimeException</td>
<td>触发事务回滚的 Exception，用异常名称的片断进行匹配，可以设置多个，以逗号分开</td>
</tr>
<tr>
<td>no-rollback-for</td>
<td>否</td>
<td>所有 checked Exception</td>
<td>不触发事务回滚的 Exception，用异常名称的片断进行匹配，可以设置多个，以逗号分开</td>
</tr>
</tbody>
</table>
<h2 id="使用注解配置声明式事务管理"><a href="#使用注解配置声明式事务管理" class="headerlink" title="使用注解配置声明式事务管理"></a>使用注解配置声明式事务管理</h2><p>除了基于 XML 的事务配置之外，Spring 还提供了基于注解的事务配置，即通过 @Transactional 对需要事务增强的 Bean 接口、实现类或方法进行标注，在容器中配置基于注解的事务增强驱动，即可启动基于注解的声明式事务。</p>
<h3 id="使用-Transactional-注解"><a href="#使用-Transactional-注解" class="headerlink" title="使用 @Transactional 注解"></a>使用 @Transactional 注解</h3><p>使用 @Transactional 注解的将要实现事务增强的实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// the service class that we want to make transactional</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFooService</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</div><div class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName)</span></span>;</div><div class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当上述的 POJO 在 Spring IOC 容器中定义为 Bean 时，可以通过仅添加一行 XML 配置来为 Bean 实例实现事务增强：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- from the file 'context.xml' --&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">        http://www.springframework.org/schema/beans</div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/tx</div><div class="line">        http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">        http://www.springframework.org/schema/aop</div><div class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 由于该 Bean 实现类标注了 @Transactional，所以将会被 tx:annotation-driven 标签的注解驱动自动织入事务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 对标注 @Transactional 注解的 Bean 进行加工处理，以织入事务管理切面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- a PlatformTransactionManager is still required --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- (this dependency is defined somewhere else) --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>默认情况下，<code>&lt;tx:annotation-driven&gt;</code> 会自动使用名称为 transactionManager 的事务管理器，所以如果事务管理器的 id 为 transactionManager 时，可以简化为 <code>&lt;tx:annotation-driven/&gt;</code>。<br><code>&lt;tx:annotation-driven/&gt;</code> 有四个属性：</p>
<ul>
<li>transaction-manager：其 Annotation 属性为 TransactionManagementConfigurer，默认值为 transactionManager。</li>
<li>mode：其 Annotation 属性为 mode，默认值为 proxy，默认模式 proxy 使用 Spring 的 AOP 框架处理要被代理的带注释的 bean。替代模式 aspectj 改为用 Spring 的 AspectJ 事务切面编织受影响的类，修改目标类字节码以用于任意方法的调用。AspectJ 编织需要在类路径中使用 spring-aspects.jar 以及启用加载时编织（或编译时编织）。</li>
<li>proxy-target-class：其 Annotation 属性为 proxyTargetClass，默认值为 false。如果为 true，Spring 将通过子类来代理业务类；为 false，则使用基于接口的代理，需要在类路径中添加 CGLib.jar 类库。</li>
<li>order：其 Annotation 属性为 order，其默认值为 Ordered.LOWEST_PRECEDENCE。如果业务类除事务切面外，还需要织入其他的切面，通过该属性可以控制事务切面在目标连接点的织入顺序。</li>
</ul>
<h3 id="Transactional-的属性"><a href="#Transactional-的属性" class="headerlink" title="@Transactional 的属性"></a>@Transactional 的属性</h3><p>@Transactional 的默认属性：</p>
<ul>
<li>传播行为：PROPAGATION_REQUIRED；</li>
<li>隔离级别：ISOLATION_DEFAULT；</li>
<li>读写事务属性：读/写事务；</li>
<li>超时时间：默认为基础事务系统的默认超时，如果不支持超时，则为无；</li>
<li>回滚设置：任意 RuntimeException 会触发回滚，而 checked Exception 不会。</li>
</ul>
<p>@Transactional 属性说明：</p>
<ul>
<li>value：String 类型，指定要使用的事务管理器的可选限定符。</li>
<li>propagation：事务传播行为，通过枚举类（org.springframework.transaction.annotation.Propagation）提供合法值；如：@Transactional(propagation=Propagation.REQUIRES_NEW)。</li>
<li>isolation：事务隔离级别，通过枚举类（org.springframework.transaction.annotation.Isolation）提供合法值；如：@Transactional(isolation=Isolation.READ_COMMITTED)。</li>
<li>readOnly：事务读写性，boolean 型；如：@Transactional(readOnly=true)。</li>
<li>timeout：超时时间，int 型，以秒为单位；如：@Transactional(timeout=0)。</li>
<li>rollbackFor：一组异常类，遇到时进行回滚，类型为 Class&lt;? extends Throwable&gt;[]，默认为{}；如：@Transactional(rollbackFor={SQLException.class})，多个异常之间可用逗号分隔。</li>
<li>rollbackForClassName：一组异常类，遇到时进行回滚，类型为 String[]，默认为{}；如：@Transactional(rollbackForClassName={“Exception”})。</li>
<li>noRollbackFor：一组异常类，遇到时不回滚，类型为 Class&lt;? extends Throwable&gt;[]，默认为{}。</li>
<li>noRollbackForClassName：一组异常类，遇到时不回滚，类型为 String[]，默认为{}。</li>
</ul>
<h3 id="Transactional-使用不同的事务管理器"><a href="#Transactional-使用不同的事务管理器" class="headerlink" title="@Transactional 使用不同的事务管理器"></a>@Transactional 使用不同的事务管理器</h3><p>大多数情况下，一个应用仅需一个事务管理器，如果希望在不同的地方使用不同的事务管理器，可如下实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalService</span> </span>&#123;</div><div class="line">    <span class="comment">// 使用名为 order 的事务管理器</span></div><div class="line">    <span class="meta">@Transactional</span>(<span class="string">"order"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomething</span><span class="params">(String name)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 使用名为 account 的事务管理器</span></div><div class="line">    <span class="meta">@Transactional</span>(<span class="string">"account"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>order 和 account 事务管理器在 XML 中的定义：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"order"</span>/&gt;</span><span class="comment">&lt;!-- 为事务管理器标识一个名字 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"account"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在一两处使用带标识的 @Transactional 也许挺合适，但是如果到处都使用，则显得繁琐。可以自定义一个绑定到特定事务管理器的注解，然后直接使用这个自定义的注解进行标识：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Transactional</span>(<span class="string">"order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OrderTx &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Transactional</span>(<span class="string">"account"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccountTx &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按相似的方法，还可以定义一个绑定到 order 事务管理器的 @OrderTx，完成定义后，就可以用以下方式对原来的代码进行调整了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalService</span> </span>&#123;</div><div class="line">    <span class="meta">@OrderTx</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomething</span><span class="params">(String name)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="meta">@AccountTx</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编程式的事务管理&quot;&gt;&lt;a href=&quot;#编程式的事务管理&quot; class=&quot;headerlink&quot; title=&quot;编程式的事务管理&quot;&gt;&lt;/a&gt;编程式的事务管理&lt;/h2&gt;&lt;p&gt;Spring 提供了两个模板类 TransactionTemplate 和 PlatformTransactionManager 来支持编程式事务管理，与其他的持久化模板一样，都是线程安全的。一般使用前者，后者类似与 JTA UserTransaction API。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十一）—— 事务管理之 ThreaLocal</title>
    <link href="http://yoursite.com/2016/11/22/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B9%8B%20ThreaLocal/"/>
    <id>http://yoursite.com/2016/11/22/Spring笔记（十一）—— 事务管理之 ThreaLocal/</id>
    <published>2016-11-22T14:55:01.000Z</published>
    <updated>2016-11-23T17:27:40.477Z</updated>
    
    <content type="html"><![CDATA[<p>按照传统的经验，如果某个对象是非线程安全的，在多线程环境下，对对象的访问必须采用 synchronized 进行线程同步，但线程同步机制会降低并发性，影响系统性能。ThreaLocal 可以改变这种方式。</p>
<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><a id="more"></a>
<p>JDK 1.2 版本开始提供 java.lang.ThreaLocal，ThreaLocal 为解决多线程程序的并发问题提供了新的思路。ThreaLocal 是线程的一个本地化对象，当工作于多线程中的对象使用 ThreadLocal 维护变量时，它会为每个使用该变量的线程分配一个独立的变量副本。所有每个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本；从线程的角度看，这个变量就像是线程的本地变量。</p>
<h2 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h2><p>ThreadLocal 支持泛型，且有四个简单的接口：</p>
<ul>
<li>void set(T value)：设置当前线程的线程局部变量的值。</li>
<li>public T get()：该方法返回当前线程所对应的线程局部变量。</li>
<li>public void remove()：将当前线程局部变量的值删除，目的是为了减少内存的占用（JDK 5.0 新增）。当线程结束后，对应该线程的局部变量将会自动被垃圾回收，所以显示调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。</li>
<li>protected T initialValue()：返回该线程局部变量的初始值，该方法是一个 protected 方法，为了让子类覆盖而设计。</li>
</ul>
<p>ThreadLocal 的实现思路：在 ThreadLocal 内部有一个 Map，用于存储每一个线程的变量副本，Map 中的元素的 key 为线程对象，value 为对应线程的变量副本。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceNumber</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> SequenceNumber sn;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestClient</span><span class="params">(SequenceNumber sn)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sn = sn;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">                System.out.println(<span class="string">"Thread["</span> + Thread.currentThread().getName()</div><div class="line">                + <span class="string">"] sn["</span> + sn.getNextNum() + <span class="string">"]"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; seqNum = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextNum</span><span class="params">()</span> </span>&#123;</div><div class="line">        seqNum.set(seqNum.get() + <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> seqNum.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SequenceNumber sn = <span class="keyword">new</span> SequenceNumber();</div><div class="line">        TestClient t1 = <span class="keyword">new</span> TestClient(sn);</div><div class="line">        TestClient t2 = <span class="keyword">new</span> TestClient(sn);</div><div class="line">        TestClient t3 = <span class="keyword">new</span> TestClient(sn);</div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">        t3.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thread[Thread-2] sn[1]</div><div class="line">Thread[Thread-0] sn[1]</div><div class="line">Thread[Thread-1] sn[1]</div><div class="line">Thread[Thread-2] sn[2]</div><div class="line">Thread[Thread-0] sn[2]</div><div class="line">Thread[Thread-1] sn[2]</div><div class="line">Thread[Thread-2] sn[3]</div><div class="line">Thread[Thread-0] sn[3]</div><div class="line">Thread[Thread-1] sn[3]</div></pre></td></tr></table></figure></p>
<p>从输出结果上看，由于 ThreadLocal 为每一个线程提供了单独的副本，所以每个线程所产生的序号虽然都共享同一个 SequenceNumber 实例，但它们没有发生相互干扰的情况，而是各自产生独立的序列号。</p>
<h2 id="与线程同步机制的比较"><a href="#与线程同步机制的比较" class="headerlink" title="与线程同步机制的比较"></a>与线程同步机制的比较</h2><p>在线程同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量。这时该变量是多个线程共享的，使用同步机制要求程序解决什么时候对变量进行读写，什么时候需要锁定某个对象，什么时候释放对象锁等复杂的问题。<br>ThreadLocal 从另一个角度解决多线程的并发访问，为每个线程提供独立的变量副本，从而隔离了多个线程对访问数据的冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对变量进行同步。ThreadLocal 提供了线程安全的对象封装，在编写多线程代码时，可以把部安全的变量封装进 ThreadLocal。<br>总的来说，同步机制采用“以时间换空间”的方式：访问串行化，对象共享化；而 ThreadLocal 采用“以空间换时间”的方式：访问并行化，对象独享化。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照传统的经验，如果某个对象是非线程安全的，在多线程环境下，对对象的访问必须采用 synchronized 进行线程同步，但线程同步机制会降低并发性，影响系统性能。ThreaLocal 可以改变这种方式。&lt;/p&gt;
&lt;h2 id=&quot;认识&quot;&gt;&lt;a href=&quot;#认识&quot; class=&quot;headerlink&quot; title=&quot;认识&quot;&gt;&lt;/a&gt;认识&lt;/h2&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（十）—— 事务管理之数据库事务基础知识</title>
    <link href="http://yoursite.com/2016/11/22/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E2%80%94%E2%80%94%20%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2016/11/22/Spring笔记（十）—— 事务管理之数据库事务基础知识/</id>
    <published>2016-11-22T13:50:32.000Z</published>
    <updated>2016-11-23T08:52:50.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据库事务(Database Transaction)，是指作为单个逻辑工作单元执行的一系列操作（可理解为对数据库的简单操作，如：增删查改），要么完全地执行，要么完全地不执行。 事务处理可以确保除非事务性单元内的所有操作（将一组相关操作组合为一个单元）都成功完成，否则不会将数据库操作真正地写入数据库，如此简化错误恢复的实现，并使应用程序更加可靠。<br><a id="more"></a><br>数据库事务必须满足 4 大特性（简称 ACID）：</p>
<ul>
<li>原子性（Atomic）：表示包含多个数据库操作的事务只有所有操作都成功，整个事务才提交；若其中一个操作失败，则撤销所有操作，让数据库返回初始状态。</li>
<li>一致性（Consistency）：事务操作成功后，数据库整体状态与业务规则一致。如 A 转账 100 给 B，不论操作是否成功，A 和 B 的存款总额不变。</li>
<li>隔离性（Isolation）：并发操作中，不同事务拥有各自的数据空间，且彼此的操作不会相互干扰。</li>
<li>持久性（Durability）：一旦事务提交成功后，事务中所有的数据操作都必须被持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须能保证能够通过某种机制恢复数据。</li>
</ul>
<h2 id="数据并发"><a href="#数据并发" class="headerlink" title="数据并发"></a>数据并发</h2><p>多个客户端连接同一个数据库进行并发访问时，数据库中的同一个数据可能会被多个事务访问，这时需要采用适当的隔离措施，保护数据的完整性。</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>A 事务读取 B 事务尚未提交的更改数据，并在此基础上进行操作。当 B 进行事务回滚时，则 A 事务读取的数据不会被承认。<br>下图中黑点代表开始事务，白点表示提交事务。<br><img src="/posts_img/脏读.png" alt="脏读"></p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读指 A 事务读取数据后，B 事务执行更新操作，使 A 事务无法再现前一次读取结果。<br><img src="/posts_img/不可重复读.png" alt="不可重复读"></p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>A 事务读取 B 事务提交的新增数据。幻读和不可重复读不一样，前者是指读到了其他已经提交事务的新增数据，后者指读到了已经提交事务的更改数据；防止读取到更改数据，只需要对操作的数据添加行级锁，阻止操作中的数据发生变化，而防止读取到新增数据，往往需要添加表级锁（将整个表锁定，防止新增数据）。<br><img src="/posts_img/幻读.png" alt="幻读"></p>
<h3 id="第一类丢失修改"><a href="#第一类丢失修改" class="headerlink" title="第一类丢失修改"></a>第一类丢失修改</h3><p>A 事务撤销时，把已经提交的 B 事务的更新数据覆盖了。<br><img src="/posts_img/第一类丢失修改.png" alt="第一类丢失修改"></p>
<h3 id="第二类丢失修改"><a href="#第二类丢失修改" class="headerlink" title="第二类丢失修改"></a>第二类丢失修改</h3><p>A 事务覆盖 B 事务已经提交的数据，造成 B 事务所做操作丢失。<br><img src="/posts_img/第二类丢失修改.png" alt="第二类丢失修改"></p>
<h2 id="数据库锁机制"><a href="#数据库锁机制" class="headerlink" title="数据库锁机制"></a>数据库锁机制</h2><p>按锁定的对象的不同，一般可以分为表锁定和行锁定，前者对整个表进行锁定，而后者对表中特定行进行锁定。从并发事务锁定的关系上看，可以分为共享锁定和独占锁定。共享锁定会防止独占锁定，但允许其他的共享锁定；而独占锁定既防止其他的独占锁定，也防止其他的共享锁定。</p>
<h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><p>数据库为用户提供了锁的 DML 操作方式，但直接使用锁管理比较麻烦，因此数据库为用户提供可自动锁机制。只要用户指定回话的事务隔离级别，数据库就会分析事务中的 SQL 语句，然后自动为事务操作的数据资源添加适当的锁。<br>ANISI/ISO SQL 92 标准定义了 4 个等级的事务隔离级别，在相同的数据环境下，使用相同的输入，执行相同的工作，根据不同的隔离级别，可以导致不同的结果。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
<th>第一类丢失修改</th>
<th>第二类丢失修改</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>允许</td>
<td>允许</td>
<td>允许</td>
<td>不允许</td>
<td>允许</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>不允许</td>
<td>允许</td>
<td>允许</td>
<td>不允许</td>
<td>允许</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>不允许</td>
<td>不允许</td>
<td>允许</td>
<td>不允许</td>
<td>不允许</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
<td>不允许</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;数据库事务(Database Transaction)，是指作为单个逻辑工作单元执行的一系列操作（可理解为对数据库的简单操作，如：增删查改），要么完全地执行，要么完全地不执行。 事务处理可以确保除非事务性单元内的所有操作（将一组相关操作组合为一个单元）都成功完成，否则不会将数据库操作真正地写入数据库，如此简化错误恢复的实现，并使应用程序更加可靠。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（九）—— AOP 之资源访问接口 Resource</title>
    <link href="http://yoursite.com/2016/11/21/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E2%80%94%E2%80%94%20AOP%20%E4%B9%8B%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%20Resource/"/>
    <id>http://yoursite.com/2016/11/21/Spring笔记（九）—— AOP 之资源访问接口 Resource/</id>
    <published>2016-11-21T13:00:22.000Z</published>
    <updated>2016-11-23T17:27:59.453Z</updated>
    
    <content type="html"><![CDATA[<p>JDK 提供的访问资源的类（java.net.URL 和 File）不能满足各种底层资源的访问需求，比如缺少从类路径或 Web 容器的上下文中获取资源的操作类。因此，Spring 设计了一个 Resource 接口，为应用提供了更强的访问底层资源的能力。<br><a id="more"></a></p>
<h2 id="资源接口-Resource"><a href="#资源接口-Resource" class="headerlink" title="资源接口 Resource"></a>资源接口 Resource</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</div><div class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Resource 接口的主要方法：</p>
<ul>
<li>getInputStream()：返回资源对应的输入流。</li>
<li>exists()：资源是否存在。</li>
<li>isOpen()：资源是否打开。</li>
<li>getDescription()：返回对资源的描述。</li>
<li>getURL()：如果底层资源可以表示成URL，则返回对应的 URL 对象。</li>
<li>getFile()：如果底层资源对应一个文件，则返回对应的 File 对象。</li>
</ul>
<h2 id="Resource-的具体实现类"><a href="#Resource-的具体实现类" class="headerlink" title="Resource 的具体实现类"></a>Resource 的具体实现类</h2><ul>
<li>UrlResource：Url 封装了 java.net.URL，它使用户能够访问任何可以通过 URL 表示的资源，如文件系统的资源、HTTP 资源、FTP 资源等。</li>
<li>ClassPathResource：类路径下的资源，资源以相对于类路径的方式表示。</li>
<li>FileSystemResource：文件系统资源，资源以文件系统路径的方式表示。</li>
<li>ServletContextResource：为访问 Web 容器上下文中的资源而设计的类，负责以相对于 Web 应用根目录的路径加载资源，它支持以流和 URL 的方式访问，在 WAR 解包的情况下，也可以通过 File 的方式访问，该类还可以直接从 JAR 包中访问资源。</li>
<li>InputStreamResource：以输入流返回表示的资源。</li>
<li>ByteArrayResource：二进制数组表示的资源，二进制数组资源可以在内存中通过程序构造。</li>
</ul>
<p>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String filePath = <span class="string">"D:/config/file.txt"</span>;</div><div class="line">            <span class="comment">// 使用系统文件路径方式加载文件</span></div><div class="line">            Resource res1 = <span class="keyword">new</span> FileSystemResource(filePath);</div><div class="line">            <span class="comment">// 使用类路径方式加载文件</span></div><div class="line">            Resource res1 = <span class="keyword">new</span> ClassPathResource(<span class="string">"conf/file.txt"</span>);</div><div class="line">            InputStream ins1 = res1.getInputStream();</div><div class="line">            InputStream ins2 = res2.getInputStream();</div><div class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="资源地址表达式"><a href="#资源地址表达式" class="headerlink" title="资源地址表达式"></a>资源地址表达式</h2><p>Spring 提供了强大的加载资源的机制，不但能够通过 <code>classpath:</code>、<code>file:</code> 等资源地址前缀识别不同的资源类型，还支持 Ant 风格带通配符的资源地址。</p>
<table>
<thead>
<tr>
<th>地址前缀</th>
<th>示例</th>
<th>对应资源类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>classpath:</td>
<td>classpath:com/myapp/config.xml</td>
<td>从类路径中加载资源，资源文件可以在标准的文件系统中，也可以在 jar 或 zip 的类包中</td>
</tr>
<tr>
<td>file:</td>
<td>file://data/config.xml</td>
<td>使用 UrlResource 从文件系统目录中装载资源，可采用绝对或相对路径</td>
</tr>
<tr>
<td>http://</td>
<td><a href="http://myserver/logo.png" target="_blank" rel="external">http://myserver/logo.png</a></td>
<td>使用 UrlResource 从 Web 服务器中装载资源</td>
</tr>
<tr>
<td>ftp://</td>
<td>ftp://myserver/my.txt</td>
<td>使用 UrlResource 从 FTP 服务器中装载资源</td>
</tr>
<tr>
<td>没有前缀</td>
<td>/data/config.xml</td>
<td>根据 ApplicationContext 具体实现类采用对应的类型的 Resource</td>
</tr>
</tbody>
</table>
<p>Ant 风格资源地址支持 3 种匹配符：</p>
<ul>
<li><code>?</code>：匹配文件名中的一个字符</li>
<li><code>*</code>：匹配文件名中任意个字符</li>
<li><code>**</code>：匹配多层路径</li>
</ul>
<p>示例：</p>
<ul>
<li><code>classpath:com/t?st.xml</code>：匹配 com 类路径下 com/test.xml，com/tast.xml 或者 com/tdst.xml</li>
<li><code>file:D:/conf/*.xml</code>：匹配文件系统 D:/conf 目录下所有以 xml 为后缀的文件</li>
<li><code>classpath:com/**/test.xml</code>：匹配 com 类路径下（当前目录及其子孙目录）的 test.xml 文件</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDK 提供的访问资源的类（java.net.URL 和 File）不能满足各种底层资源的访问需求，比如缺少从类路径或 Web 容器的上下文中获取资源的操作类。因此，Spring 设计了一个 Resource 接口，为应用提供了更强的访问底层资源的能力。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（八）—— AOP 之基于 Schema 配置</title>
    <link href="http://yoursite.com/2016/11/20/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E2%80%94%E2%80%94%20AOP%20%E4%B9%8B%E5%9F%BA%E4%BA%8E%20Schema%20%E7%9A%84%20AOP%20%E6%94%AF%E6%8C%81/"/>
    <id>http://yoursite.com/2016/11/20/Spring笔记（八）—— AOP 之基于 Schema 的 AOP 支持/</id>
    <published>2016-11-20T13:37:34.000Z</published>
    <updated>2016-11-23T17:28:08.797Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 提供了使用新的 aop 命名标签定义切面的支持，使得我们可以使用 Schema 配置切面。基于 @AspectJ 注解的切面，本质上是将切点、增强类型的信息使用注解进行描述；而在基于 Schema 的实现方式中，把这两个信息移到 Schema 的 XML 配置文件中。虽然配置方式不同，但两者表达的信息完全相同。使用基于 Schema 的切面定义后，切点、增强类型的注解信息从切面类中剥离出来，原本的切面类变成了真正意义上的 POJO。在 Spring 配置中，所有的 aspect、pointcut 和 advisor 元素都需要放置在 <code>&lt;aop:config&gt;</code> 元素之下。<br><a id="more"></a>  </p>
<h2 id="声明切面（aspect）"><a href="#声明切面（aspect）" class="headerlink" title="声明切面（aspect）"></a>声明切面（aspect）</h2><p>使用 Schema 支持时，一个切面只是一个 POJO 类，它在 Spring 应用程序上下文中定义为一个 Bean。状态和行为由对象的字段和方法提供，切点和增强由 XML 配置文件提供。<br>切面的声明使用 <code>&lt;aop:aspect&gt;</code> 元素，而 bean 使用 ref 属性注入。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aBean"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="声明切点（pointcut）"><a href="#声明切点（pointcut）" class="headerlink" title="声明切点（pointcut）"></a>声明切点（pointcut）</h2><p>使用切点表达式的方式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></div><div class="line">        <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service.*.*(..))"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>直接声明切点的方式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></div><div class="line">        <span class="attr">expression</span>=<span class="string">"com.xyz.myapp.SystemArchitecture.businessService()"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="声明增强（advice）"><a href="#声明增强（advice）" class="headerlink" title="声明增强（advice）"></a>声明增强（advice）</h2><p>和 @AspecJ 所支持的类型一致，sechema 也支持 5 种增强方式，且在使用方法上也大致相同。<br>参考 <a href="http://windows7lake.github.io/2016/11/19/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%20AOP%20%E4%B9%8B%20@AspectJ%20%E6%94%AF%E6%8C%81/" target="_blank" rel="external">Spring笔记（七）—— AOP 之 @AspectJ 支持</a></p>
<h3 id="Before-advice"><a href="#Before-advice" class="headerlink" title="Before advice"></a>Before advice</h3><p>在 <code>&lt;aop:aspect&gt;</code> 元素下使用 <code>&lt;aop:before&gt;</code> 子元素声明。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"beforeExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doAccessCheck"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面的 dataAccessOperation 是切点的 id，要直接定义切点，需要使用 pointcut 属性代替 pointcut-ref：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"beforeExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.xyz.myapp.dao.*.*(..))"</span></span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doAccessCheck"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="After-returning-advice"><a href="#After-returning-advice" class="headerlink" title="After returning advice"></a>After returning advice</h3><p>使用 returning 属性指定传递返回值的参数名：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"afterReturningExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span></span></div><div class="line">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></div><div class="line">        <span class="attr">returning</span>=<span class="string">"retVal"</span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doAccessCheck"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>doAccessCheck 方法必须声明一个名为 retVal 的参数，此参数的类型以与 @AfterReturning 中所述相同的方式约束匹配。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck</span><span class="params">(Object retVal)</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<h3 id="After-throwing-advice"><a href="#After-throwing-advice" class="headerlink" title="After throwing advice"></a>After throwing advice</h3><p>使用 throwing 属性指定应传递异常的参数的名称：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"afterThrowingExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></div><div class="line">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></div><div class="line">        <span class="attr">throwing</span>=<span class="string">"dataAccessEx"</span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doRecoveryActions"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>doRecoveryActions 方法必须声明一个名为 dataAccessEx 的参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRecoveryActions</span><span class="params">(DataAccessException dataAccessEx)</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<h3 id="After-finally-advice"><a href="#After-finally-advice" class="headerlink" title="After (finally) advice"></a>After (finally) advice</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"afterFinallyExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:after</span></span></div><div class="line">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doReleaseLock"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Around-advice"><a href="#Around-advice" class="headerlink" title="Around advice"></a>Around advice</h3><p>Around advice 通常于线程安全的方式下，在要执行的方法前后分享状态时使用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"aroundExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:around</span></span></div><div class="line">        <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span></div><div class="line">        <span class="attr">method</span>=<span class="string">"doBasicProfiling"</span>/&gt;</div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    <span class="comment">// start stopwatch</span></div><div class="line">    Object retVal = pjp.proceed();</div><div class="line">    <span class="comment">// stop stopwatch</span></div><div class="line">    <span class="keyword">return</span> retVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Introductions"><a href="#Introductions" class="headerlink" title="Introductions"></a>Introductions</h3><p>通过 <code>&lt;aop:declare-parents&gt;</code> 配置引介增强，引介增强和其它类型的增强不同，它没有 method、pointcut 和 pointcut-ref 属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"usageTrackerAspect"</span> <span class="attr">ref</span>=<span class="string">"usageTracking"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:declare-parents</span></span></div><div class="line">        <span class="attr">types-matching</span>=<span class="string">"com.xzy.myapp.service.*+"</span></div><div class="line">        <span class="attr">implement-interface</span>=<span class="string">"com.xyz.myapp.service.tracking.UsageTracked"</span></div><div class="line">        <span class="attr">default-impl</span>=<span class="string">"com.xyz.myapp.service.tracking.DefaultUsageTracked"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">aop:before</span></span></div><div class="line">        <span class="attr">pointcut</span>=<span class="string">"com.xyz.myapp.SystemArchitecture.businessService() and this(usageTracked)"</span></div><div class="line">        <span class="attr">method</span>=<span class="string">"recordUsage"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>&lt;aop:declare-parents&gt;</code> 通过 implement-interface 属性声明要实现的接口，通过 default-impl 属性指定默认的接口实现类，通过 types-matching 属性以 AspectJ 切点表达式语法指定哪些 Bean 需要引介 UsageTracked 接口的实现。注意：虽然 <code>&lt;aop:declare-parents&gt;</code> 没有 method 属性指定增强方法所在的 Bean，但 <code>&lt;aop:aspect id=&quot;usageTrackerAspect&quot; ref=&quot;usageTracking&quot;&gt;</code> 的 ref 属性依然要指定一个增强 Bean。</p>
<h2 id="Advisors"><a href="#Advisors" class="headerlink" title="Advisors"></a>Advisors</h2><p>Advisors 是 Spring 中切面概念的对应物，是切点和增强的复合体，不过仅包含一个切点和一个增强。在 AspectJ 中没有对应的等价物，在 aop Schema 配置样式中，可以通过 <code>&lt;aop:advisor&gt;</code> 配置一个 Advisor。通过 advice-ref 属性引用基于接口定义的增强，通过 pointcut 定义切点表达式，或通过 pointcut-ref 引用一个命名的切点。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></div><div class="line">        <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service.*.*(..))"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span></span></div><div class="line">        <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span></div><div class="line">        <span class="attr">advice-ref</span>=<span class="string">"tx-advice"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"tx-advice"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 提供了使用新的 aop 命名标签定义切面的支持，使得我们可以使用 Schema 配置切面。基于 @AspectJ 注解的切面，本质上是将切点、增强类型的信息使用注解进行描述；而在基于 Schema 的实现方式中，把这两个信息移到 Schema 的 XML 配置文件中。虽然配置方式不同，但两者表达的信息完全相同。使用基于 Schema 的切面定义后，切点、增强类型的注解信息从切面类中剥离出来，原本的切面类变成了真正意义上的 POJO。在 Spring 配置中，所有的 aspect、pointcut 和 advisor 元素都需要放置在 &lt;code&gt;&amp;lt;aop:config&amp;gt;&lt;/code&gt; 元素之下。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（七）—— AOP 之 @AspectJ 支持</title>
    <link href="http://yoursite.com/2016/11/19/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%20AOP%20%E4%B9%8B%20@AspectJ%20%E6%94%AF%E6%8C%81/"/>
    <id>http://yoursite.com/2016/11/19/Spring笔记（七）—— AOP 之 @AspectJ 支持/</id>
    <published>2016-11-19T13:57:54.000Z</published>
    <updated>2016-11-21T08:09:21.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启-AspectJ-支持"><a href="#开启-AspectJ-支持" class="headerlink" title="开启 @AspectJ 支持"></a>开启 @AspectJ 支持</h2><p>@AspectJ 指的是使用注解标注的常规 Java 类的样式声明切面，@AspectJ 样式是 AspectJ 项目引入的，作为 AspectJ 5 版本的一部分。Spring 使用由 AspectJ 提供的库 aspectjweaver.jar（要求版本至少为 1.6.8），就能像 AspectJ 5 那样解析注解。<br><a id="more"></a></p>
<h3 id="Java-配置方式"><a href="#Java-配置方式" class="headerlink" title="Java 配置方式"></a>Java 配置方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XML-配置方式"><a href="#XML-配置方式" class="headerlink" title="XML 配置方式"></a>XML 配置方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="声明切面（aspect）"><a href="#声明切面（aspect）" class="headerlink" title="声明切面（aspect）"></a>声明切面（aspect）</h2><p>当开启 @AspectJ 支持时，任何在应用程序上下文中使用类（包含 @AspectJ 注解）定义的 bean 都会被 Spring 侦测到，并用于配置 Spring AOP。<br>如下为应用程序上下文中的常规 bean 定义，指向具有 @AspectJ 注解的 bean 类：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"org.xyz.NotVeryUsefulAspect"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- configure properties of aspect here as normal --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还有具有 @AspectJ 注解的 NotVeryUsefulAspect 类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.xyz;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotVeryUsefulAspect</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="声明切点（pointcut）"><a href="#声明切点（pointcut）" class="headerlink" title="声明切点（pointcut）"></a>声明切点（pointcut）</h2><p>切点能够定位特定的连接点，从而使我们能够控制何时执行增强操作。切点声明有两部分：一个包含方法名和任意参数的签名，以及一个切入点表达式（它标明要执行的方法的位置）。在 AOP 的 @AspectJ 注解风格中，切点签名由一个常规方法定义，切点表达式使用 @Pointcut 注解表示（用作切点签名的方法必须具有 void 返回类型）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* transfer(..))"</span>)<span class="comment">// the pointcut expression</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">// the pointcut signature</span></div></pre></td></tr></table></figure></p>
<h3 id="切点表达式函数"><a href="#切点表达式函数" class="headerlink" title="切点表达式函数"></a>切点表达式函数</h3><p>Aspectj5 的切点表达式由关键字和操作参数组成，如 <code>execution(* transfer(..))</code>，<code>execution</code> 为关键字，<code>* transfer(..)</code> 为操作参数。在上面的例子中，<code>execution</code> 代表目标类执行某一方法，<code>* transfer(..)</code> 描述目标方法的匹配模式串，两个联合起来表示目标类 transfer() 方法的连接点。  </p>
<p>Spring 支持 9 个 @AspectJ 切点表达式函数，它们用不同的方式描述目标类的连接点，根据描述对象的不同，大致分为 4 个类型：</p>
<ul>
<li>方法切点函数：通过描述目标类方法信息定义连接点。<ul>
<li>execution(方法匹配模式串)：表示满足某一匹配模式的所有目标方法连接点。如 <code>execution(* transfer(..))</code> 表示所有目标类中的 transfer() 方法；<code>execution(public * *(..))</code> 表示所有目标类中的 public 方法。</li>
<li>@annotation(方法注解类名)：表示标注了特定注解的目标方法连接点。如 <code>@annotation(com.lake.NeedTest)</code> 表示任何标注了 @NeedTest 注解的目标类方法。</li>
</ul>
</li>
<li>方法入参切点函数：通过描述目标类方法入参的信息定义连接点。<ul>
<li>args(类名)：通过判别目标类方法运行时入参对象的类型定义指定连接点。如 <code>args(com.lake.Waiter)</code> 表示所有有且仅有一个按类型匹配于 Waiter 入参的方法。</li>
<li>@args(类型注解类名)：通过判别目标方法运行时入参对象的类是否标注特定注解来指定连接点。如 <code>@args(com.lake.Monitorable)</code> 表示任何这样的一个目标方法：它有一个入参且入参对象的类标注 @Monitorable 注解。</li>
</ul>
</li>
<li>目标类切点函数：通过描述目标类类型信息定义连接点。<ul>
<li>within(类名匹配串)：表示特定域下的所有连接点。如 <code>within(com.lake.service.*)</code> 表示 com.lake.service 包中的所有连接点，即包中所有类的所有方法，而 <code>within(com.lake.service.*Service)</code> 表示在 com.lake.service 包中所有以 Service 结尾的类的所有连接点。</li>
<li>target(类名)：假如目标类按类型匹配于指定类，则目标类的所有连接点匹配这个切点。如通过 <code>target(com.lake.Waiter)</code> 定义的切点、Waiter 以及 Waiter 实现类 NativeWaiter 中所有连接点都匹配该切点。</li>
<li>@within(类型注解类名)：假如目标类按类型匹配于某个类 A，且类 A 标注了特定注解，则目标类的所有连接点匹配这个切点。如 <code>@within(com.lake.Monitorable)</code> 定义的切点，假如 Waiter 类标注了 @Monitorable 注解，则 Waiter 以及Waiter 实现类 NativeWaiter 中所有连接点都匹配。</li>
<li>@target(类型注解类名)：目标类标注了特定注解，则目标类所有连接点匹配这个切点。如 <code>@target(com.lake.Monitorable)</code> 定义的切点，假如 NativeWaiter 类标注了 @Monitorable 注解，则 NativeWaiter 所有连接点都匹配切点。</li>
</ul>
</li>
<li>代理类切点函数：通过描述目标类的代理类的信息定义连接点。<ul>
<li>this(类名)：代理类按类型匹配于指定类，则被代理的目标类所有连接点匹配切点。</li>
</ul>
</li>
</ul>
<h3 id="函数入参通配符"><a href="#函数入参通配符" class="headerlink" title="函数入参通配符"></a>函数入参通配符</h3><p>@AspectJ 支持 3 种通配符：</p>
<ul>
<li><code>*</code> ：匹配任意字符，但它只能匹配上下文中的一个元素</li>
<li><code>..</code> ：匹配任意字符，可以匹配上下文中的多个元素，但在表示类时，必须和 <code>*</code> 联合使用，而在表示入参时则单独使用</li>
<li><code>+</code> ：表示按类型匹配指定类的所有类，必须跟在类名后面，如 <code>com.lake.Car+</code>。继承或扩展指定类的所有类，同时还包括指定类本身</li>
</ul>
<p>@AspectJ 函数按其是否支持通配符及支持的程度，分为 3 类：</p>
<ul>
<li>支持所有通配符：execution(), within()</li>
<li>仅支持 <code>+</code> 通配符：args(), this(), target()</li>
<li>不支持通配符：@args(), @within(), @target(), @annotation()</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>切点表达式由切点函数组成，切点函数之间还可以进行逻辑运算，组成复合切点，Spring 支持以下切点运算符：</p>
<ul>
<li><code>&amp;&amp;</code> ：与操作符，等效符号 <code>and</code>。如 <code>within(com.lake.*) and args(String)</code> 表示在 com.lake 包下所有类拥有一个 String 入参的方法</li>
<li><code>||</code> ：或操作符，等效符号 <code>or</code>。如 <code>within(com.lake..*) and args(String)</code> 表示在 com.lake 包下所有类（当前包以及子孙包）的方法，或所有拥有一个 String 入参的方法</li>
<li><code>!</code> ：非操作符，等效符号 <code>not</code>。如 <code>!within(com.lake.*)</code> 表示所有不在 com.lake 包下的方法</li>
</ul>
<h2 id="声明增强（advice）"><a href="#声明增强（advice）" class="headerlink" title="声明增强（advice）"></a>声明增强（advice）</h2><p>Spring 使用增强定义横切逻辑，同时由于 Spring 只支持方法连接点，增强还包括了在方法的哪一点加入横切代码的方位信息，所以增强既包括横切逻辑，还包括部分连接点。<br>增强与切点表达式相关联，并在切点匹配的方法执行之前，之后或周围运行。切点表达式可以是对指定切点的简单引用，也可以是在适当位置声明的切入点表达式。所有增强类型除了引介增强，其余都属于方法级别的。</p>
<h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><p>前置增强表示在目标方法执行前实施增强（即先执行增强方法中的代码）。<br>使用 @Before 声明前置增强，其拥有两个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点。</li>
<li>argNames：由于无法通过 Java 反射机制获取方法入参名，所有如果在 Java 编译时未启动调试信息或者需要在运行期解析切点，就必须通过这个成员指定注解多标注增强方法的参数名（注意两者名字必须完全相同），多个参数名用逗号分隔。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeExample</span> </span>&#123;</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.xyz.myapp.dao.*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上所示，doAccessCheck() 方法会在 SystemArchitecture 类的 dataAccessOperation() 方法执行之前先执行；doAccessCheck2() 会在表达式所匹配的方法执行之前执行。</p>
<h3 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h3><p>后置增强表示在目标方法执行后实施增强（即后执行增强方法中的代码）。<br>使用 @AfterReturning 声明后置增强，其拥有四个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点。</li>
<li>pointcut：表示切点的信息，如果显示指定 pointcut 值，它将覆盖 value 的设置值，可以将 pointcut 属性看成 value。</li>
<li>returning：将目标对象方法的返回值绑定给增强的方法。</li>
<li>argNames：如上所述</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterReturningExample</span> </span>&#123;</div><div class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@AfterReturning</span>(</div><div class="line">        pointcut=<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>,</div><div class="line">        returning=<span class="string">"retVal"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck2</span><span class="params">(Object retVal)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><p>环绕增强表示在目标方法执行前后实施增强（即前后都执行增强方法中的代码）。<br>使用 @Around 声明环绕增强，其拥有两个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点。</li>
<li>argNames：如上所述</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundExample</span> </span>&#123;</div><div class="line">    <span class="meta">@Around</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.businessService()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// start stopwatch</span></div><div class="line">        Object retVal = pjp.proceed();</div><div class="line">        <span class="comment">// stop stopwatch</span></div><div class="line">        <span class="keyword">return</span> retVal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h3><p>异常抛出增强表示在目标方法抛出异常后实施增强。<br>使用 @AfterThrowing 声明抛出增强，其拥有四个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点。</li>
<li>pointcut：表示切点的信息，如果显示指定 pointcut 值，它将覆盖 value 的设置值，可以将 pointcut 属性看成 value。</li>
<li>returning：将抛出的异常绑定给增强的方法。</li>
<li>argNames：如上所述</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterThrowingExample</span> </span>&#123;</div><div class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRecoveryActions</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@AfterThrowing</span>(</div><div class="line">        pointcut=<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>,</div><div class="line">        throwing=<span class="string">"ex"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRecoveryActions</span><span class="params">(DataAccessException ex)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><p>Final 增强，不管是抛出异常或者是正常退出，该增强都会得到执行，一般用于释放资源，相当于 finally。<br>使用 @After 声明 Final 增强，其拥有两个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点。</li>
<li>argNames：如上所述</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterFinallyExample</span> </span>&#123;</div><div class="line">    <span class="meta">@After</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doReleaseLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DeclareParents"><a href="#DeclareParents" class="headerlink" title="@DeclareParents"></a>@DeclareParents</h3><p>引介增强是一种比较特殊的增强类型，它不是在目标方法周围织入增强，而是为目标类创建新的方法和属性，所以引介增强的连接点是类级别的，而非方法级别的。通过引介增强可以为目标类添加一个接口的实现，即原来目标类未实现某个接口，通过引介增强可以为目标类创建实现某接口的代理。<br>使用 @DeclareParents 声明引介增强，其拥有两个属性：</p>
<ul>
<li>vlaue：该成员用于定义切点，它表示在哪个目标类上添加引介增强。</li>
<li>defaultImpl：默认的接口实现类。</li>
</ul>
<p>示例：给定一个接口 UsageTracked 以及该接口的实现 DefaultUsageTracked，vlaue 属性指向需要添加接口实现的类，defaultImpl 属性指向默认的接口实现类。通过 @DeclareParents 为 value 属性的 AspectJ 切点表达式语法所匹配的类添加一个需要实现的 UsageTracked 接口，并指定其默认实现类为 DefaultUsageTracked，然后通过切面技术将 DefaultUsageTracked 融合到 value 属性的 AspectJ 切点表达式语法所匹配的类，这样 value 属性的 AspectJ 切点表达式语法所匹配的类就实现了 UsageTracked 接口了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsageTracking</span> </span>&#123;</div><div class="line">    <span class="meta">@DeclareParents</span>(value=<span class="string">"com.xzy.myapp.service.*+"</span>, defaultImpl=DefaultUsageTracked.class)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UsageTracked mixin;</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.businessService() &amp;&amp; this(usageTracked)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordUsage</span><span class="params">(UsageTracked usageTracked)</span> </span>&#123;</div><div class="line">        usageTracked.incrementUseCount();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UsageTracked</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开启-AspectJ-支持&quot;&gt;&lt;a href=&quot;#开启-AspectJ-支持&quot; class=&quot;headerlink&quot; title=&quot;开启 @AspectJ 支持&quot;&gt;&lt;/a&gt;开启 @AspectJ 支持&lt;/h2&gt;&lt;p&gt;@AspectJ 指的是使用注解标注的常规 Java 类的样式声明切面，@AspectJ 样式是 AspectJ 项目引入的，作为 AspectJ 5 版本的一部分。Spring 使用由 AspectJ 提供的库 aspectjweaver.jar（要求版本至少为 1.6.8），就能像 AspectJ 5 那样解析注解。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（六）—— IOC 容器之不同的配置方式</title>
    <link href="http://yoursite.com/2016/11/18/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94%20IOC%20%E5%AE%B9%E5%99%A8%E4%B9%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/11/18/Spring笔记（六）—— IOC 容器之不同的配置方式/</id>
    <published>2016-11-18T13:27:50.000Z</published>
    <updated>2016-11-20T13:19:29.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h2><p>XML 设置的替代方法是基于注释的配置，它依赖于字节码元数据来连接组件而不是角括号声明。开发人员通过使用相关类，方法或字段声明上的注释来将配置移动到组件类本身中，而不是使用 XML 来描述 bean 布线。例如，Spring2.0 引入了使用 @Required 注释实现 required 属性的可能性。Spring2.5 添加了对 JSR-250 注释的支持，例如 @PostConstruct 和 @PreDestroy。Spring3.0 增加了对 javax.inject 包中包含的 JSR-330（Java的依赖注入）注释的支持，例如 @Inject 和 @Named。<br><a id="more"></a></p>
<h3 id="required"><a href="#required" class="headerlink" title="@required"></a>@required</h3><p>@Required 注释适用于 bean 属性的 setter 方法，此注释表示被标注的 bean 属性必须在配置时通过 bean 定义中的显式属性值或通过自动装配被填充，如果被标注的 bean 属性未被填充，容器将抛出异常。如下例子所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="meta">@Required</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>Spring 通过 @Autowired 注解实现 Bean 的依赖注入，可以运用在多种自动注入场景。</p>
<h4 id="应用于构造函数"><a href="#应用于构造函数" class="headerlink" title="应用于构造函数"></a>应用于构造函数</h4><p>Spring 框架4.3，如果目标 bean 只定义了一个构造函数，则可以不需要 @Autowired。如果有多个构造函数，则至少必须为其中一个声明注解，告知容器哪一个是必须被使用的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="应用于-setter-方法"><a href="#应用于-setter-方法" class="headerlink" title="应用于 setter 方法"></a>应用于 setter 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="应用于拥有参数的某个方法"><a href="#应用于拥有参数的某个方法" class="headerlink" title="应用于拥有参数的某个方法"></a>应用于拥有参数的某个方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</div><div class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(MovieCatalog movieCatalog, CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieCatalog = movieCatalog;</div><div class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="应用于字段或与构造函数混合使用"><a href="#应用于字段或与构造函数混合使用" class="headerlink" title="应用于字段或与构造函数混合使用"></a>应用于字段或与构造函数混合使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="应用于数组或集合"><a href="#应用于数组或集合" class="headerlink" title="应用于数组或集合"></a>应用于数组或集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</div><div class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieCatalogs = movieCatalogs;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieCatalogs = movieCatalogs;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="应用于泛型"><a href="#应用于泛型" class="headerlink" title="应用于泛型"></a>应用于泛型</h4><p>原始类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StringStore <span class="title">stringStore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringStore();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IntegerStore <span class="title">integerStore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IntegerStore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>泛型类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Store&lt;String&gt; s1; <span class="comment">// &lt;String&gt; qualifier, injects the stringStore bean</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Store&lt;Integer&gt; s2; <span class="comment">// &lt;Integer&gt; qualifier, injects the integerStore bean</span></div><div class="line">    <span class="comment">// Inject all Store beans as long as they have an &lt;Integer&gt; generic</span></div><div class="line">    <span class="comment">// Store&lt;String&gt; beans will not appear in this list</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> List&lt;Store&lt;Integer&gt;&gt; s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="required-属性"><a href="#required-属性" class="headerlink" title="required 属性"></a>required 属性</h4><p>如果容器中没有一个和标注变量类型匹配的 Bean，Spring 容器启动时会抛出异常，默认情况下，required 属性值为 true，即要求一定要找到匹配的 Bean。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p>因为按类型自动装配可能导致多个候选项，所以通常需要对选择过程有更多的控制。@Primary 表示当多个 bean 自动装配到单值依赖关系的候选项时，应该优先选择 @Primary 指定的 bean。如果候选项中只有一个 primary bean，那么它将作为自动装配的值。<br>如下定义 firstMovieCatalog 作为 primary MovieCatalog：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieConfiguration</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MovieCatalog <span class="title">firstMovieCatalog</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MovieCatalog <span class="title">secondMovieCatalog</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>@Qualifier 可以将限定符值与特定参数相关联，缩小类型匹配集，以便为每个参数选择特定的 bean。如果容器中有一个以上匹配的 Bean 时，则可以通过 @Qualifier 注解限定 Bean 的名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"main"</span>)</div><div class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Qualifier 也可以用于独立的构造函数参数或方法参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</div><div class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(@Qualifier(<span class="string">"main"</span>)</span>MovieCatalog movieCatalog,</span></div><div class="line">                        CustomerPreferenceDao customerPreferenceDao) &#123;</div><div class="line">        <span class="keyword">this</span>.movieCatalog = movieCatalog;</div><div class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>@Resource 要求提供一个 Bean 名称的属性，如果没有明确指定名称，则默认名称派生自字段名称或 setter 方法。在字段的情况下，它采用字段名称; 在 setter 方法的情况下，它接受 bean 属性名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="meta">@Resource</span>(name=<span class="string">"myMovieFinder"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以下示例使用名称为 <code>movieFinder</code> 的 bean 注入到其 setter 方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Autowired 默认按类型匹配注入 Bean，@Resource 则按名称匹配注入 Bean，@Inject 和 @Autowired 一样按类型匹配注入 Bean，只不过它没有 required 属性。</p>
<h3 id="PostConstruct-和-PreDestroy"><a href="#PostConstruct-和-PreDestroy" class="headerlink" title="@PostConstruct 和 @PreDestroy"></a>@PostConstruct 和 @PreDestroy</h3><p>使用 <code>&lt;bean&gt;</code> 进行配置时，可以通过 init-method 和 destory-method 属性指定 Bean 的初始化及容器销毁前执行的方法。Spring 从 2.5 开始支持 JSR-250 中定义的 @PostConstruct 和 @PreDestroy 注解，在 Spring 中相当于 init-method 和 destory-method 属性的功能，不过使用注解时，可以在一个 Bean 中定义多个 @PostConstruct 和 @PreDestroy 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingMovieLister</span> </span>&#123;</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateMovieCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// populates the movie cache upon initialization...</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@PreDestroy</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMovieCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// clears the movie cache upon destruction...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="基于-Java-类的配置"><a href="#基于-Java-类的配置" class="headerlink" title="基于 Java 类的配置"></a>基于 Java 类的配置</h2><p>@Bean 注解用于表示方法实例化，配置和初始化一个由 Spring IoC 容器管理的新对象。@Bean 注释与 <code>&lt;bean/&gt;</code> 元素具有相同的作用。@Configuration 注解表示被标注的 POJO 类可以为 Spring 容器提供 Bean 定义的信息。<br>简单的实例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>与 AppConfig 类等同的 XML 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">class</span>=<span class="string">"com.acme.services.MyServiceImpl"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><p>@Bean 是一个方法级别的注解和 XML <code>&lt;bean/&gt;</code> 元素的替代，它支持 init-method, destroy-method, autowiring 和 name 等 <code>&lt;bean/&gt;</code> 提供的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// initialization logic</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// destruction logic</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"cleanup"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bar();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h4><p>用于指定 Bean 的作用域。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Encryptor <span class="title">encryptor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="自定义-Bean-的名称，别名和描述"><a href="#自定义-Bean-的名称，别名和描述" class="headerlink" title="自定义 Bean 的名称，别名和描述"></a>自定义 Bean 的名称，别名和描述</h4><p>Bean 可以通过 name 属性自定义名称，当有多个名称时，其它的为别名；还可以使用 @Description 定义 Bean 的描述信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span>(name = &#123; <span class="string">"dataSource"</span>, <span class="string">"subsystemA-dataSource"</span>, <span class="string">"subsystemB-dataSource"</span> &#125;)</div><div class="line">    <span class="meta">@Description</span>(<span class="string">"Provides a basic example of a bean"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// instantiate, configure and return DataSource bean...</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSource();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>@Configuration 是一个类级别的注解，表示该类是为 Spring 容器提供 bean 定义信息的类。</p>
<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>等同于 XML 配置中的 <code>&lt;import/&gt;</code> 元素，@Import 注解允许从另一个 Configuration 类中加载 @Bean 定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigA</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> A <span class="title">a</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> A();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(ConfigA.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigB</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">b</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上所述，ConfigB 中导入了 ConfigA，所以在实例化上下文的时候，只需要提供 ConfigB。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigB.class);</div><div class="line">    <span class="comment">// now both beans A and B will be available...</span></div><div class="line">    A a = ctx.getBean(A.class);</div><div class="line">    B b = ctx.getBean(B.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><p>用于加载资源文件路径的注解。</p>
<ul>
<li><p>properties-config.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:/com/acme/jdbc.properties"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>jdbc.properties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jdbc.url=jdbc:hsqldb:hsql:<span class="comment">//localhost/xdb</span></div><div class="line">jdbc.username=sa</div><div class="line">jdbc.password=</div></pre></td></tr></table></figure>
</li>
<li><p>bean 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/com/acme/properties-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DriverManagerDataSource(url, username, password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>main 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</div><div class="line">    TransferService transferService = ctx.getBean(TransferService.class);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="不同配置方式的比较"><a href="#不同配置方式的比较" class="headerlink" title="不同配置方式的比较"></a>不同配置方式的比较</h2><table>
<thead>
<tr>
<th>描述</th>
<th>基于 XML 配置</th>
<th>基于注解配置</th>
<th>基于 Java 类配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bean 定义</td>
<td>在 XML 文件中通过 <code>&lt;bean&gt;</code> 元素定义 Bean。如：<code>&lt;bean class=&quot;com.lake.UserDao&quot;/&gt;</code></td>
<td>在 Bean 实现类出通过标注 @Component 或衍型类（@Repository、@Service 及 @Controller）定义 Bean</td>
<td>在标注了 @Configuration 的 Java 类中，通过在类方法上标注 @Bean 定义一个 Bean，方法必须提供 Bean 的实例化逻辑</td>
</tr>
<tr>
<td>Bean 名称</td>
<td>通过 <code>&lt;bean&gt;</code> 的 id 或 name 属性定义 Bean。如：<code>&lt;bean id=&quot;userDao&quot; class=&quot;com.lake.UserDao&quot;/&gt;</code>，默认名称为：com.lake.UserDao#0</td>
<td>通过注解的 value 属性定义，如 @Component(“userDao”)，默认名称为小写字母开头的类名（不带包名）：userDao</td>
<td>通过 @Bean 的 name 属性定义，如 @Bean(“userDao”)，默认名称为方法名</td>
</tr>
<tr>
<td>Bean 注入</td>
<td>通过 <code>&lt;property&gt;</code> 子元素或通过 p 命名空间的动态属性，如 p:userDao-ref=”userDao” 进行注入</td>
<td>通过在成员变更或方法入参处标注 @Autowired，按类型匹配自动注入，还可以配合使用 @Qualifier 按名称匹配方式注入</td>
<td>比较灵活，可以通过在方法处通过 @Autowired 使方法入参绑定 Bean，然后在方法中通过代码进行注入，还可通过调用配置类的 @Bean 方法进行注入</td>
</tr>
<tr>
<td>Bean 作用域</td>
<td>通过 <code>&lt;bean&gt;</code> 的 scpoe 属性指定，如：<code>&lt;bean class=&quot;com.lake.UserDao&quot; scope=&quot;prototype&quot;/&gt;</code></td>
<td>通过在类定义处标注 @Scope 指定，如：@Scope(“prototype”)</td>
<td>通过在 Bean 方法定义处标注 @Scope 指定</td>
</tr>
<tr>
<td>Bean 生命周期方法</td>
<td>通过 <code>&lt;bean&gt;</code> 的 init-method 和 destroy-method 属性指定 Bean 实现类的方法名，最多只能指定一个初始化方法和销毁方法</td>
<td>通过在目标方法上标注 @PostConstruct 和 @PreDestory 注解指定初始化或销毁方法，可以定义任意多个</td>
<td>通过 @Bean 的 initMethod 或 destoryMethod 指定一个初始化或销毁方法。对于初始化方法来说，可以直接在方法内部通过代码的方式灵活定义初始化逻辑</td>
</tr>
<tr>
<td>Bean 延迟初始化</td>
<td>通过 <code>&lt;bean&gt;</code> 的 lazy-init 属性指定，默认为 default，继承自 <code>&lt;beans&gt;</code> 的 default-lazy-init 设置，该值默认为 false</td>
<td>通过在类定义出标注 @Lazy 指定，如：@Lazy(true)</td>
<td>通过在 Bean 方法定义出标注 @Lazy 指定</td>
</tr>
<tr>
<td>适合场景</td>
<td>Bean 实现类来源于第三方类库，如 DataSource、JdbcTemplate 等，因无法在类中标注注解，通过 XML 配置方式较好；命名空间的配置，如 aop、context 等，只能采用基于 XML 的配置</td>
<td>Bean 的实现类时当前项目开发的，可以直接在 Java 类中使用基于注解的配置</td>
<td>优势在于可以通过代码的方式控制 Bean 初始化的整体逻辑，所以如果实例化 Bean 的逻辑比较复杂，则比较适合用基于 Java 类配置的方式 ｜</td>
</tr>
</tbody>
</table>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基于注解的配置&quot;&gt;&lt;a href=&quot;#基于注解的配置&quot; class=&quot;headerlink&quot; title=&quot;基于注解的配置&quot;&gt;&lt;/a&gt;基于注解的配置&lt;/h2&gt;&lt;p&gt;XML 设置的替代方法是基于注释的配置，它依赖于字节码元数据来连接组件而不是角括号声明。开发人员通过使用相关类，方法或字段声明上的注释来将配置移动到组件类本身中，而不是使用 XML 来描述 bean 布线。例如，Spring2.0 引入了使用 @Required 注释实现 required 属性的可能性。Spring2.5 添加了对 JSR-250 注释的支持，例如 @PostConstruct 和 @PreDestroy。Spring3.0 增加了对 javax.inject 包中包含的 JSR-330（Java的依赖注入）注释的支持，例如 @Inject 和 @Named。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（五）—— IOC 容器之依赖注入</title>
    <link href="http://yoursite.com/2016/11/17/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%20IOC%20%E5%AE%B9%E5%99%A8%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2016/11/17/Spring笔记（五）—— IOC 容器之依赖注入/</id>
    <published>2016-11-17T13:22:00.000Z</published>
    <updated>2016-11-23T09:44:59.974Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 支持两种依赖注入方式，分别为构造函数注入和属性注入，此外还支持工厂方法注入方式。</p>
<h2 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h2><p>构造函数注入由容器调用带参的构造函数来完成，与通过调用指定参数的静态工厂方法来构造 bean 相似。包含构造函数的类是一个没有依赖于容器指定的接口，基类或注释的 POJO，如下所示：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</div><div class="line">    <span class="comment">// the SimpleMovieLister has a dependency on a MovieFinder</span></div><div class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</div><div class="line">    <span class="comment">// a constructor so that the Spring container can inject a MovieFinder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMovieLister</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// business logic that actually uses the injected MovieFinder is omitted...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="构造函数参数解析"><a href="#构造函数参数解析" class="headerlink" title="构造函数参数解析"></a>构造函数参数解析</h3><p>使用参数的类型进行构造函数参数解析匹配。如果 bean 定义的构造函数参数不存在歧义，那么构造函数参数在 <code>&lt;beans/&gt;</code> 中定义的参数顺序和 bean 被实例化时提供给适当的构造函数的参数顺序一致。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> x.y;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(Bar bar, Baz baz)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"baz"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">class</span>=<span class="string">"x.y.Bar"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baz"</span> <span class="attr">class</span>=<span class="string">"x.y.Baz"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="按类型匹配入参"><a href="#按类型匹配入参" class="headerlink" title="按类型匹配入参"></a>按类型匹配入参</h4><p>在 <code>&lt;constructor-arg&gt;</code> 的元素中有一个 type 属性，它为 Spring 提供了判断配置项和构造函数入参对应关系的信息。Spring 的配置文件采用和元素标签顺序无关的策略，在一定程度上保证配置信息的正确性，<code>&lt;constructor-arg&gt;</code> 位置的改变并不会对最终的配置产生影响。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> examples;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</div><div class="line">    <span class="comment">// Number of years to calculate the Ultimate Answer</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</div><div class="line">    <span class="comment">// The Answer to Life, the Universe, and Everything</span></div><div class="line">    <span class="keyword">private</span> String ultimateAnswer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(<span class="keyword">int</span> years, String ultimateAnswer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.years = years;</div><div class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="按索引匹配入参"><a href="#按索引匹配入参" class="headerlink" title="按索引匹配入参"></a>按索引匹配入参</h4><p>如果构造函数两个入参的类型相同，仅通过 type 无法确定对应关系，需要通过入参索引的方式进行确定，参数和构造函数参数需要顺序对应。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="按参数名匹配入参"><a href="#按参数名匹配入参" class="headerlink" title="按参数名匹配入参"></a>按参数名匹配入参</h4><p>使用 @ConstructorProperties 注解指定入参名，在 xml 文件中通过参数名的方式匹配入参。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> examples;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</div><div class="line">    <span class="comment">// Fields omitted</span></div><div class="line">    <span class="meta">@ConstructorProperties</span>(&#123;<span class="string">"years"</span>, <span class="string">"ultimateAnswer"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(<span class="keyword">int</span> years, String ultimateAnswer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.years = years;</div><div class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"years"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ultimateAnswer"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>属性注入即通过 setXxx() 方法注入 Bean 的属性值或依赖对象，由于属性注入方式具有可选择性和灵活性高的优点，因此属性注入是实际应用中最常见的注入方式。属性注入要求 Bean 提供一个默认的构造函数，并为需要注入的属性提供对应的 Setter 方法。Spring 先调用 Bean 的默认构造函数实例化 Bean 对象，然后通过反射的方式调用 Setter 方法注入属性值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> examples;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</div><div class="line">    <span class="comment">// Number of years to calculate the Ultimate Answer</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> years;</div><div class="line">    <span class="comment">// The Answer to Life, the Universe, and Everything</span></div><div class="line">    <span class="keyword">private</span> String ultimateAnswer;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYears</span><span class="params">(<span class="keyword">int</span> years)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.years = years;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUltimateAnswer</span><span class="params">(<span class="keyword">int</span> ultimateAnswer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ultimateAnswer = ultimateAnswer;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"years"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>7500000<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ultimateAnswer"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>42<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="注入参数详解"><a href="#注入参数详解" class="headerlink" title="注入参数详解"></a>注入参数详解</h2><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><p>字面值指可用字符串表示的值，且这些值可通过 value 属性进行注入。Spring 容器在内部为字面值提供了编辑器，它可以将以字符串表示的字面值转换为内部变量的相应类型。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"masterkaoli"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用 p-namespace 简化上述的 xml 配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></div><div class="line">    <span class="attr">destroy-method</span>=<span class="string">"close"</span></div><div class="line">    <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">    <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span></div><div class="line">    <span class="attr">p:username</span>=<span class="string">"root"</span></div><div class="line">    <span class="attr">p:password</span>=<span class="string">"masterkaoli"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="引用其他-bean"><a href="#引用其他-bean" class="headerlink" title="引用其他 bean"></a>引用其他 bean</h3><p>使用 ref 指定引用的 bean：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- in the parent context --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.foo.SimpleAccountService"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- insert dependencies as required as here --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- in the child (descendant) context --&gt;</span></div><div class="line"><span class="comment">&lt;!-- bean name is the same as the parent bean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span>  <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">parent</span>=<span class="string">"accountService"</span>/&gt;</span> <span class="comment">&lt;!-- notice how we refer to the parent bean --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- insert other configuration and dependencies as required here --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="内部-Bean"><a href="#内部-Bean" class="headerlink" title="内部 Bean"></a>内部 Bean</h3><p>内部 Bean 和 Java 代码中匿名内部类相似，没有名字，也不能被其他 Bean 引用，只能在声明出为外部 Bean 提供实例注入。内部 Bean 即使提供了 id、name、scope 属性，也会被忽略，scope 默认为 prototype类型。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"outer"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- instead of using a reference to a target bean, simply define the target bean inline --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span> <span class="comment">&lt;!-- this is the inner bean --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Fiona Apple"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="集合类型属性"><a href="#集合类型属性" class="headerlink" title="集合类型属性"></a>集合类型属性</h3><p>在 <list>, <set>, <map>, 和 <props> 元素中，可以设置属性和 Java 集合类型 List, Set, Map 和 Properties 的参数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moreComplexObject"</span> <span class="attr">class</span>=<span class="string">"example.ComplexObject"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"development"</span>&gt;</span>development@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someList"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>a list element followed by a reference<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someMap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"an entry"</span> <span class="attr">value</span>=<span class="string">"just some string"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">"a ref"</span> <span class="attr">value-ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someSet"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>just some string<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></props></map></set></list></p>
<h4 id="集合合并"><a href="#集合合并" class="headerlink" title="集合合并"></a>集合合并</h4><p>允许子 <code>&lt;bean&gt;</code> 继承父 <code>&lt;bean&gt;</code> 的同名属性集合元素，并将子 <code>&lt;bean&gt;</code> 中配置的集合属性值和父 <code>&lt;bean&gt;</code> 中配置的同名属性值合并起来作为最终 Bean 的属性值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parent"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"example.ComplexObject"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"child"</span> <span class="attr">parent</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- the merge is specified on the child collection definition --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span> <span class="attr">merge</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"sales"</span>&gt;</span>sales@example.com<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.co.uk<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="强类型集合"><a href="#强类型集合" class="headerlink" title="强类型集合"></a>强类型集合</h4><p>JDK5.0 提供了强类型集合的新功能，允许为集合元素指定类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, Float&gt; accounts;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(Map&lt;String, Float&gt; accounts)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.accounts = accounts;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accounts"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"9.99"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"2.75"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"six"</span> <span class="attr">value</span>=<span class="string">"3.99"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="null-值和空-string-值"><a href="#null-值和空-string-值" class="headerlink" title="null 值和空 string 值"></a>null 值和空 string 值</h3><p>参数值为空 String：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>参数值为 null：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="简化配置方式"><a href="#简化配置方式" class="headerlink" title="简化配置方式"></a>简化配置方式</h3><p>Spring 为字面值、引用 Bean 和集合都提供了简化的配置方式。</p>
<h4 id="使用-p-namespace"><a href="#使用-p-namespace" class="headerlink" title="使用 p-namespace"></a>使用 p-namespace</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"classic"</span> <span class="attr">class</span>=<span class="string">"com.example.ExampleBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"foo@bar.com"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"p-namespace"</span> <span class="attr">class</span>=<span class="string">"com.example.ExampleBean"</span></span></div><div class="line">        <span class="attr">p:email</span>=<span class="string">"foo@bar.com"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="使用-c-namespace"><a href="#使用-c-namespace" class="headerlink" title="使用 c-namespace"></a>使用 c-namespace</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">class</span>=<span class="string">"x.y.Bar"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baz"</span> <span class="attr">class</span>=<span class="string">"x.y.Baz"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- traditional declaration --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"baz"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"foo@bar.com"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- c-namespace declaration --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span> <span class="attr">c:bar-ref</span>=<span class="string">"bar"</span> <span class="attr">c:baz-ref</span>=<span class="string">"baz"</span> <span class="attr">c:email</span>=<span class="string">"foo@bar.com"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="级联属性"><a href="#级联属性" class="headerlink" title="级联属性"></a>级联属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"foo.Bar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fred.bob.sammy"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>foo bean 有一个 fred 属性，在 fred 下有一个 bob 属性， 在 bob 下有一个 sammy 属性。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 支持两种依赖注入方式，分别为构造函数注入和属性注入，此外还支持工厂方法注入方式。&lt;/p&gt;
&lt;h2 id=&quot;构造函数注入&quot;&gt;&lt;a href=&quot;#构造函数注入&quot; class=&quot;headerlink&quot; title=&quot;构造函数注入&quot;&gt;&lt;/a&gt;构造函数注入&lt;/h2&gt;&lt;p&gt;构造函数注入由容器调用带参的构造函数来完成，与通过调用指定参数的静态工厂方法来构造 bean 相似。包含构造函数的类是一个没有依赖于容器指定的接口，基类或注释的 POJO，如下所示：&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（四）—— IOC 容器之 Bean 的生命周期</title>
    <link href="http://yoursite.com/2016/11/16/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%20IOC%20%E5%AE%B9%E5%99%A8%E4%B9%8B%20Bean%20%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2016/11/16/Spring笔记（四）—— IOC 容器之 Bean 的生命周期/</id>
    <published>2016-11-16T12:04:00.000Z</published>
    <updated>2016-11-20T07:16:07.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Initialization-回调"><a href="#Initialization-回调" class="headerlink" title="Initialization 回调"></a>Initialization 回调</h2><p>org.springframework.beans.factory.InitializingBean 接口允许 bean 在容器设置完所有属性后执行初始化工作，初始化工作在实现 InitializingBean 的类中的 afterPropertiesSet() 方法中执行。此外，初始化工作也可通过 @PostConstruct 注解来指定执行初始化工作的方法；或者指定一个 POJO 的初始化方法，然后在 XML 文件中使用 init-method 属性指定在该方法中执行初始化操作。<br><a id="more"></a>  </p>
<h3 id="实现-InitializingBean-接口"><a href="#实现-InitializingBean-接口" class="headerlink" title="实现 InitializingBean 接口"></a>实现 InitializingBean 接口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleInitBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do some initialization work</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-PostConstruct-注解"><a href="#使用-PostConstruct-注解" class="headerlink" title="使用 @PostConstruct 注解"></a>使用 @PostConstruct 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingMovieLister</span> </span>&#123;</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateMovieCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// populates the movie cache upon initialization...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-init-method-属性"><a href="#使用-init-method-属性" class="headerlink" title="使用 init-method 属性"></a>使用 init-method 属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleInitBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span> <span class="attr">init-method</span>=<span class="string">"init"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do some initialization work</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Destroy-回调"><a href="#Destroy-回调" class="headerlink" title="Destroy 回调"></a>Destroy 回调</h2><p>org.springframework.beans.factory.DisposableBean 接口允许 bean 使用销毁回调，销毁工作在实现 DisposableBean 的类中的 destroy() 方法中执行。注解方法使用 @PreDestroy，XML 文件指定 destroy-method 属性即可。</p>
<h3 id="实现-InitializingBean-接口-1"><a href="#实现-InitializingBean-接口-1" class="headerlink" title="实现 InitializingBean 接口"></a>实现 InitializingBean 接口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleInitBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do some destruction work (like releasing pooled connections)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-PostConstruct-注解-1"><a href="#使用-PostConstruct-注解-1" class="headerlink" title="使用 @PostConstruct 注解"></a>使用 @PostConstruct 注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingMovieLister</span> </span>&#123;</div><div class="line">    <span class="meta">@PreDestroy</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMovieCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// clears the movie cache upon destruction...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用-init-method-属性-1"><a href="#使用-init-method-属性-1" class="headerlink" title="使用 init-method 属性"></a>使用 init-method 属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleInitBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span> <span class="attr">destroy-method</span>=<span class="string">"cleanup"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// do some destruction work (like releasing pooled connections)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="默认的-initialization-和-destroy-方法"><a href="#默认的-initialization-和-destroy-方法" class="headerlink" title="默认的 initialization 和 destroy 方法"></a>默认的 initialization 和 destroy 方法</h2><p>当做 initialization 和 destroy 工作时，使用 init(), initialize(), dispose() 等类似的方法名有助于我们识别方法的作用。每次我们都需要为每个 bean 设置 init-method 或 destroy-method 属性指定生命周期的回调方法，有一个更加简便的方法，即在 <beans> 元素中使用 default-init-method 属性指定初始化的方法，则默认 <beans> 元素下的所有 bean 的初始化方法均为 init()。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-init-method</span>=<span class="string">"init"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"blogService"</span> <span class="attr">class</span>=<span class="string">"com.foo.DefaultBlogService"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blogDao"</span> <span class="attr">ref</span>=<span class="string">"blogDao"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></beans></beans></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultBlogService</span> <span class="keyword">implements</span> <span class="title">BlogService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> BlogDao blogDao;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlogDao</span><span class="params">(BlogDao blogDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.blogDao = blogDao;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// this is (unsurprisingly) the initialization callback method</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.blogDao == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The [blogDao] property must be set."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>default-destroy-method 属性的使用方法也和 default-init-method 一样。</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Initialization-回调&quot;&gt;&lt;a href=&quot;#Initialization-回调&quot; class=&quot;headerlink&quot; title=&quot;Initialization 回调&quot;&gt;&lt;/a&gt;Initialization 回调&lt;/h2&gt;&lt;p&gt;org.springframework.beans.factory.InitializingBean 接口允许 bean 在容器设置完所有属性后执行初始化工作，初始化工作在实现 InitializingBean 的类中的 afterPropertiesSet() 方法中执行。此外，初始化工作也可通过 @PostConstruct 注解来指定执行初始化工作的方法；或者指定一个 POJO 的初始化方法，然后在 XML 文件中使用 init-method 属性指定在该方法中执行初始化操作。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（三）—— IOC 容器之 BeanFactory 和 ApplicationContext</title>
    <link href="http://yoursite.com/2016/11/13/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20IOC%20%E5%AE%B9%E5%99%A8%E4%B9%8B%20BeanFactory%20%E5%92%8C%20ApplicationContext/"/>
    <id>http://yoursite.com/2016/11/13/Spring笔记（三）—— IOC 容器之 BeanFactory 和 ApplicationContext/</id>
    <published>2016-11-13T12:05:25.000Z</published>
    <updated>2016-11-20T07:15:28.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>BeanFactory 是 Spring 框架最核心的接口，它提高了高级 IOC 的配置机制。BeanFactory 使管理不同类型的 Java 对象成为可能，ApplicationContext 建立在 BeanFactory 的基础之上，提供了更多面向应用的功能，提供了国际化支持和框架事件体系，更易于创建实际应用。BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身，ApplicationContext 面向使用 Spring 框架的开发者。<br><a id="more"></a>  </p>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>BeanFactory 提供了 Spring IOC 的基础功能，但它只能在第三方框架中直接使用。和 BeanFactory 相关的接口，如 BeanFactoryAware，InitializingBean，DisposableBean，仍然存在于 Spring 中用于与 Spring 集成的大量第三方框架向后兼容的作用。BeanFactory 通常使用在运行于资源有限（内存消耗严重）的嵌入式应用中。   </p>
<ul>
<li><p>使用 BeanFactory 实现注册一个后处理器（PostProcessor）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</div><div class="line"><span class="comment">// populate the factory with bean definitions</span></div><div class="line"><span class="comment">// now register any needed BeanPostProcessor instances</span></div><div class="line">MyBeanPostProcessor postProcessor = <span class="keyword">new</span> MyBeanPostProcessor();</div><div class="line">factory.addBeanPostProcessor(postProcessor);</div><div class="line"><span class="comment">// now start using the factory</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用 BeanFactory 实现注册一个 BeanFactoryPostProcessor：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DefaultListableBeanFactory factory = <span class="keyword">new</span> DefaultListableBeanFactory();</div><div class="line">XmlBeanDefinitionReader reader = <span class="keyword">new</span> XmlBeanDefinitionReader(factory);</div><div class="line">reader.loadBeanDefinitions(<span class="keyword">new</span> FileSystemResource(<span class="string">"beans.xml"</span>));</div><div class="line"><span class="comment">// bring in some property values from a Properties file</span></div><div class="line">PropertyPlaceholderConfigurer cfg = <span class="keyword">new</span> PropertyPlaceholderConfigurer();</div><div class="line">cfg.setLocation(<span class="keyword">new</span> FileSystemResource(<span class="string">"jdbc.properties"</span>));</div><div class="line"><span class="comment">// now actually do the replacement</span></div><div class="line">cfg.postProcessBeanFactory(factory);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>ApplicationContext 继承自 BeanFactory，提供了更多面向实际应用的功能。在 BeanFactory 中，很多功能需要以编程的方式实现，而在 ApplicationContext 中则可以通过配置的方式实现。</p>
<p>下图为 ApplicationContext 的继承体系图：<br><img src="/posts_img/beanfactory.png" alt="beanfactory"></p>
<p>ApplicationContext 的主要实现类是 ClassPathXmlApplicationContext，FileSystemXmlApplicationContext 和 AnnotationConfigApplicationContext，第一个默认从类路径加载配置文件，第二个默认从文件系统中装载配置文件，第三个可直接传入注解类，通过 register(Class…) 注册类或 scan(String…) 扫描路径 classpath 逐个注册类。   </p>
<p>如上图所示，ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口，在此之上还通过其他的接口扩展了 BeanFactory 的功能。这类接口包括：</p>
<ul>
<li>ApplicationEventPublisher：让容器拥有发布 ApplicationContext 事件的功能，包括容器启动时间、关闭事件等。实现了 ApplicationListener 事件监听接口的 Bean 可以接收到容器事件，并对事件进行响应处理。在 ApplicationContext 抽象实现类 AbstractApplicationContext 中，可以发现存在一个 ApplicationEventMulticaster，它负责保存所有监听器，以便在容器产生 ApplicationContext 事件时通知这些事件监听者。</li>
<li>MessageSource：为应用提供 i18n 国际化消息访问的功能。</li>
<li>ResourcePatternResolver：所有 ApplicationContext 实现类都实现了通过 Ant 风格的资源文件路径装载 Spring 的配置文件。</li>
<li>Lifecycle：该接口于 Spring2.0 加入，提供了 start() 和 stop() 两个方法，主要用于控制异步处理过程。具体使用时，该接口同时被 ApplicationContext 实现及具体 Bean 实现，ApplicationContext 会将 start/stop 的信息传递给容器中所有实现了该接口的 Bean，以达到管理和控制 JMX、任务调度等目的。</li>
</ul>
<p>ConfigurableApplicationContext 继承自 ApplicationContext，增加了两个主要的方法：refresh() 和 close()，让 ApplicationContext 具有启动、刷新和关闭上下文的能力。在 ApplicationContext 关闭时，调用 refresh 可启动 ApplicationContext；在启动状态下调用，则清除缓存并重新装载配置信息。调用 close 关闭 ApplicationContext。</p>
<h3 id="ApplicationContext-的初始化："><a href="#ApplicationContext-的初始化：" class="headerlink" title="ApplicationContext 的初始化："></a>ApplicationContext 的初始化：</h3><p>ApplicationContext 在实例化后和 BeanFactory 一样调用 getBean(beanName) 返回 Bean；在初始化时，BeanFactory 初始化容器时并未实例化 Bean 直至第一次访问 Bean，ApplicationContext 在初始化上下文时实例化所有单实例的 Bean。和基于 XML 文件配置方式的相比，类注解的配置方式可以很容易地让开发者控制 Bean 的初始化过程。</p>
<ul>
<li><p>配置文件在类路径下，优先使用 ClassPathXmlApplicationContext，“com/example/context/beans.xml” 等同于 “classpath:com/example/context/beans.xml”：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span></div><div class="line">      ClassPathXmlApplicationContext(<span class="string">"com/example/context/beans.xml"</span>);</div><div class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">      <span class="keyword">new</span> String[]&#123; <span class="string">"com/beans1.xml"</span>, <span class="string">"com/beans2.xml"</span> &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件在类路径下，优先使用 FileSystemXmlApplicationContext，“com/example/context/beans.xml” 等同于 “file:com/example/context/beans.xml”：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span></div><div class="line">      FileSystemXmlApplicationContext(<span class="string">"com/example/context/beans.xml"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>需要解析的是注解类，使用 AnnotationConfigApplicationContext：    </p>
<ul>
<li><p>Bean 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> String brand;</div><div class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> maxSpeed;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</div><div class="line">  		  <span class="keyword">return</span> brand;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</div><div class="line">  		  <span class="keyword">this</span>.brand = brand;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxSpeed</span><span class="params">()</span> </span>&#123;</div><div class="line">  		  <span class="keyword">return</span> maxSpeed;</div><div class="line">  	&#125;</div><div class="line"></div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxSpeed</span><span class="params">(<span class="keyword">int</span> maxSpeed)</span> </span>&#123;</div><div class="line">  		  <span class="keyword">this</span>.maxSpeed = maxSpeed;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>带注解的 POJO 类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Beans</span> </span>&#123;</div><div class="line">  	<span class="meta">@Bean</span>(name = <span class="string">"car"</span>)</div><div class="line">  	<span class="function"><span class="keyword">public</span> Car <span class="title">buildCar</span><span class="params">()</span> </span>&#123;</div><div class="line">    		Car car = <span class="keyword">new</span> Car();</div><div class="line">    		car.setBrand(<span class="string">"奔驰"</span>);</div><div class="line">    		car.setMaxSpeed(<span class="number">300</span>);</div><div class="line">    		<span class="keyword">return</span> car;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过带 @Configuration 的 POJO 类启动容器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.lake.context;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationApplicantionContext</span> </span>&#123;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(Beans.class);</div><div class="line">    		Car car = context.getBean(<span class="string">"car"</span>, Car.class);</div><div class="line">        car.getBrand();</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h3><p>WebApplicationContext 为 Web 应用而准备，它允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作。Spring 提供了工具类 WebApplicationContextUtils，通过 getWebApplicationContext(ServletContext sc) 获取 WebApplicationContext 实例。   </p>
<p>ConfigurableWebApplicationContext 继承自 WebApplicationContext，它允许通过配置的方式实例化 WebApplicationContext，它有两个重要的方法：</p>
<ul>
<li>setServletContext(ServletContext servletContext)：为 Spring 设置 WebApplicationContext。</li>
<li>setConfigLocations(String[] configLocations)：设置 Spring 配置文件地址，相对于 Web 根目录，如 /WEB-INF/lake-dao.xml，/WEB-INF/lake-service.xml 等。但用户也可使用带资源类型前缀的地址，如 classpath:com/example/context/beans.xml 等。</li>
</ul>
<h4 id="WebApplicationContext-初始化"><a href="#WebApplicationContext-初始化" class="headerlink" title="WebApplicationContext 初始化"></a>WebApplicationContext 初始化</h4><p>WebApplicationContext 需要 ServletContext 实例，它必须在拥有 Web 容器的情况下才能完成启动工作，和通常的 Web 开发类似，在 web.xml 中配置自启动的 Servlet 或容器监听器（ServletContextListener），即可完成启动 Spring WebApplicationContext 的工作。<br>Spring 提供了用于启动 WebApplicationContext 的 Servlet 和 Web 容器监听器：</p>
<ul>
<li>org.springframework.web.context.ContextLoaderServlet</li>
<li>org.springframework.web.context.ContextLoaderListener   </li>
</ul>
<p>两者都实现了启动 WebApplicationContext 实例的逻辑，只要根据 Web 容器的具体情况选择其一，并在 web.xml 中完成配置即可。</p>
<p>ContextLoaderListener 启动 WebApplicationContext:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 指定配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 设置Web容器监听器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在不支持容器监听器的低版本 Web 容器中，使用 ContextLoaderServlet：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 声明自启动的Servlet --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springContextLoaderServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.context.ContextLoaderServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 启动顺序 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="标准和自定义事件"><a href="#标准和自定义事件" class="headerlink" title="标准和自定义事件"></a>标准和自定义事件</h3><p>ApplicationContext 通过 ApplicationEvent 和 ApplicationListener 接口提供事件处理，当某个 bean 实现了 ApplicationListener 接口时，当 ApplicationEvent 发布给 ApplicationContext 时，该 bean 会被告知。  </p>
<h4 id="标准事件"><a href="#标准事件" class="headerlink" title="标准事件"></a>标准事件</h4><ul>
<li>ContextRefreshedEvent：当 ApplicationContext 被初始化或刷新时发布事件。这里的初始化是指所有的 beans 被加载，后处理器 beans 被检测并激活，单例被预实例化，ApplicationContext 对象已准备好并可用。当上下文关闭时，refresh 可以被多次触发，这样的 ApplicationContext 支持热刷新。XmlWebApplicationContext 支持热刷新，而 GenericApplicationContext 不支持。</li>
<li>ContextStartedEvent：ApplicationContext 被启动时发布事件，使用 ConfigurableApplicationContext 接口的 start() 方法。这里的启动意味着 beans 接收一个显式的启动信号，该信号用于在显式的停止之后重新启动 beans，也可以用于启动没有被配置成自动启动的组件。</li>
<li>ContextStoppedEvent：ApplicationContext 被停止时发布事件，使用 ConfigurableApplicationContext 接口的 stop() 方法。</li>
<li>RequestHandledEvent：告知所有 beans 一个 HTTP 请求已被处理的特定的 web 事件，当请求完成时事件将会被发布，该事件只能通过 Spring 的 DispatcherServlet 应用于 Web 应用中。</li>
</ul>
<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>自定义事件需要继承 Spring 的 ApplicationEvent 基类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String address;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String test;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlackListEvent</span><span class="params">(Object source, String address, String test)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">        <span class="keyword">this</span>.test = test;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// accessor and other methods...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用 ApplicationEventPublisher 的 publishEvent() 方法发布自定义的 ApplicationEvent，该类需要实现 ApplicationEventPublisherAware 接口并作为 bean 来注册。在配置期间，Spring 容器会检测到实现了 ApplicationEventPublisherAware 接口的 EmailService 并自动的调用 setApplicationEventPublisher() 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; blackList;</div><div class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlackList</span><span class="params">(List&lt;String&gt; blackList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.blackList = blackList;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.publisher = publisher;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String address, String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (blackList.contains(address)) &#123;</div><div class="line">            BlackListEvent event = <span class="keyword">new</span> BlackListEvent(<span class="keyword">this</span>, address, text);</div><div class="line">            publisher.publishEvent(event);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// send email...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个实现 ApplicationListener 接口的类，并作为 bean 来注册，以此接受自定义的 ApplicationEvent。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">BlackListEvent</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> String notificationAddress;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.notificationAddress = notificationAddress;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的代码用于配置和注册上述的类：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emailService"</span> <span class="attr">class</span>=<span class="string">"example.EmailService"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"blackList"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>known.spammer@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>known.hacker@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>john.doe@example.org<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"blackListNotifier"</span> <span class="attr">class</span>=<span class="string">"example.BlackListNotifier"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"notificationAddress"</span> <span class="attr">value</span>=<span class="string">"blacklist@example.org"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当 emailService 的 sendEmail() 方法被调用时，如果有任何邮件需要被加入黑名单，那么自定事件 BlackListEvent 会被发布。blackListNotifier bean 被注册作为 ApplicationListener 并接收 BlackListEvent。</p>
<h4 id="基于注解的事件监听器"><a href="#基于注解的事件监听器" class="headerlink" title="基于注解的事件监听器"></a>基于注解的事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String notificationAddress;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.notificationAddress = notificationAddress;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@EventListener</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="异步监听器"><a href="#异步监听器" class="headerlink" title="异步监听器"></a>异步监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// BlackListEvent is processed in a separate thread</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="顺序监听器"><a href="#顺序监听器" class="headerlink" title="顺序监听器"></a>顺序监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EventListener</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">42</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</div><div class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://baike.baidu.com/link?url=d7y8v6ipdY1kKXBOoV4NU3MyMZi62nekBGBPcnSN0-LbJ7I5DxGU4C5njmcFPFVXP_JdA_tpAwSOFNOXUoc1a_jPFyg3iDCBPWR-sC3-_OtiW9ZFavHunQzgbXk4Ju-UuIepOOdH2gzsWDznpcvRQ8IgWWk9VW0WFJoZNfC60-AbKDdFV6VK-xNeyXw6EdEy" target="_blank" rel="external">Spring 3.x 企业应用开发实战</a><br><a href="http://docs.spring.io/spring/docs/4.3.5.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/" target="_blank" rel="external">Spring Framework Reference Documentation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;BeanFactory 是 Spring 框架最核心的接口，它提高了高级 IOC 的配置机制。BeanFactory 使管理不同类型的 Java 对象成为可能，ApplicationContext 建立在 BeanFactory 的基础之上，提供了更多面向应用的功能，提供了国际化支持和框架事件体系，更易于创建实际应用。BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身，ApplicationContext 面向使用 Spring 框架的开发者。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（二）—— 基本概念的理解</title>
    <link href="http://yoursite.com/2016/11/12/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/11/12/Spring笔记（二）—— 基本概念的理解/</id>
    <published>2016-11-12T04:57:13.000Z</published>
    <updated>2016-11-12T11:39:19.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h2><p>控制反转（Inversion of Control），即依赖注入（Dependency Injection），它们两个是一个东西的两种不同的说法。依赖注入是一个程序设计模式和架构模型，是控制反转的特殊实现，它指一个对象应用另外一个对象来提供一个特殊的能力。IOC 是 Spring 的核心，理解它的时候可以分为控制和反转两步来理解。<br><a id="more"></a><br>举个例子：你现在接到一份工作，但是你没空，你把工作交给你的好友来完成，你对工作如何完成已不关心，控制权移交到你的好友手中，他可以决定如何完成工作，你只需要等待结果即可。<br>如上所述，控制即对工作的控制权，反转可理解为原先你所掌握的工作的控制权移交到好友身上。在 Spring 中理解为某一接口具体实现类的控制权从调用类中移除，转而由第三方控制（类似对成员变量的赋值的控制权从代码移交到 xml 配置文件中）。依赖注入理解为让调用者对某一接口实现类的依赖关系由第三方（容器或协助类）注入，以移除调用类对某一接口实现类的依赖。</p>
<h2 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h2><p>面相切面编程（AOP）是对面相对象编程（OOP）的补充，OOP 主要的模块单元是 class (类)，而 AOP 是 aspect（切面），切面使得诸如事务管理等跨越多个类型和对象的关注点模块化。AOP 通过横向抽取机制，为无法通过纵向继承体系进行抽象的类的重复性代码提供了解决方案。</p>
<h3 id="连接点（Join-point）"><a href="#连接点（Join-point）" class="headerlink" title="连接点（Join point）"></a>连接点（Join point）</h3><p>在程序执行过程中具有边界性质的特定点，比如某个类初始化前后、类的某个方法调用前后或者处理异常的时候。在 Spring AOP 中，一个连接点总是代表一个方法的执行。</p>
<h3 id="增强（Advice）"><a href="#增强（Advice）" class="headerlink" title="增强（Advice）"></a>增强（Advice）</h3><p>在切面的某个特定的连接点上执行的动作。增强有各种类型，其中包括 around、before 和 after 等。Spring 以拦截器作增强模型，并维护一个以连接点为中心的拦截器链。</p>
<h3 id="切点（Pointcut）"><a href="#切点（Pointcut）" class="headerlink" title="切点（Pointcut）"></a>切点（Pointcut）</h3><p>用来匹配连接点的断言。增强关联一个切点表达式，并在匹配这个切入点的连接点上运行。AOP 通过切点定位特定的连接点：Spring 默认使用切点语法 AspectJ。通过数据库查询的概念来理解切点和连接点：连接点相当于数据库中的记录，而切点相当于查询条件，一个切点可以匹配多个连接点。</p>
<h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><p>切面由切点和增强组成，包括横切逻辑和连接点的定义。在 Spring AOP 中，切面可以使用通用类（schema-based 基于模式的风格）或者在普通类中以 @Aspect 注解（@AspectJ 注解样式）来实现。</p>
<h3 id="引介（Introduction）"><a href="#引介（Introduction）" class="headerlink" title="引介（Introduction）"></a>引介（Introduction）</h3><p>引介是一种特殊的增强，它为类添加一些属性和方法。一个业务类原先没有实现某个接口，通过 AOP 的引介功能，可以动态地为该业务添加接口的实现逻辑，让业务类成为该接口的实现类。例如：使用一个引介来使 bean 实现 IsModified 接口，以便简化缓存机制。</p>
<h3 id="目标对象（Target-object）"><a href="#目标对象（Target-object）" class="headerlink" title="目标对象（Target object）"></a>目标对象（Target object）</h3><p>被一个或多个切面所增强的对象。因为 Spring AOP 是使用运行时代理来实现的，所以这个对象总是一个代理对象。</p>
<h3 id="代理（Proxy）"><a href="#代理（Proxy）" class="headerlink" title="代理（Proxy）"></a>代理（Proxy）</h3><p>一个类被 AOP 织入增强后，就生成一个结果类，它是融合了原类和增强逻辑的代理类。根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能是原类的子类，所以我们可以采用调用原类相同的方式调用代理类。在 Spring 中，AOP 代理可以是 JDK 动态代理或者 CGLIB 代理。</p>
<h3 id="织入（Weaving）"><a href="#织入（Weaving）" class="headerlink" title="织入（Weaving）"></a>织入（Weaving）</h3><p> 织入是将增强添加到目标类具体连接点上的过程。AOP 有三种织入方式：</p>
<ul>
<li>编译期织入，要求特殊的 Java 编译器</li>
<li>类装载期织入，要求使用特殊的类装载器</li>
<li>动态代理织入，在运行期为目标类添加增强生成子类的方式    </li>
</ul>
<p>Spring 采用动态代理织入（即在运行时完成织入），而 AspectJ 采用编译期和类装载期织入。</p>
<h2 id="Spring-框架组件列表"><a href="#Spring-框架组件列表" class="headerlink" title="Spring 框架组件列表"></a>Spring 框架组件列表</h2><table>
<thead>
<tr>
<th>GroupId</th>
<th>ArtifactId</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework</td>
<td>spring-aop</td>
<td>支持基于代理的 AOP</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-aspects</td>
<td>基于 AspectJ 的切面</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-beans</td>
<td>包含 Groovy 的 Beans 支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-context</td>
<td>应用程序上下文运行时，包括调度和远程抽象</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-context-support</td>
<td>支持将常见的第三方库集成到 Spring 应用程序上下文的类中</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-core</td>
<td>Spring 核心，为其它模块所用</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-expression</td>
<td>Spring 表达式（SpEL）</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument</td>
<td>JVM 引导用的代理工具</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-instrument-tomcat</td>
<td>Tomcat 的代理工具</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jdbc</td>
<td>JDBC 支持包，包括 DataSource 设置和 JDBC 访问支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-jms</td>
<td>JMS 支持包，包括用于发送和接收 JMS 消息的帮助类</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-messaging</td>
<td>支持消息架构和协议</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-orm</td>
<td>对象/关系映射，包含对 JPA 和 Hibernate 支持</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-oxm</td>
<td>对象/XML映射</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-test</td>
<td>支持单元测试和集成测试的 Spring 组件</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-tx</td>
<td>事务基础设施，包括 DAO 支持和 JCA 集成</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-web</td>
<td>Web 支持包，包括客户端和 Web 远程处理</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-webmvc</td>
<td>REST Web 服务和 Web 应用程序实现的 model-view-controller</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-webmvc-portlet</td>
<td>MVC 实现在 Portlet 环境中的使用</td>
</tr>
<tr>
<td>org.springframework</td>
<td>spring-websocket</td>
<td>WebSocket 和 SockJS 实现，包含 STOMP 支持</td>
</tr>
</tbody>
</table>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://github.com/waylau/spring-framework-4-reference/" target="_blank" rel="external">中文翻译《Spring Framework 4.x参考文档》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;控制反转（IOC）&quot;&gt;&lt;a href=&quot;#控制反转（IOC）&quot; class=&quot;headerlink&quot; title=&quot;控制反转（IOC）&quot;&gt;&lt;/a&gt;控制反转（IOC）&lt;/h2&gt;&lt;p&gt;控制反转（Inversion of Control），即依赖注入（Dependency Injection），它们两个是一个东西的两种不同的说法。依赖注入是一个程序设计模式和架构模型，是控制反转的特殊实现，它指一个对象应用另外一个对象来提供一个特殊的能力。IOC 是 Spring 的核心，理解它的时候可以分为控制和反转两步来理解。&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring笔记（一）—— 版本新特性</title>
    <link href="http://yoursite.com/2016/11/12/Spring%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%20%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2016/11/12/Spring笔记（一）—— 版本新特性/</id>
    <published>2016-11-12T03:01:02.000Z</published>
    <updated>2016-11-20T07:13:44.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-spring-2-0-和-2-5-的新特性"><a href="#1-spring-2-0-和-2-5-的新特性" class="headerlink" title="1. spring 2.0 和 2.5 的新特性"></a>1. spring 2.0 和 2.5 的新特性</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>JDK 版本要在 1.4.2 以上，Java 5 和 Java 6 都支持。<br>Spring 框架继续保持对 Java EE 1.3 及以后版本的兼容，完全支持 Java EE 5。<br>对服务器（应用服务器和Web服务器）的支持：<br><a id="more"></a></p>
<ul>
<li>WebLogic：8.1、9.0、9.2、10</li>
<li>WebSphere：5.1、6.0、6.1</li>
<li>OC4J(Oracle)：10.1.3、11</li>
<li>JBoss：3.2、4.0、4.2</li>
<li>Tomcat：4.1、5.0、5.5、6.0</li>
<li>Jetty：4.2、5.1、6.1</li>
<li>Resin：2.1、3.0、3.1</li>
<li>GlassFish：v1、v2</li>
</ul>
<h3 id="1-2-控制反转（IOC）容器"><a href="#1-2-控制反转（IOC）容器" class="headerlink" title="1.2 控制反转（IOC）容器"></a>1.2 控制反转（IOC）容器</h3><h4 id="1-2-1-新的-bean-作用域"><a href="#1-2-1-新的-bean-作用域" class="headerlink" title="1.2.1 新的 bean 作用域"></a>1.2.1 新的 bean 作用域</h4><p>Spring2.0：IoC 容器中只支持 singleton 和 prototype 两个不同的 bean 作用域。<br>Spring2.5：还支持 request、session、global session 三个在 web 环境下使用的 bean 作用域，且提供了hooks，可以让用户创建自己的作用域。</p>
<h4 id="1-2-2-更简单的-XML-配置"><a href="#1-2-2-更简单的-XML-配置" class="headerlink" title="1.2.2 更简单的 XML 配置"></a>1.2.2 更简单的 XML 配置</h4><p>Spring2.5 对 Spring2.0 的 DTD 进行了更新，spring-beans-2.0.dtd 可在发布包下的 dist/resources 下找到。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"</span></div><div class="line">          "http://www.springframework.org/dtd/spring-beans-2.0.dtd"&gt;</div></pre></td></tr></table></figure></p>
<h4 id="1-2-3-可扩展的-XML-编写"><a href="#1-2-3-可扩展的-XML-编写" class="headerlink" title="1.2.3 可扩展的 XML 编写"></a>1.2.3 可扩展的 XML 编写</h4><p>作为一个应用程序开发人员或第三方框架或产品的供应商，开发自定义标签，供其他开发人员把这些标签嵌入到自己的Spring配置文件里。</p>
<h4 id="1-2-4-Annotation（注解）驱动配置"><a href="#1-2-4-Annotation（注解）驱动配置" class="headerlink" title="1.2.4 Annotation（注解）驱动配置"></a>1.2.4 Annotation（注解）驱动配置</h4><p>Spring 2.0 引入了一些用于配置的 annotation, 包括 <code>@Transactional, @Required, @PersistenceContext /@PersistenceUnit</code>。<br>Spring 2.5 引入了用于配置的完整的 Annotation 集合: <code>@Autowired</code>，以及对 JSR-250 注解 <code>@Resource, @PostConstruct, @PreDestroy</code> 的支持。</p>
<h4 id="1-2-5-在-classpath-中自动搜索组件"><a href="#1-2-5-在-classpath-中自动搜索组件" class="headerlink" title="1.2.5 在 classpath 中自动搜索组件"></a>1.2.5 在 classpath 中自动搜索组件</h4><p>组件类会注解为 stereotype: <code>@Component, @Repository, @Service, @Controller</code>，取决于程序的上下文配置，这些组件会被自动搜索到，并且转变为 Spring bean 定义，而不需要为每个类都进行明确的配置。</p>
<h3 id="1-3-面向切面编程（AOP）"><a href="#1-3-面向切面编程（AOP）" class="headerlink" title="1.3 面向切面编程（AOP）"></a>1.3 面向切面编程（AOP）</h3><h4 id="1-3-1-更加简单的-AOP-XML-配置"><a href="#1-3-1-更加简单的-AOP-XML-配置" class="headerlink" title="1.3.1 更加简单的 AOP XML 配置"></a>1.3.1 更加简单的 AOP XML 配置</h4><h4 id="1-3-2-对-AspectJ-切面的支持"><a href="#1-3-2-对-AspectJ-切面的支持" class="headerlink" title="1.3.2 对 @AspectJ 切面的支持"></a>1.3.2 对 @AspectJ 切面的支持</h4><h4 id="1-3-3-对-bean-命名-pointcut-的支持"><a href="#1-3-3-对-bean-命名-pointcut-的支持" class="headerlink" title="1.3.3 对 bean 命名 pointcut 的支持"></a>1.3.3 对 bean 命名 pointcut 的支持</h4><h4 id="1-3-4-对-AspectJ-装载时织入的支持"><a href="#1-3-4-对-AspectJ-装载时织入的支持" class="headerlink" title="1.3.4 对 AspectJ 装载时织入的支持"></a>1.3.4 对 AspectJ 装载时织入的支持</h4><h3 id="1-4-中间层"><a href="#1-4-中间层" class="headerlink" title="1.4 中间层"></a>1.4 中间层</h3><h4 id="1-4-1-在XML里更为简单的声明性事务配置"><a href="#1-4-1-在XML里更为简单的声明性事务配置" class="headerlink" title="1.4.1 在XML里更为简单的声明性事务配置"></a>1.4.1 在XML里更为简单的声明性事务配置</h4><p>Spring 2.5 支持方便的注解驱动的事务管理，通过 context:load-time-weaver 和 tx:annotation-driven mode=”aspectj” 的联合使用进行事务管理。</p>
<h4 id="1-4-2-对-Websphere-事务管理的完整支持"><a href="#1-4-2-对-Websphere-事务管理的完整支持" class="headerlink" title="1.4.2 对 Websphere 事务管理的完整支持"></a>1.4.2 对 Websphere 事务管理的完整支持</h4><p>要自动探测底层的 JTA 事务平台，可以使用 Spring 2.5 的新 tx:jta-transaction-manager 配置元素。它会自动探测 BEA WebLogic 和 IBM WebSphere，注册正确的 PlatformTransactionManager。</p>
<h4 id="1-4-3-JPA"><a href="#1-4-3-JPA" class="headerlink" title="1.4.3 JPA"></a>1.4.3 JPA</h4><p>Spring 2.5 对 OpenJPA 的支持升级到了 OpenJPA 1.0，支持 savepoint 这样的高级特性。</p>
<h4 id="1-4-4-异步的JMS"><a href="#1-4-4-异步的JMS" class="headerlink" title="1.4.4 异步的JMS"></a>1.4.4 异步的JMS</h4><p>在 Spring 2.0 之前，Spring 的 JMS 的作用局限于发送消息和同步接收消息。<br>Spring 2.0 提供对异步消息接收的完整支持。<br>在 Spring 2.5 中， JCA 风格的异步消息监听器设置也通过 GenericMessageEndpointManager 工具得到了支持。</p>
<h4 id="1-4-5-JDBC"><a href="#1-4-5-JDBC" class="headerlink" title="1.4.5 JDBC"></a>1.4.5 JDBC</h4><p>引入了新类，Spring 2.5 扩充了 SimpleJdbcTemplate 的功能，引入了 SimpleJdbcCall<br>和 SimpleJdbcInsert 操作对象。</p>
<h3 id="1-5-Web-层"><a href="#1-5-Web-层" class="headerlink" title="1.5 Web 层"></a>1.5 Web 层</h3><h4 id="1-5-1-Spring-MVC-合理的默认值"><a href="#1-5-1-Spring-MVC-合理的默认值" class="headerlink" title="1.5.1 Spring MVC 合理的默认值"></a>1.5.1 Spring MVC 合理的默认值</h4><h4 id="1-5-2-Portlet-框架"><a href="#1-5-2-Portlet-框架" class="headerlink" title="1.5.2 Portlet 框架"></a>1.5.2 Portlet 框架</h4><h4 id="1-5-3-基于-Annotation-的控制器"><a href="#1-5-3-基于-Annotation-的控制器" class="headerlink" title="1.5.3 基于 Annotation 的控制器"></a>1.5.3 基于 Annotation 的控制器</h4><h4 id="1-5-4-Spring-MVC-的表单标签库"><a href="#1-5-4-Spring-MVC-的表单标签库" class="headerlink" title="1.5.4 Spring MVC 的表单标签库"></a>1.5.4 Spring MVC 的表单标签库</h4><h4 id="1-5-5-对-Tiles-2，JSF-1-2，JAX-WS-支持"><a href="#1-5-5-对-Tiles-2，JSF-1-2，JAX-WS-支持" class="headerlink" title="1.5.5 对 Tiles 2，JSF 1.2，JAX-WS 支持"></a>1.5.5 对 Tiles 2，JSF 1.2，JAX-WS 支持</h4><h2 id="2-spring-3-x-的新特性"><a href="#2-spring-3-x-的新特性" class="headerlink" title="2. spring 3.x 的新特性"></a>2. spring 3.x 的新特性</h2><h3 id="2-1-spring-3-0"><a href="#2-1-spring-3-0" class="headerlink" title="2.1 spring 3.0"></a>2.1 spring 3.0</h3><h4 id="2-1-1-Spring3-0-以后分成多个-jar-包"><a href="#2-1-1-Spring3-0-以后分成多个-jar-包" class="headerlink" title="2.1.1 Spring3.0 以后分成多个 jar 包"></a>2.1.1 Spring3.0 以后分成多个 jar 包</h4><ul>
<li><code>org.springframework.aop</code>， 包含在应用中使用Spring的AOP特性时所需的类。</li>
<li><code>org.springframework.asm</code>，Spring独立的asm程序，Spring2.5.6的时候需要  asm.jar 包，3.0开始提供自己独立的asm.jar</li>
<li><code>org.springframework.aspects</code>，提供对AspectJ的支持，以方便的将面向切面的功能集成进IDE中，比如Eclipse AJDT.</li>
<li><code>org.springframework.beans</code>，所有应用都要用到，它包含访问配置文件，创建和管理Bean以及进行反转共控制和依赖注入操作时所需的类</li>
<li><code>org.springframework.context</code>，为 Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext 特性时所需的全部类，JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如 Velocity、 FreeMarker、 JasperReports 集成的类， 以及校验 Validation 方面的相关类。</li>
<li><code>org.springframework.context.support</code>，包含支持缓存Cache（ehcache）JCA、JMX、邮件服务（Java Mail、Mail）COS、任务计划Scheduling（Timer、Quartz）方面的类。</li>
<li><code>org.springframework.core</code>，包含 Spring 框架基本的核心工具类，Spring 其它组件要都要使用到这个包里的 类，是其它组件的基本核心。</li>
<li><code>org.springframework.expression</code>，包含Spring 表达式语言相关的类，应用使用到SpEL时需要添加这个jar包。</li>
<li><code>org.springframework.instrument.tomcat</code>，Spring3.0对Tomcat的连接池的集成。</li>
<li><code>org.springframework.instrument</code>，Spring3.0 对服务器的代理接口。</li>
<li><code>org.springframework.jdbc</code>，包含对 Spring 对 JDBC 数据访问进行封装的所有类。</li>
<li><code>org.springframework.jms</code>，提供了对JMS1.0.2/1.1 的支持类。</li>
<li><code>org.springframework.orm</code>，包含Spring对DAO特性集进行了扩展，使其支持iBATIS、JDO、OJB、TopLink，因+ 为Hibernate已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含 spring-dao.jar包。</li>
<li><code>org.springframework.oxm</code>，Spring 对 Object/XMl 的映射支持,可以让Java与XML之间来回切换。</li>
<li><code>org.springframework.test</code>，对Junit等测试框架的简单封装。</li>
<li><code>org.springframework.transaction</code>，为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。</li>
<li><code>org.springframework.web</code>，包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。</li>
<li><code>org.springframework.web.portlet</code>，对SpringMVC的增强，包含SpringMVC相关的类</li>
<li><code>org.springframework.web.servlet</code>，对J2EE6.0的Servlet3.0的支持。</li>
<li><code>org.springframework.web.struts</code>，对Struts框架支持，可以更方便更容易的集成Struts框架。</li>
</ul>
<h4 id="2-1-2-新增特性"><a href="#2-1-2-新增特性" class="headerlink" title="2.1.2 新增特性"></a>2.1.2 新增特性</h4><ul>
<li>Spring 表达式语言</li>
<li>增强的 IOC 和基于 java 的 Bean 元数据</li>
<li>通用类型转换系统和字段格式</li>
<li>来自于 Srping Web Services 项目的对象和 XML 之间的映射</li>
<li>增强的 REST 支持</li>
<li>@MVC additions （Spring的 MVC 注解增强）</li>
<li>声明式模型验证</li>
<li>提前对 JEE6 的支持</li>
<li>嵌入式数据库的支持</li>
</ul>
<h4 id="2-1-3-基于-Java-5-的核心API的更新"><a href="#2-1-3-基于-Java-5-的核心API的更新" class="headerlink" title="2.1.3 基于 Java 5 的核心API的更新"></a>2.1.3 基于 Java 5 的核心API的更新</h4><ul>
<li>BeanFactory接口尽可能的返回明确的实例：<ul>
<li>T getBean(Class<t> requiredType)</t></li>
<li>getBean(String name, Class<t> requiredType)</t></li>
<li>Map<string, t=""> getBeansOfType(Class<t> type)</t></string,></li>
</ul>
</li>
<li>Spring 的 TaskExecutor 继承 java.util.concurrent.Executor 接口<ul>
<li>扩展的子接口 AsyncTaskExecutor 支持标准的具有返回结果 Futures 的 Callables</li>
</ul>
</li>
<li>基于 Java5 的 API 和 SPI 转换器<ul>
<li>无状态的 ConversionService 和 Converters</li>
<li>取代标准的 JDK PropertyEditors</li>
</ul>
</li>
<li>类型化的 ApplicationListener<e></e></li>
</ul>
<h4 id="2-1-4-Spring-表达式语言（简称SpEL）"><a href="#2-1-4-Spring-表达式语言（简称SpEL）" class="headerlink" title="2.1.4 Spring 表达式语言（简称SpEL）"></a>2.1.4 Spring 表达式语言（简称SpEL）</h4><p>SpEL 使得 java 具有动态语言的风格，可以在运行时获取表达式的值。依赖注入时可以使用 SpEL 表达式语言, 不再只是原来简单的属性文件变量(xml)。<br>示例：</p>
<ul>
<li><p>xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"mycompany.RewardsTestDatabase"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseName"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"#&#123;systemProperties.databaseName&#125;"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keyGenerator"</span></span></div><div class="line">        <span class="attr">value</span>=<span class="string">"#&#123;strategyBean.databaseKeyGenerator&#125;"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>java 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewardsTestDatabase</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties.databaseName&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatabaseName</span><span class="params">(String dbName)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;strategyBean.databaseKeyGenerator&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyGenerator</span><span class="params">(KeyGenerator kg)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-1-5-增强的-IOC-和基于-java-的-bean-配置"><a href="#2-1-5-增强的-IOC-和基于-java-的-bean-配置" class="headerlink" title="2.1.5 增强的 IOC 和基于 java 的 bean 配置"></a>2.1.5 增强的 IOC 和基于 java 的 bean 配置</h4><p>更多的注解的支持：<code>@Configuration，@Bean，@DependsOn， @Primary，@Lazy，@Import，@ImportResource，@Value</code><br>示例：</p>
<ul>
<li><p>xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.config"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"jdbcProperties"</span></span></div><div class="line">      <span class="attr">location</span>=<span class="string">"classpath:org/example/config/jdbc.properties"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>也可以使用如下代码来代替 xml 的配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);  </div><div class="line">FooService fooService = ctx.getBean(FooService.class);</div></pre></td></tr></table></figure>
</li>
<li><p>java 代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.example.config;</div><div class="line">...</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.url&#125;"</span>) String jdbcUrl;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.username&#125;"</span>) String username;</div><div class="line">    <span class="keyword">private</span> <span class="meta">@Value</span>(<span class="string">"#&#123;jdbcProperties.password&#125;"</span>) String password;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooService <span class="title">fooService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FooServiceImpl(fooRepository());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FooRepository <span class="title">fooRepository</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HibernateFooRepository(sessionFactory());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SessionFactory <span class="title">sessionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// wire up a session factory</span></div><div class="line">        AnnotationSessionFactoryBean asFactoryBean = <span class="keyword">new</span> AnnotationSessionFactoryBean();</div><div class="line">        asFactoryBean.setDataSource(dataSource());</div><div class="line">        <span class="comment">// additional config</span></div><div class="line">        <span class="keyword">return</span> asFactoryBean.getObject();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DriverManagerDataSource(jdbcUrl, username, password);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-1-6-通用类型转换系统和字段格式化系统"><a href="#2-1-6-通用类型转换系统和字段格式化系统" class="headerlink" title="2.1.6 通用类型转换系统和字段格式化系统"></a>2.1.6 通用类型转换系统和字段格式化系统</h4><p>Spring3.0 加入了一个通用的类型转换系统，它被 SpEL 用作类型转换，并且可能被一个 Spring 容器使用，用于当绑定 bean 的属性值时进行类型转换。此外还增加了一个字段格式化系统，它提供了更简单且强大的功能以替代在客户端环境下的 Javabean 的 PropertyEidtors。  </p>
<h4 id="2-1-7-声明式模型验证"><a href="#2-1-7-声明式模型验证" class="headerlink" title="2.1.7 声明式模型验证"></a>2.1.7 声明式模型验证</h4><p>支持 JSR303，使用 Hibernate Validator 作为默认实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </div><div class="line">    <span class="meta">@NotNull</span>  </div><div class="line">    <span class="meta">@Max</span>(<span class="number">64</span>)  </div><div class="line">    <span class="keyword">private</span> String name;  </div><div class="line"></div><div class="line">    <span class="meta">@Min</span>(<span class="number">0</span>)  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-spring-3-1"><a href="#2-2-spring-3-1" class="headerlink" title="2.2 spring 3.1"></a>2.2 spring 3.1</h3><h4 id="2-2-1-新增特性"><a href="#2-2-1-新增特性" class="headerlink" title="2.2.1 新增特性"></a>2.2.1 新增特性</h4><ul>
<li>Cache 抽象</li>
<li>Bean 定义配置文件</li>
<li>Environment 抽象</li>
<li>PropertySource 抽象</li>
<li>注解代替 xml 配置</li>
<li>对 Hibernate 4.x 的支持</li>
<li>TestContext 框架对 @Configuration 和 Bean 定义配置文件 的支持</li>
<li>更为简洁的构造函数注入 c: namespace</li>
<li>非标准 setter 类的注入</li>
<li>Servlet 3 code-based configuration of Servlet Container 的支持</li>
<li>Servlet 3 MultipartResolver 的支持</li>
<li>改善了 O/R 映射支持，允许无persistence.xml的JPA包扫描</li>
<li>可以在 controller 中，使用 annotation 临时指定特殊的 Mapping 或者 ExceptionHandler，而且整个体系更加灵活和可扩展。</li>
</ul>
<h3 id="2-3-spring-3-2"><a href="#2-3-spring-3-2" class="headerlink" title="2.3 spring 3.2"></a>2.3 spring 3.2</h3><h4 id="2-3-1-新增特性"><a href="#2-3-1-新增特性" class="headerlink" title="2.3.1 新增特性"></a>2.3.1 新增特性</h4><ul>
<li>支持基于Servlet 3的异步请求处理</li>
<li>Spring MVC Test框架</li>
<li>内容协商（Content Negotiation）改进。ContentNeogtiationStrategy 现在可以根据传入请求确定请求的媒体类型。可用的实现是基于文件扩展名、查询参数、“Accept”头或者一个固定的内容类型。</li>
<li>@ControllerAdvice</li>
<li>矩阵变量（Matrix Variables），增加了 @MatrixVariable 用于从请求URI中提取矩阵变量。</li>
<li>增加了一个抽象基础类用于支持基于代码的Servlet 3+容器初始化。</li>
<li>ResponseEntityExceptionHandler，用于处理异常消息的转换，和 DefaultHandlerExceptionResolver 的区别在于，这个类返回 ModelAndView。</li>
<li>RestTemplate 和 @RequestBody 的参数支持泛型。</li>
<li>支持Jackson JSON 2</li>
<li>支持Tiles 3</li>
<li>改进 @RequestBody。@RequestBody 和 @RequestPart 的参数现在可以跟随Error参数，使它可以在 @RequestMapping 方法中处理验证的错误，@RequestBody 现在有一个 required 属性。</li>
<li>HTTP PATCH 方法。HTTP PATCH方法现在可用于@RequestMapping</li>
<li>拦截器（Interceptor）支持 URL patterns</li>
<li>在注入点（Injection Point）和Bean方法定义中使用元注解</li>
<li>初步支持JCache 0.5</li>
<li>@DateTimeFormat不再依赖Joda Time</li>
<li>全局日期时间格式化</li>
<li>新的测试特性</li>
<li>并发性的微调</li>
<li>基于Gradle的构建系统，并迁移到GitHub</li>
<li>支持Java SE 7和OpenJDK 7</li>
</ul>
<h2 id="3-spring-4-x-的新特性"><a href="#3-spring-4-x-的新特性" class="headerlink" title="3. spring 4.x 的新特性"></a>3. spring 4.x 的新特性</h2><h3 id="3-1-spring-4-0"><a href="#3-1-spring-4-0" class="headerlink" title="3.1 spring 4.0"></a>3.1 spring 4.0</h3><h4 id="3-1-1-新增特性"><a href="#3-1-1-新增特性" class="headerlink" title="3.1.1 新增特性"></a>3.1.1 新增特性</h4><ul>
<li>删除了被丢弃的包和方法</li>
<li>Java 8 的支持，最低需要 Java 6</li>
<li>使用 Java EE 6 或以上的版本来作为基线，同时包含了相关的 JPA2.0 和 Servlet3.0 的规范</li>
<li>使用 Groovy 的 DSL（DomainSpecific Languages）来定义 Bean</li>
<li>核心容器的改进<ul>
<li>Spring 注入 Bean 的时候把泛型类型当成一种形式的限定符。使用 Spring DataRepository 可以方便的插入特定的实现：@Autowired Repository<customer> customerRepository。</customer></li>
<li>使用 Spring 的元注解支持，可以开发自定义注解来公开源注解的特定属性。</li>
<li>当自动装配到 lists 和 arrays 时，Beans 可以被排序，支持 @Order 注解和 Ordered 接口两种方式。 @Lazy 注解可以用在注入点以及 @Bean 定义上。</li>
<li>引入 @Description 注解,开发人员可以使用基于Java 方式的配置。</li>
<li>根据条件筛选 Beans 的广义模型通过 @Conditional 注解加入。这和@Profile支持的类似，但是允许以编程式开发用户定义的策略。</li>
<li>基于 CGLIB 的代理类不在需要默认的构造方法。</li>
<li>框架支持管理时区。</li>
</ul>
</li>
<li>常规 Web 改进<ul>
<li>在 Spring MVC 应用中使用新的 @RestController 注解时，不再需要给 @RequestMapping 的方法添加 @ResponseBody 注解。</li>
<li>AsyncRestTemplate 类已被添加进来，当开发 REST 客户端时，允许非阻塞异步支持。</li>
<li>当开发 Spring MVC 应用时，Spring 现在提供了全面的时区支持</li>
</ul>
</li>
<li>WebSocket, SockJS 和 STOMP 消息</li>
<li>测试改进，引入了几个用于单元测试和集成测试的新功能<ul>
<li>几乎 spring-test 模块中所有的注解（例如：@ContextConfiguration、@WebAppConfiguration、@ContextHierarchy、@ActiveProfiles 等等)可以用作元注解来创建自定义的 composed annotations 并且可以减少测试套件的配置。</li>
<li>现在可以以编程方式解决 Bean 定义配置文件的激活。只需要实现一个自定义的 ActiveProfilesResolver，并且通过 @ActiveProfiles的resolver 属性注册。</li>
<li>新的 SocketUtils 类被引入到了 spring-core 模块。</li>
</ul>
</li>
</ul>
<h3 id="3-2-spring-4-1"><a href="#3-2-spring-4-1" class="headerlink" title="3.2 spring 4.1"></a>3.2 spring 4.1</h3><h4 id="3-2-1-新增特性"><a href="#3-2-1-新增特性" class="headerlink" title="3.2.1 新增特性"></a>3.2.1 新增特性</h4><ul>
<li>核心部分基本上无变化，提供了 DirectFieldAccessor 用于直接字段访问、yaml 配置、SpEL 的字节码编译化、BackOff 退避算法的基本实现、Base64Utils、SmartInitializingSingleton等；</li>
<li>在任务调度和事件机制上加入了异常处理部分；</li>
<li>cache 部分加入 jcache 的集成、类级别的 @CacheConfig 的支持、CacheResolver；</li>
<li>mvc 部分提供了一些视图解析器的 mvc 标签实现简化配置、提供了 GroovyWebApplicationContext 用于 Groovy web 集成、提供了 Gson、protobuf 的 HttpMessageConverter、静态资源处理方面添加了 resolver和 transformer、提供了对 groovy-templates 模板的支持、JSONP 的支持、对 Jackson 的 @JsonView 的支持等；</li>
<li>提供了页面自动化测试框架 Spring MVC Test HtmlUnit；</li>
<li>test 部分提供了更便利的 @sql 标签来执行测试脚本的初始化、MockRestServiceServer 对 AyncRestTemplate 支持、MockMvcConfigurer 来全局配置 MockMvc；</li>
<li>提供了对 Java 8 Optional 的支持（ObjectToOptionalConverter 实现；可以在MVC中如 @RequestParam 等注解的绑定）、从Spring 4.1起 Ehcache 支持需要 EhCache 2.5 或更高版本、兼容 Quartz 2.1.4、支持 javax.annotation.Priority（等价于@Order）、JMS API的增强、SpringJUnit4ClassRunner 需要 JUnit 4.9或更高版本支持。</li>
</ul>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="http://jinnianshilongnian.iteye.com/blog/2102278" target="_blank" rel="external">开涛的博客–Spring 4.1 新特性——综述</a><br><a href="http://blog.csdn.net/z1049186181/article/details/51446643" target="_blank" rel="external">BigZ的专栏–Spring 4.0 新功能和增强</a><br><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">中文翻译 Spring Framework 4.x参考文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-spring-2-0-和-2-5-的新特性&quot;&gt;&lt;a href=&quot;#1-spring-2-0-和-2-5-的新特性&quot; class=&quot;headerlink&quot; title=&quot;1. spring 2.0 和 2.5 的新特性&quot;&gt;&lt;/a&gt;1. spring 2.0 和 2.5 的新特性&lt;/h2&gt;&lt;h3 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1 简介&quot;&gt;&lt;/a&gt;1.1 简介&lt;/h3&gt;&lt;p&gt;JDK 版本要在 1.4.2 以上，Java 5 和 Java 6 都支持。&lt;br&gt;Spring 框架继续保持对 Java EE 1.3 及以后版本的兼容，完全支持 Java EE 5。&lt;br&gt;对服务器（应用服务器和Web服务器）的支持：&lt;br&gt;
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/11/hello-world/"/>
    <id>http://yoursite.com/2016/11/11/hello-world/</id>
    <published>2016-11-11T03:01:02.000Z</published>
    <updated>2016-11-12T04:11:03.051Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github 与 Hexo 搭建博客步骤（使用 Next 主题）</title>
    <link href="http://yoursite.com/2016/11/11/Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2016/11/11/Github与hexo搭建博客步骤/</id>
    <published>2016-11-11T03:01:02.000Z</published>
    <updated>2016-11-12T04:06:22.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装前的准备"><a href="#1-安装前的准备" class="headerlink" title="1. 安装前的准备"></a>1. 安装前的准备</h2><p>Hexo 是一个快速简单并且强大的博客框架，使用者可以使用 markdown 语法编写文章，然后通过 hexo 生成带有主题的静态文件，并上传到 github，生成的 html 文件可以在浏览器上访问。本安装教程是在 ubuntu 平台上进行的，其他平台请另寻他处。<br>安装前 Hexo 前需要先安装 Node.js 和 Git，在后面会描述其安装过程。<br><a id="more"></a></p>
<h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><p>使用如下命令安装 Git，在这之后可以先了解 git 简单命令的使用，推荐：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a>。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git-core</div></pre></td></tr></table></figure>
<h2 id="3-安装-Node-js"><a href="#3-安装-Node-js" class="headerlink" title="3. 安装 Node.js"></a>3. 安装 Node.js</h2><p>我们可以使用 nvm 来安装 Node.js ，方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>
<p>安装完 nvm 之后重启窗口安装 Node.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install stable</div></pre></td></tr></table></figure></p>
<p>如果不想使用命令安装可以直接下载 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 的安装包安装。<br>下载完 linux 下的压缩包后，将其复制到 /usr/local 目录下，并使用 tar -xvJf + 文件名，对压缩包进行解压，更改解压后的文件夹的权限为755。<br>修改环境变量，使用 vim 修改 /etc/profile，在文件末尾添加两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># node.js</div><div class="line">export NODE=/usr/local/node-v6.9.1-linux-x64</div><div class="line">export PATH=$&#123;NODE&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>之后执行命令 source /etc/profile，使用 node -v 命令查看版本号。</p>
<h2 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4. 安装 Hexo"></a>4. 安装 Hexo</h2><p>使用 npm 安装 hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install npm</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install nodejs-legacy</div><div class="line">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>经过一段时间的等待，会在终端显示如下树状结果，hexo 安装完毕。</p>
<p><img src="/posts_img/after_install_hexo.png" alt="after_install_hexo"></p>
<p>当 hexo 安装完毕，使用如下命令初始化 hexo 目录并安装依赖，生成的目录在当前所在的目录之下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt; # 初始化 hexo 并创建目录</div><div class="line">$ cd &lt;folder&gt; # 切换到目录之下</div><div class="line">$ npm install # 安装依赖包</div></pre></td></tr></table></figure></p>
<p>hexo 常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo g #完整命令为hexo generate，用于生成静态文件</div><div class="line">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览</div><div class="line">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</div><div class="line">$ hexo n #完整命令为hexo new，用于新建一篇文章</div></pre></td></tr></table></figure></p>
<p>在本地开启博客，用浏览器访问 <a href="http://localhost:4000/：" target="_blank" rel="external">http://localhost:4000/：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<h2 id="5-注册-Github-并创建-repository"><a href="#5-注册-Github-并创建-repository" class="headerlink" title="5. 注册 Github 并创建 repository"></a>5. 注册 Github 并创建 repository</h2><p>到 <a href="https://github.com/" target="_blank" rel="external">Github</a> 官网注册 Github 账号，登录进入个人主页选择 Repositories，再点击旁边的 NEW 按钮创建新的 repository，名字的格式必须为 name.github.io，例如：windows7lake.github.io。    </p>
<p><img src="/posts_img/create_repository.png" alt="create_repository"></p>
<h2 id="6-hexo-的配置"><a href="#6-hexo-的配置" class="headerlink" title="6. hexo 的配置"></a>6. hexo 的配置</h2><p>整个博客的配置文件，位于 <code>hexo\_config.yml</code>，通过它，我们可以对整个博客进行配置。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Lio's Blog	# 网站即博客的标题</div><div class="line">subtitle: No pains no gains! 	 	# 博客的副标题</div><div class="line">description: No pains no gains, Believes oneself, Nothing impossible!		# 博客的描述</div><div class="line">author: Lio Lin		# 作者</div><div class="line">language: zh-CN		# 语言</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL	设置自己的域名</div><div class="line">## If your site is put in a subdirectory,</div><div class="line">## set url as 'http://yoursite.com/child' and root as '/child/'</div><div class="line">url: http://yoursite.com</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md 	# 新创建的文章的默认文件名</div><div class="line">default_layout: post		</div><div class="line">titlecase: false 		# 将标题转换为标题大小写</div><div class="line">external_link: true 		# 在新的标签中打开外部连接</div><div class="line">filename_case: 0		# 0 为默认; 1 为小写; 2 为大写</div><div class="line">render_drafts: false		# 是否显示草稿</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false		# 是否创建相对于根文件夹的链接</div><div class="line">future: true</div><div class="line">highlight:			# 代码块设置</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format	时间格式</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10		# 每页显示的文章数，0 表示不分页</div><div class="line">pagination_dir: page	# 分页目录</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape	# 主题名</div><div class="line"></div><div class="line"># Deployment	部署到 github 的配置</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://github.com/windows7lake/windows7lake.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>使用如下命令克隆 Next 主题到我们的本地博客之下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>主题的配置文件，位于 <code>hexo\theme\主题名\_config.yml</code>，对主题的设置。<br>这里对主题的配置可以参考 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a> 官网。</p>
<h2 id="7-将本地-Hexo-发布到-Github"><a href="#7-将本地-Hexo-发布到-Github" class="headerlink" title="7. 将本地 Hexo 发布到 Github"></a>7. 将本地 Hexo 发布到 Github</h2><p>在本地创建 ssh key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<p>后面的 <code>your_email@youremail.com</code> 改为自己的邮箱，之后会要求确认路径和输入密码，一路回车就行。成功的话会在 <code>~/</code> 下生成 <code>.ssh</code> 文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的 key。   </p>
<p>回到 github，进入 Settings，选择 SSH and GPG Keys -&gt; New SSH Key，title 随便填，粘贴 key。为了验证是否成功，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果是第一次的会提示是否 continue，输入 yes 就会看到：<code>You’ve successfully authenticated， but GitHub does not provide shell access</code> ，这就表示已成功连上 github。   </p>
<p>接下来我们要做的就是把本地仓库传到 github 上去，在此之前还需要设置 username 和 email，因为 github 每次 commit 都会记录他们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;your name&quot;  </div><div class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure></p>
<p>发布本地博客内容到 Github，需切换到博客目录下，执行如下两条命令，执行如下的第二个命令，可能会要你输入用户名和密码，皆为注册 Github 时的数据，输入密码是不显示任何东西的，输入完毕回车即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>如果输入 <code>hexo d</code> 后遇到 <code>ERROR Deployer not found: Git</code>，则使用命令 <code>npm install hexo-deployer-git –save</code> 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装前的准备&quot;&gt;&lt;a href=&quot;#1-安装前的准备&quot; class=&quot;headerlink&quot; title=&quot;1. 安装前的准备&quot;&gt;&lt;/a&gt;1. 安装前的准备&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速简单并且强大的博客框架，使用者可以使用 markdown 语法编写文章，然后通过 hexo 生成带有主题的静态文件，并上传到 github，生成的 html 文件可以在浏览器上访问。本安装教程是在 ubuntu 平台上进行的，其他平台请另寻他处。&lt;br&gt;安装前 Hexo 前需要先安装 Node.js 和 Git，在后面会描述其安装过程。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
